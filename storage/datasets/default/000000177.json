{
	"title": "ArangoDB QA chain | 🦜️🔗 Langchain",
	"url": "https://python.langchain.com/docs/use_cases/graph/graph_arangodb_qa",
	"html": "Graph queryingArangoDB QA chain\nArangoDB QA chain\n\nThis notebook shows how to use LLMs to provide a natural language interface to an ArangoDB database.\n\nYou can get a local ArangoDB instance running via the ArangoDB Docker image:\n\ndocker run -p 8529:8529 -e ARANGO_ROOT_PASSWORD= arangodb/arangodb\n\n\nAn alternative is to use the ArangoDB Cloud Connector package to get a temporary cloud instance running:\n\npip install python-arango # The ArangoDB Python Driver\npip install adb-cloud-connector # The ArangoDB Cloud Instance provisioner\npip install openai\npip install langchain\n\n# Instantiate ArangoDB Database\nimport json\n\nfrom adb_cloud_connector import get_temp_credentials\nfrom arango import ArangoClient\n\ncon = get_temp_credentials()\n\ndb = ArangoClient(hosts=con[\"url\"]).db(\n    con[\"dbName\"], con[\"username\"], con[\"password\"], verify=True\n)\n\nprint(json.dumps(con, indent=2))\n\n    Log: requesting new credentials...\n    Succcess: new credentials acquired\n    {\n      \"dbName\": \"TUT3sp29s3pjf1io0h4cfdsq\",\n      \"username\": \"TUTo6nkwgzkizej3kysgdyeo8\",\n      \"password\": \"TUT9vx0qjqt42i9bq8uik4v9\",\n      \"hostname\": \"tutorials.arangodb.cloud\",\n      \"port\": 8529,\n      \"url\": \"https://tutorials.arangodb.cloud:8529\"\n    }\n\n# Instantiate the ArangoDB-LangChain Graph\nfrom langchain.graphs import ArangoGraph\n\ngraph = ArangoGraph(db)\n\nPopulating the Database​\n\nWe will rely on the Python Driver to import our GameOfThrones data into our database.\n\nif db.has_graph(\"GameOfThrones\"):\n    db.delete_graph(\"GameOfThrones\", drop_collections=True)\n\ndb.create_graph(\n    \"GameOfThrones\",\n    edge_definitions=[\n        {\n            \"edge_collection\": \"ChildOf\",\n            \"from_vertex_collections\": [\"Characters\"],\n            \"to_vertex_collections\": [\"Characters\"],\n        },\n    ],\n)\n\ndocuments = [\n    {\n        \"_key\": \"NedStark\",\n        \"name\": \"Ned\",\n        \"surname\": \"Stark\",\n        \"alive\": True,\n        \"age\": 41,\n        \"gender\": \"male\",\n    },\n    {\n        \"_key\": \"CatelynStark\",\n        \"name\": \"Catelyn\",\n        \"surname\": \"Stark\",\n        \"alive\": False,\n        \"age\": 40,\n        \"gender\": \"female\",\n    },\n    {\n        \"_key\": \"AryaStark\",\n        \"name\": \"Arya\",\n        \"surname\": \"Stark\",\n        \"alive\": True,\n        \"age\": 11,\n        \"gender\": \"female\",\n    },\n    {\n        \"_key\": \"BranStark\",\n        \"name\": \"Bran\",\n        \"surname\": \"Stark\",\n        \"alive\": True,\n        \"age\": 10,\n        \"gender\": \"male\",\n    },\n]\n\nedges = [\n    {\"_to\": \"Characters/NedStark\", \"_from\": \"Characters/AryaStark\"},\n    {\"_to\": \"Characters/NedStark\", \"_from\": \"Characters/BranStark\"},\n    {\"_to\": \"Characters/CatelynStark\", \"_from\": \"Characters/AryaStark\"},\n    {\"_to\": \"Characters/CatelynStark\", \"_from\": \"Characters/BranStark\"},\n]\n\ndb.collection(\"Characters\").import_bulk(documents)\ndb.collection(\"ChildOf\").import_bulk(edges)\n\n    {'error': False,\n     'created': 4,\n     'errors': 0,\n     'empty': 0,\n     'updated': 0,\n     'ignored': 0,\n     'details': []}\n\nGetting & Setting the ArangoDB Schema​\n\nAn initial ArangoDB Schema is generated upon instantiating the ArangoDBGraph object. Below are the schema's getter & setter methods should you be interested in viewing or modifying the schema:\n\n# The schema should be empty here,\n# since `graph` was initialized prior to ArangoDB Data ingestion (see above).\n\nimport json\n\nprint(json.dumps(graph.schema, indent=4))\n\n    {\n        \"Graph Schema\": [],\n        \"Collection Schema\": []\n    }\n\ngraph.set_schema()\n\n# We can now view the generated schema\n\nimport json\n\nprint(json.dumps(graph.schema, indent=4))\n\n    {\n        \"Graph Schema\": [\n            {\n                \"graph_name\": \"GameOfThrones\",\n                \"edge_definitions\": [\n                    {\n                        \"edge_collection\": \"ChildOf\",\n                        \"from_vertex_collections\": [\n                            \"Characters\"\n                        ],\n                        \"to_vertex_collections\": [\n                            \"Characters\"\n                        ]\n                    }\n                ]\n            }\n        ],\n        \"Collection Schema\": [\n            {\n                \"collection_name\": \"ChildOf\",\n                \"collection_type\": \"edge\",\n                \"edge_properties\": [\n                    {\n                        \"name\": \"_key\",\n                        \"type\": \"str\"\n                    },\n                    {\n                        \"name\": \"_id\",\n                        \"type\": \"str\"\n                    },\n                    {\n                        \"name\": \"_from\",\n                        \"type\": \"str\"\n                    },\n                    {\n                        \"name\": \"_to\",\n                        \"type\": \"str\"\n                    },\n                    {\n                        \"name\": \"_rev\",\n                        \"type\": \"str\"\n                    }\n                ],\n                \"example_edge\": {\n                    \"_key\": \"266218884025\",\n                    \"_id\": \"ChildOf/266218884025\",\n                    \"_from\": \"Characters/AryaStark\",\n                    \"_to\": \"Characters/NedStark\",\n                    \"_rev\": \"_gVPKGSq---\"\n                }\n            },\n            {\n                \"collection_name\": \"Characters\",\n                \"collection_type\": \"document\",\n                \"document_properties\": [\n                    {\n                        \"name\": \"_key\",\n                        \"type\": \"str\"\n                    },\n                    {\n                        \"name\": \"_id\",\n                        \"type\": \"str\"\n                    },\n                    {\n                        \"name\": \"_rev\",\n                        \"type\": \"str\"\n                    },\n                    {\n                        \"name\": \"name\",\n                        \"type\": \"str\"\n                    },\n                    {\n                        \"name\": \"surname\",\n                        \"type\": \"str\"\n                    },\n                    {\n                        \"name\": \"alive\",\n                        \"type\": \"bool\"\n                    },\n                    {\n                        \"name\": \"age\",\n                        \"type\": \"int\"\n                    },\n                    {\n                        \"name\": \"gender\",\n                        \"type\": \"str\"\n                    }\n                ],\n                \"example_document\": {\n                    \"_key\": \"NedStark\",\n                    \"_id\": \"Characters/NedStark\",\n                    \"_rev\": \"_gVPKGPi---\",\n                    \"name\": \"Ned\",\n                    \"surname\": \"Stark\",\n                    \"alive\": true,\n                    \"age\": 41,\n                    \"gender\": \"male\"\n                }\n            }\n        ]\n    }\n\nQuerying the ArangoDB Database​\n\nWe can now use the ArangoDB Graph QA Chain to inquire about our data\n\nimport os\n\nos.environ[\"OPENAI_API_KEY\"] = \"your-key-here\"\n\nfrom langchain.chains import ArangoGraphQAChain\nfrom langchain.chat_models import ChatOpenAI\n\nchain = ArangoGraphQAChain.from_llm(\n    ChatOpenAI(temperature=0), graph=graph, verbose=True\n)\n\nchain.run(\"Is Ned Stark alive?\")\n\n    \n    \n    > Entering new ArangoGraphQAChain chain...\n    AQL Query (1):\n    WITH Characters\n    FOR character IN Characters\n    FILTER character.name == \"Ned\" AND character.surname == \"Stark\"\n    RETURN character.alive\n    \n    AQL Result:\n    [True]\n    \n    > Finished chain.\n\n\n\n\n\n    'Yes, Ned Stark is alive.'\n\nchain.run(\"How old is Arya Stark?\")\n\n    \n    \n    > Entering new ArangoGraphQAChain chain...\n    AQL Query (1):\n    WITH Characters\n    FOR character IN Characters\n    FILTER character.name == \"Arya\" && character.surname == \"Stark\"\n    RETURN character.age\n    \n    AQL Result:\n    [11]\n    \n    > Finished chain.\n\n\n\n\n\n    'Arya Stark is 11 years old.'\n\nchain.run(\"Are Arya Stark and Ned Stark related?\")\n\n    \n    \n    > Entering new ArangoGraphQAChain chain...\n    AQL Query (1):\n    WITH Characters, ChildOf\n    FOR v, e, p IN 1..1 OUTBOUND 'Characters/AryaStark' ChildOf\n        FILTER p.vertices[-1]._key == 'NedStark'\n        RETURN p\n    \n    AQL Result:\n    [{'vertices': [{'_key': 'AryaStark', '_id': 'Characters/AryaStark', '_rev': '_gVPKGPi--B', 'name': 'Arya', 'surname': 'Stark', 'alive': True, 'age': 11, 'gender': 'female'}, {'_key': 'NedStark', '_id': 'Characters/NedStark', '_rev': '_gVPKGPi---', 'name': 'Ned', 'surname': 'Stark', 'alive': True, 'age': 41, 'gender': 'male'}], 'edges': [{'_key': '266218884025', '_id': 'ChildOf/266218884025', '_from': 'Characters/AryaStark', '_to': 'Characters/NedStark', '_rev': '_gVPKGSq---'}], 'weights': [0, 1]}]\n    \n    > Finished chain.\n\n\n\n\n\n    'Yes, Arya Stark and Ned Stark are related. According to the information retrieved from the database, there is a relationship between them. Arya Stark is the child of Ned Stark.'\n\nchain.run(\"Does Arya Stark have a dead parent?\")\n\n    \n    \n    > Entering new ArangoGraphQAChain chain...\n    AQL Query (1):\n    WITH Characters, ChildOf\n    FOR v, e IN 1..1 OUTBOUND 'Characters/AryaStark' ChildOf\n    FILTER v.alive == false\n    RETURN e\n    \n    AQL Result:\n    [{'_key': '266218884027', '_id': 'ChildOf/266218884027', '_from': 'Characters/AryaStark', '_to': 'Characters/CatelynStark', '_rev': '_gVPKGSu---'}]\n    \n    > Finished chain.\n\n\n\n\n\n    'Yes, Arya Stark has a dead parent. The parent is Catelyn Stark.'\n\nChain Modifiers​\n\nYou can alter the values of the following ArangoDBGraphQAChain class variables to modify the behaviour of your chain results\n\n# Specify the maximum number of AQL Query Results to return\nchain.top_k = 10\n\n# Specify whether or not to return the AQL Query in the output dictionary\nchain.return_aql_query = True\n\n# Specify whether or not to return the AQL JSON Result in the output dictionary\nchain.return_aql_result = True\n\n# Specify the maximum amount of AQL Generation attempts that should be made\nchain.max_aql_generation_attempts = 5\n\n# Specify a set of AQL Query Examples, which are passed to\n# the AQL Generation Prompt Template to promote few-shot-learning.\n# Defaults to an empty string.\nchain.aql_examples = \"\"\"\n# Is Ned Stark alive?\nRETURN DOCUMENT('Characters/NedStark').alive\n\n# Is Arya Stark the child of Ned Stark?\nFOR e IN ChildOf\n    FILTER e._from == \"Characters/AryaStark\" AND e._to == \"Characters/NedStark\"\n    RETURN e\n\"\"\"\n\nchain.run(\"Is Ned Stark alive?\")\n\n# chain(\"Is Ned Stark alive?\") # Returns a dictionary with the AQL Query & AQL Result\n\n    \n    \n    > Entering new ArangoGraphQAChain chain...\n    AQL Query (1):\n    RETURN DOCUMENT('Characters/NedStark').alive\n    \n    AQL Result:\n    [True]\n    \n    > Finished chain.\n\n\n\n\n\n    'Yes, according to the information in the database, Ned Stark is alive.'\n\nchain.run(\"Is Bran Stark the child of Ned Stark?\")\n\n    \n    \n    > Entering new ArangoGraphQAChain chain...\n    AQL Query (1):\n    FOR e IN ChildOf\n        FILTER e._from == \"Characters/BranStark\" AND e._to == \"Characters/NedStark\"\n        RETURN e\n    \n    AQL Result:\n    [{'_key': '266218884026', '_id': 'ChildOf/266218884026', '_from': 'Characters/BranStark', '_to': 'Characters/NedStark', '_rev': '_gVPKGSq--_'}]\n    \n    > Finished chain.\n\n\n\n\n\n    'Yes, according to the information in the ArangoDB database, Bran Stark is indeed the child of Ned Stark.'\n\nPrevious\nDiffbot Graph Transformer\nNext\nNeo4j DB QA chain"
}