{
	"title": "GraphSparqlQAChain | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/use_cases/graph/graph_sparql_qa",
	"html": "Graph queryingGraphSparqlQAChain\nGraphSparqlQAChain\n\nGraph databases are an excellent choice for applications based on network-like models. To standardize the syntax and semantics of such graphs, the W3C recommends Semantic Web Technologies, cp. Semantic Web. SPARQL serves as a query language analogously to SQL or Cypher for these graphs. This notebook demonstrates the application of LLMs as a natural language interface to a graph database by generating SPARQL.\\ Disclaimer: To date, SPARQL query generation via LLMs is still a bit unstable. Be especially careful with UPDATE queries, which alter the graph.\n\nThere are several sources you can run queries against, including files on the web, files you have available locally, SPARQL endpoints, e.g., Wikidata, and triple stores.\n\nfrom langchain.chains import GraphSparqlQAChain\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.graphs import RdfGraph\n\ngraph = RdfGraph(\n    source_file=\"http://www.w3.org/People/Berners-Lee/card\",\n    standard=\"rdf\",\n    local_copy=\"test.ttl\",\n)\n\n\nNote that providing a local_file is necessary for storing changes locally if the source is read-only.\n\nRefresh graph schema information‚Äã\n\nIf the schema of the database changes, you can refresh the schema information needed to generate SPARQL queries.\n\ngraph.load_schema()\n\ngraph.get_schema\n\n    In the following, each IRI is followed by the local name and optionally its description in parentheses. \n    The RDF graph supports the following node types:\n    <http://xmlns.com/foaf/0.1/PersonalProfileDocument> (PersonalProfileDocument, None), <http://www.w3.org/ns/auth/cert#RSAPublicKey> (RSAPublicKey, None), <http://www.w3.org/2000/10/swap/pim/contact#Male> (Male, None), <http://xmlns.com/foaf/0.1/Person> (Person, None), <http://www.w3.org/2006/vcard/ns#Work> (Work, None)\n    The RDF graph supports the following relationships:\n    <http://www.w3.org/2000/01/rdf-schema#seeAlso> (seeAlso, None), <http://purl.org/dc/elements/1.1/title> (title, None), <http://xmlns.com/foaf/0.1/mbox_sha1sum> (mbox_sha1sum, None), <http://xmlns.com/foaf/0.1/maker> (maker, None), <http://www.w3.org/ns/solid/terms#oidcIssuer> (oidcIssuer, None), <http://www.w3.org/2000/10/swap/pim/contact#publicHomePage> (publicHomePage, None), <http://xmlns.com/foaf/0.1/openid> (openid, None), <http://www.w3.org/ns/pim/space#storage> (storage, None), <http://xmlns.com/foaf/0.1/name> (name, None), <http://www.w3.org/2000/10/swap/pim/contact#country> (country, None), <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> (type, None), <http://www.w3.org/ns/solid/terms#profileHighlightColor> (profileHighlightColor, None), <http://www.w3.org/ns/pim/space#preferencesFile> (preferencesFile, None), <http://www.w3.org/2000/01/rdf-schema#label> (label, None), <http://www.w3.org/ns/auth/cert#modulus> (modulus, None), <http://www.w3.org/2000/10/swap/pim/contact#participant> (participant, None), <http://www.w3.org/2000/10/swap/pim/contact#street2> (street2, None), <http://www.w3.org/2006/vcard/ns#locality> (locality, None), <http://xmlns.com/foaf/0.1/nick> (nick, None), <http://xmlns.com/foaf/0.1/homepage> (homepage, None), <http://creativecommons.org/ns#license> (license, None), <http://xmlns.com/foaf/0.1/givenname> (givenname, None), <http://www.w3.org/2006/vcard/ns#street-address> (street-address, None), <http://www.w3.org/2006/vcard/ns#postal-code> (postal-code, None), <http://www.w3.org/2000/10/swap/pim/contact#street> (street, None), <http://www.w3.org/2003/01/geo/wgs84_pos#lat> (lat, None), <http://xmlns.com/foaf/0.1/primaryTopic> (primaryTopic, None), <http://www.w3.org/2006/vcard/ns#fn> (fn, None), <http://www.w3.org/2003/01/geo/wgs84_pos#location> (location, None), <http://usefulinc.com/ns/doap#developer> (developer, None), <http://www.w3.org/2000/10/swap/pim/contact#city> (city, None), <http://www.w3.org/2006/vcard/ns#region> (region, None), <http://xmlns.com/foaf/0.1/member> (member, None), <http://www.w3.org/2003/01/geo/wgs84_pos#long> (long, None), <http://www.w3.org/2000/10/swap/pim/contact#address> (address, None), <http://xmlns.com/foaf/0.1/family_name> (family_name, None), <http://xmlns.com/foaf/0.1/account> (account, None), <http://xmlns.com/foaf/0.1/workplaceHomepage> (workplaceHomepage, None), <http://purl.org/dc/terms/title> (title, None), <http://www.w3.org/ns/solid/terms#publicTypeIndex> (publicTypeIndex, None), <http://www.w3.org/2000/10/swap/pim/contact#office> (office, None), <http://www.w3.org/2000/10/swap/pim/contact#homePage> (homePage, None), <http://xmlns.com/foaf/0.1/mbox> (mbox, None), <http://www.w3.org/2000/10/swap/pim/contact#preferredURI> (preferredURI, None), <http://www.w3.org/ns/solid/terms#profileBackgroundColor> (profileBackgroundColor, None), <http://schema.org/owns> (owns, None), <http://xmlns.com/foaf/0.1/based_near> (based_near, None), <http://www.w3.org/2006/vcard/ns#hasAddress> (hasAddress, None), <http://xmlns.com/foaf/0.1/img> (img, None), <http://www.w3.org/2000/10/swap/pim/contact#assistant> (assistant, None), <http://xmlns.com/foaf/0.1/title> (title, None), <http://www.w3.org/ns/auth/cert#key> (key, None), <http://www.w3.org/ns/ldp#inbox> (inbox, None), <http://www.w3.org/ns/solid/terms#editableProfile> (editableProfile, None), <http://www.w3.org/2000/10/swap/pim/contact#postalCode> (postalCode, None), <http://xmlns.com/foaf/0.1/weblog> (weblog, None), <http://www.w3.org/ns/auth/cert#exponent> (exponent, None), <http://rdfs.org/sioc/ns#avatar> (avatar, None)\n    \n\nQuerying the graph‚Äã\n\nNow, you can use the graph SPARQL QA chain to ask questions about the graph.\n\nchain = GraphSparqlQAChain.from_llm(\n    ChatOpenAI(temperature=0), graph=graph, verbose=True\n)\n\nchain.run(\"What is Tim Berners-Lee's work homepage?\")\n\n    \n    \n    > Entering new GraphSparqlQAChain chain...\n    Identified intent:\n    SELECT\n    Generated SPARQL:\n    PREFIX foaf: <http://xmlns.com/foaf/0.1/>\n    SELECT ?homepage\n    WHERE {\n        ?person foaf:name \"Tim Berners-Lee\" .\n        ?person foaf:workplaceHomepage ?homepage .\n    }\n    Full Context:\n    []\n    \n    > Finished chain.\n\n\n\n\n\n    \"Tim Berners-Lee's work homepage is http://www.w3.org/People/Berners-Lee/.\"\n\nUpdating the graph‚Äã\n\nAnalogously, you can update the graph, i.e., insert triples, using natural language.\n\nchain.run(\n    \"Save that the person with the name 'Timothy Berners-Lee' has a work homepage at 'http://www.w3.org/foo/bar/'\"\n)\n\n    \n    \n    > Entering new GraphSparqlQAChain chain...\n    Identified intent:\n    UPDATE\n    Generated SPARQL:\n    PREFIX foaf: <http://xmlns.com/foaf/0.1/>\n    INSERT {\n        ?person foaf:workplaceHomepage <http://www.w3.org/foo/bar/> .\n    }\n    WHERE {\n        ?person foaf:name \"Timothy Berners-Lee\" .\n    }\n    \n    > Finished chain.\n\n\n\n\n\n    'Successfully inserted triples into the graph.'\n\n\nLet's verify the results:\n\nquery = (\n    \"\"\"PREFIX foaf: <http://xmlns.com/foaf/0.1/>\\n\"\"\"\n    \"\"\"SELECT ?hp\\n\"\"\"\n    \"\"\"WHERE {\\n\"\"\"\n    \"\"\"    ?person foaf:name \"Timothy Berners-Lee\" . \\n\"\"\"\n    \"\"\"    ?person foaf:workplaceHomepage ?hp .\\n\"\"\"\n    \"\"\"}\"\"\"\n)\ngraph.query(query)\n\n    [(rdflib.term.URIRef('https://www.w3.org/'),),\n     (rdflib.term.URIRef('http://www.w3.org/foo/bar/'),)]\n\nPrevious\nNetworkX Graph QA\nNext\nNeptune Open Cypher QA Chain"
}