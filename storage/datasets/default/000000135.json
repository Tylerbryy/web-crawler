{
	"title": "Adding memory | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/expression_language/cookbook/memory",
	"html": "LangChain Expression LanguageCookbookAdding memory\nAdding memory\n\nThis shows how to add memory to an arbitrary chain. Right now, you can use the memory classes but need to hook it up manually\n\nfrom operator import itemgetter\n\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.memory import ConversationBufferMemory\nfrom langchain.prompts import ChatPromptTemplate, MessagesPlaceholder\nfrom langchain.schema.runnable import RunnableLambda, RunnablePassthrough\n\nmodel = ChatOpenAI()\nprompt = ChatPromptTemplate.from_messages(\n    [\n        (\"system\", \"You are a helpful chatbot\"),\n        MessagesPlaceholder(variable_name=\"history\"),\n        (\"human\", \"{input}\"),\n    ]\n)\n\nmemory = ConversationBufferMemory(return_messages=True)\n\nmemory.load_memory_variables({})\n\n    {'history': []}\n\nchain = (\n    RunnablePassthrough.assign(\n        history=RunnableLambda(memory.load_memory_variables) | itemgetter(\"history\")\n    )\n    | prompt\n    | model\n)\n\ninputs = {\"input\": \"hi im bob\"}\nresponse = chain.invoke(inputs)\nresponse\n\n    AIMessage(content='Hello Bob! How can I assist you today?', additional_kwargs={}, example=False)\n\nmemory.save_context(inputs, {\"output\": response.content})\n\nmemory.load_memory_variables({})\n\n    {'history': [HumanMessage(content='hi im bob', additional_kwargs={}, example=False),\n      AIMessage(content='Hello Bob! How can I assist you today?', additional_kwargs={}, example=False)]}\n\ninputs = {\"input\": \"whats my name\"}\nresponse = chain.invoke(inputs)\nresponse\n\n    AIMessage(content='Your name is Bob.', additional_kwargs={}, example=False)\n\nPrevious\nRouting by semantic similarity\nNext\nAdding moderation"
}