{
	"title": "RePhraseQuery | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/integrations/retrievers/re_phrase",
	"html": "ComponentsRetrieversRePhraseQuery\nRePhraseQuery\n\nRePhraseQuery is a simple retriever that applies an LLM between the user input and the query passed by the retriever.\n\nIt can be used to pre-process the user input in any way.\n\nExample‚Äã\nSetting up‚Äã\n\nCreate a vector store.\n\nimport logging\n\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.document_loaders import WebBaseLoader\nfrom langchain.embeddings import OpenAIEmbeddings\nfrom langchain.retrievers import RePhraseQueryRetriever\nfrom langchain.text_splitter import RecursiveCharacterTextSplitter\nfrom langchain.vectorstores import Chroma\n\nlogging.basicConfig()\nlogging.getLogger(\"langchain.retrievers.re_phraser\").setLevel(logging.INFO)\n\nloader = WebBaseLoader(\"https://lilianweng.github.io/posts/2023-06-23-agent/\")\ndata = loader.load()\n\ntext_splitter = RecursiveCharacterTextSplitter(chunk_size=500, chunk_overlap=0)\nall_splits = text_splitter.split_documents(data)\n\nvectorstore = Chroma.from_documents(documents=all_splits, embedding=OpenAIEmbeddings())\n\nUsing the default prompt‚Äã\n\nThe default prompt used in the from_llm classmethod:\n\nDEFAULT_TEMPLATE = \"\"\"You are an assistant tasked with taking a natural language \\\nquery from a user and converting it into a query for a vectorstore. \\\nIn this process, you strip out information that is not relevant for \\\nthe retrieval task. Here is the user query: {question}\"\"\"\n\nllm = ChatOpenAI(temperature=0)\nretriever_from_llm = RePhraseQueryRetriever.from_llm(\n    retriever=vectorstore.as_retriever(), llm=llm\n)\n\ndocs = retriever_from_llm.get_relevant_documents(\n    \"Hi I'm Lance. What are the approaches to Task Decomposition?\"\n)\n\n    INFO:langchain.retrievers.re_phraser:Re-phrased question: The user query can be converted into a query for a vectorstore as follows:\n    \n    \"approaches to Task Decomposition\"\n\ndocs = retriever_from_llm.get_relevant_documents(\n    \"I live in San Francisco. What are the Types of Memory?\"\n)\n\n    INFO:langchain.retrievers.re_phraser:Re-phrased question: Query for vectorstore: \"Types of Memory\"\n\nCustom prompt‚Äã\nfrom langchain.chains import LLMChain\nfrom langchain.prompts import PromptTemplate\n\nQUERY_PROMPT = PromptTemplate(\n    input_variables=[\"question\"],\n    template=\"\"\"You are an assistant tasked with taking a natural languge query from a user\n    and converting it into a query for a vectorstore. In the process, strip out all \n    information that is not relevant for the retrieval task and return a new, simplified\n    question for vectorstore retrieval. The new user query should be in pirate speech.\n    Here is the user query: {question} \"\"\",\n)\nllm = ChatOpenAI(temperature=0)\nllm_chain = LLMChain(llm=llm, prompt=QUERY_PROMPT)\n\nretriever_from_llm_chain = RePhraseQueryRetriever(\n    retriever=vectorstore.as_retriever(), llm_chain=llm_chain\n)\n\ndocs = retriever_from_llm_chain.get_relevant_documents(\n    \"Hi I'm Lance. What is Maximum Inner Product Search?\"\n)\n\n    INFO:langchain.retrievers.re_phraser:Re-phrased question: Ahoy matey! What be Maximum Inner Product Search, ye scurvy dog?\n\nPrevious\nPubMed\nNext\nSEC filing"
}