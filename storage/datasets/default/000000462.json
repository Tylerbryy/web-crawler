{
	"title": "Timescale Vector (Postgres) self-querying | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/integrations/retrievers/self_query/timescalevector_self_query",
	"html": "ComponentsRetrieversSelf-querying retrieverTimescale Vector (Postgres) self-querying\nTimescale Vector (Postgres) self-querying\n\nTimescale Vector is PostgreSQL++ for AI applications. It enables you to efficiently store and query billions of vector embeddings in PostgreSQL.\n\nThis notebook shows how to use the Postgres vector database (TimescaleVector) to perform self-querying. In the notebook we'll demo the SelfQueryRetriever wrapped around a TimescaleVector vector store.\n\nWhat is Timescale Vector?‚Äã\n\nTimescale Vector is PostgreSQL++ for AI applications.\n\nTimescale Vector enables you to efficiently store and query millions of vector embeddings in PostgreSQL.\n\nEnhances pgvector with faster and more accurate similarity search on 1B+ vectors via DiskANN inspired indexing algorithm.\nEnables fast time-based vector search via automatic time-based partitioning and indexing.\nProvides a familiar SQL interface for querying vector embeddings and relational data.\n\nTimescale Vector is cloud PostgreSQL for AI that scales with you from POC to production:\n\nSimplifies operations by enabling you to store relational metadata, vector embeddings, and time-series data in a single database.\nBenefits from rock-solid PostgreSQL foundation with enterprise-grade feature liked streaming backups and replication, high-availability and row-level security.\nEnables a worry-free experience with enterprise-grade security and compliance.\nHow to access Timescale Vector‚Äã\n\nTimescale Vector is available on Timescale, the cloud PostgreSQL platform. (There is no self-hosted version at this time.)\n\nLangChain users get a 90-day free trial for Timescale Vector.\n\nTo get started, signup to Timescale, create a new database and follow this notebook!\nSee the Timescale Vector explainer blog for more details and performance benchmarks.\nSee the installation instructions for more details on using Timescale Vector in python.\nCreating a TimescaleVector vectorstore‚Äã\n\nFirst we'll want to create a Timescale Vector vectorstore and seed it with some data. We've created a small demo set of documents that contain summaries of movies.\n\nNOTE: The self-query retriever requires you to have lark installed (pip install lark). We also need the timescale-vector package.\n\n#!pip install lark\n\n#!pip install timescale-vector\n\n\nIn this example, we'll use OpenAIEmbeddings, so let's load your OpenAI API key.\n\n# Get openAI api key by reading local .env file\n# The .env file should contain a line starting with `OPENAI_API_KEY=sk-`\nimport os\n\nfrom dotenv import find_dotenv, load_dotenv\n\n_ = load_dotenv(find_dotenv())\n\nOPENAI_API_KEY = os.environ[\"OPENAI_API_KEY\"]\n# Alternatively, use getpass to enter the key in a prompt\n# import os\n# import getpass\n# os.environ[\"OPENAI_API_KEY\"] = getpass.getpass(\"OpenAI API Key:\")\n\n\nTo connect to your PostgreSQL database, you'll need your service URI, which can be found in the cheatsheet or .env file you downloaded after creating a new database.\n\nIf you haven't already, signup for Timescale, and create a new database.\n\nThe URI will look something like this: postgres://tsdbadmin:<password>@<id>.tsdb.cloud.timescale.com:<port>/tsdb?sslmode=require\n\n# Get the service url by reading local .env file\n# The .env file should contain a line starting with `TIMESCALE_SERVICE_URL=postgresql://`\n_ = load_dotenv(find_dotenv())\nTIMESCALE_SERVICE_URL = os.environ[\"TIMESCALE_SERVICE_URL\"]\n\n# Alternatively, use getpass to enter the key in a prompt\n# import os\n# import getpass\n# TIMESCALE_SERVICE_URL = getpass.getpass(\"Timescale Service URL:\")\n\nfrom langchain.embeddings.openai import OpenAIEmbeddings\nfrom langchain.schema import Document\nfrom langchain.vectorstores.timescalevector import TimescaleVector\n\nembeddings = OpenAIEmbeddings()\n\n\nHere's the sample documents we'll use for this demo. The data is about movies, and has both content and metadata fields with information about particular movie.\n\ndocs = [\n    Document(\n        page_content=\"A bunch of scientists bring back dinosaurs and mayhem breaks loose\",\n        metadata={\"year\": 1993, \"rating\": 7.7, \"genre\": \"science fiction\"},\n    ),\n    Document(\n        page_content=\"Leo DiCaprio gets lost in a dream within a dream within a dream within a ...\",\n        metadata={\"year\": 2010, \"director\": \"Christopher Nolan\", \"rating\": 8.2},\n    ),\n    Document(\n        page_content=\"A psychologist / detective gets lost in a series of dreams within dreams within dreams and Inception reused the idea\",\n        metadata={\"year\": 2006, \"director\": \"Satoshi Kon\", \"rating\": 8.6},\n    ),\n    Document(\n        page_content=\"A bunch of normal-sized women are supremely wholesome and some men pine after them\",\n        metadata={\"year\": 2019, \"director\": \"Greta Gerwig\", \"rating\": 8.3},\n    ),\n    Document(\n        page_content=\"Toys come alive and have a blast doing so\",\n        metadata={\"year\": 1995, \"genre\": \"animated\"},\n    ),\n    Document(\n        page_content=\"Three men walk into the Zone, three men walk out of the Zone\",\n        metadata={\n            \"year\": 1979,\n            \"director\": \"Andrei Tarkovsky\",\n            \"genre\": \"science fiction\",\n            \"rating\": 9.9,\n        },\n    ),\n]\n\n\nFinally, we'll create our Timescale Vector vectorstore. Note that the collection name will be the name of the PostgreSQL table in which the documents are stored in.\n\nCOLLECTION_NAME = \"langchain_self_query_demo\"\nvectorstore = TimescaleVector.from_documents(\n    embedding=embeddings,\n    documents=docs,\n    collection_name=COLLECTION_NAME,\n    service_url=TIMESCALE_SERVICE_URL,\n)\n\nCreating our self-querying retriever‚Äã\n\nNow we can instantiate our retriever. To do this we'll need to provide some information upfront about the metadata fields that our documents support and a short description of the document contents.\n\nfrom langchain.chains.query_constructor.base import AttributeInfo\nfrom langchain.llms import OpenAI\nfrom langchain.retrievers.self_query.base import SelfQueryRetriever\n\n# Give LLM info about the metadata fields\nmetadata_field_info = [\n    AttributeInfo(\n        name=\"genre\",\n        description=\"The genre of the movie\",\n        type=\"string or list[string]\",\n    ),\n    AttributeInfo(\n        name=\"year\",\n        description=\"The year the movie was released\",\n        type=\"integer\",\n    ),\n    AttributeInfo(\n        name=\"director\",\n        description=\"The name of the movie director\",\n        type=\"string\",\n    ),\n    AttributeInfo(\n        name=\"rating\", description=\"A 1-10 rating for the movie\", type=\"float\"\n    ),\n]\ndocument_content_description = \"Brief summary of a movie\"\n\n# Instantiate the self-query retriever from an LLM\nllm = OpenAI(temperature=0)\nretriever = SelfQueryRetriever.from_llm(\n    llm, vectorstore, document_content_description, metadata_field_info, verbose=True\n)\n\nSelf Querying Retrieval with Timescale Vector‚Äã\n\nAnd now we can try actually using our retriever!\n\nRun the queries below and note how you can specify a query, filter, composite filter (filters with AND, OR) in natural language and the self-query retriever will translate that query into SQL and perform the search on the Timescale Vector (Postgres) vectorstore.\n\nThis illustrates the power of the self-query retriever. You can use it to perform complex searches over your vectorstore without you or your users having to write any SQL directly!\n\n# This example only specifies a relevant query\nretriever.get_relevant_documents(\"What are some movies about dinosaurs\")\n\n    /Users/avtharsewrathan/sideprojects2023/timescaleai/tsv-langchain/langchain/libs/langchain/langchain/chains/llm.py:275: UserWarning: The predict_and_parse method is deprecated, instead pass an output parser directly to LLMChain.\n      warnings.warn(\n\n\n    query='dinosaur' filter=None limit=None\n\n\n\n\n\n    [Document(page_content='A bunch of scientists bring back dinosaurs and mayhem breaks loose', metadata={'year': 1993, 'genre': 'science fiction', 'rating': 7.7}),\n     Document(page_content='A bunch of scientists bring back dinosaurs and mayhem breaks loose', metadata={'year': 1993, 'genre': 'science fiction', 'rating': 7.7}),\n     Document(page_content='Toys come alive and have a blast doing so', metadata={'year': 1995, 'genre': 'animated'}),\n     Document(page_content='Toys come alive and have a blast doing so', metadata={'year': 1995, 'genre': 'animated'})]\n\n# This example only specifies a filter\nretriever.get_relevant_documents(\"I want to watch a movie rated higher than 8.5\")\n\n    query=' ' filter=Comparison(comparator=<Comparator.GT: 'gt'>, attribute='rating', value=8.5) limit=None\n\n\n\n\n\n    [Document(page_content='Three men walk into the Zone, three men walk out of the Zone', metadata={'year': 1979, 'genre': 'science fiction', 'rating': 9.9, 'director': 'Andrei Tarkovsky'}),\n     Document(page_content='Three men walk into the Zone, three men walk out of the Zone', metadata={'year': 1979, 'genre': 'science fiction', 'rating': 9.9, 'director': 'Andrei Tarkovsky'}),\n     Document(page_content='A psychologist / detective gets lost in a series of dreams within dreams within dreams and Inception reused the idea', metadata={'year': 2006, 'rating': 8.6, 'director': 'Satoshi Kon'}),\n     Document(page_content='A psychologist / detective gets lost in a series of dreams within dreams within dreams and Inception reused the idea', metadata={'year': 2006, 'rating': 8.6, 'director': 'Satoshi Kon'})]\n\n# This example specifies a query and a filter\nretriever.get_relevant_documents(\"Has Greta Gerwig directed any movies about women\")\n\n    query='women' filter=Comparison(comparator=<Comparator.EQ: 'eq'>, attribute='director', value='Greta Gerwig') limit=None\n\n\n\n\n\n    [Document(page_content='A bunch of normal-sized women are supremely wholesome and some men pine after them', metadata={'year': 2019, 'rating': 8.3, 'director': 'Greta Gerwig'}),\n     Document(page_content='A bunch of normal-sized women are supremely wholesome and some men pine after them', metadata={'year': 2019, 'rating': 8.3, 'director': 'Greta Gerwig'})]\n\n# This example specifies a composite filter\nretriever.get_relevant_documents(\n    \"What's a highly rated (above 8.5) science fiction film?\"\n)\n\n    query=' ' filter=Operation(operator=<Operator.AND: 'and'>, arguments=[Comparison(comparator=<Comparator.GTE: 'gte'>, attribute='rating', value=8.5), Comparison(comparator=<Comparator.EQ: 'eq'>, attribute='genre', value='science fiction')]) limit=None\n\n\n\n\n\n    [Document(page_content='Three men walk into the Zone, three men walk out of the Zone', metadata={'year': 1979, 'genre': 'science fiction', 'rating': 9.9, 'director': 'Andrei Tarkovsky'}),\n     Document(page_content='Three men walk into the Zone, three men walk out of the Zone', metadata={'year': 1979, 'genre': 'science fiction', 'rating': 9.9, 'director': 'Andrei Tarkovsky'})]\n\n# This example specifies a query and composite filter\nretriever.get_relevant_documents(\n    \"What's a movie after 1990 but before 2005 that's all about toys, and preferably is animated\"\n)\n\n    query='toys' filter=Operation(operator=<Operator.AND: 'and'>, arguments=[Comparison(comparator=<Comparator.GT: 'gt'>, attribute='year', value=1990), Comparison(comparator=<Comparator.LT: 'lt'>, attribute='year', value=2005), Comparison(comparator=<Comparator.EQ: 'eq'>, attribute='genre', value='animated')]) limit=None\n\n\n\n\n\n    [Document(page_content='Toys come alive and have a blast doing so', metadata={'year': 1995, 'genre': 'animated'})]\n\nFilter k‚Äã\n\nWe can also use the self query retriever to specify k: the number of documents to fetch.\n\nWe can do this by passing enable_limit=True to the constructor.\n\nretriever = SelfQueryRetriever.from_llm(\n    llm,\n    vectorstore,\n    document_content_description,\n    metadata_field_info,\n    enable_limit=True,\n    verbose=True,\n)\n\n# This example specifies a query with a LIMIT value\nretriever.get_relevant_documents(\"what are two movies about dinosaurs\")\n\n    query='dinosaur' filter=None limit=2\n\n\n\n\n\n    [Document(page_content='A bunch of scientists bring back dinosaurs and mayhem breaks loose', metadata={'year': 1993, 'genre': 'science fiction', 'rating': 7.7}),\n     Document(page_content='A bunch of scientists bring back dinosaurs and mayhem breaks loose', metadata={'year': 1993, 'genre': 'science fiction', 'rating': 7.7})]\n\nPrevious\nSupabase\nNext\nVectara"
}