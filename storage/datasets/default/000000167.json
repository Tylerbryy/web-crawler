{
	"title": "Anthropic Functions | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/integrations/chat/anthropic_functions",
	"html": "ComponentsChat modelsAnthropic Functions\nAnthropic Functions\n\nThis notebook shows how to use an experimental wrapper around Anthropic that gives it the same API as OpenAI Functions.\n\nfrom langchain_experimental.llms.anthropic_functions import AnthropicFunctions\n\n    /Users/harrisonchase/.pyenv/versions/3.9.1/envs/langchain/lib/python3.9/site-packages/deeplake/util/check_latest_version.py:32: UserWarning: A newer version of deeplake (3.6.14) is available. It's recommended that you update to the latest version using `pip install -U deeplake`.\n      warnings.warn(\n\nInitialize Model‚Äã\n\nYou can initialize this wrapper the same way you'd initialize ChatAnthropic\n\nmodel = AnthropicFunctions(model=\"claude-2\")\n\nPassing in functions‚Äã\n\nYou can now pass in functions in a similar way\n\nfunctions = [\n    {\n        \"name\": \"get_current_weather\",\n        \"description\": \"Get the current weather in a given location\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"location\": {\n                    \"type\": \"string\",\n                    \"description\": \"The city and state, e.g. San Francisco, CA\",\n                },\n                \"unit\": {\"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\"]},\n            },\n            \"required\": [\"location\"],\n        },\n    }\n]\n\nfrom langchain.schema import HumanMessage\n\nresponse = model.predict_messages(\n    [HumanMessage(content=\"whats the weater in boston?\")], functions=functions\n)\n\nresponse\n\n    AIMessage(content=' ', additional_kwargs={'function_call': {'name': 'get_current_weather', 'arguments': '{\"location\": \"Boston, MA\", \"unit\": \"fahrenheit\"}'}}, example=False)\n\nUsing for extraction‚Äã\n\nYou can now use this for extraction.\n\nfrom langchain.chains import create_extraction_chain\n\nschema = {\n    \"properties\": {\n        \"name\": {\"type\": \"string\"},\n        \"height\": {\"type\": \"integer\"},\n        \"hair_color\": {\"type\": \"string\"},\n    },\n    \"required\": [\"name\", \"height\"],\n}\ninp = \"\"\"\nAlex is 5 feet tall. Claudia is 1 feet taller Alex and jumps higher than him. Claudia is a brunette and Alex is blonde.\n        \"\"\"\n\nchain = create_extraction_chain(schema, model)\n\nchain.run(inp)\n\n    [{'name': 'Alex', 'height': '5', 'hair_color': 'blonde'},\n     {'name': 'Claudia', 'height': '6', 'hair_color': 'brunette'}]\n\nUsing for tagging‚Äã\n\nYou can now use this for tagging\n\nfrom langchain.chains import create_tagging_chain\n\nschema = {\n    \"properties\": {\n        \"sentiment\": {\"type\": \"string\"},\n        \"aggressiveness\": {\"type\": \"integer\"},\n        \"language\": {\"type\": \"string\"},\n    }\n}\n\nchain = create_tagging_chain(schema, model)\n\nchain.run(\"this is really cool\")\n\n    {'sentiment': 'positive', 'aggressiveness': '0', 'language': 'english'}\n\nPrevious\nAnthropic\nNext\nAnyscale"
}