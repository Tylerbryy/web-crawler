{
	"title": "Xata | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/integrations/vectorstores/xata",
	"html": "ComponentsVector storesXata\nXata\n\nXata is a serverless data platform, based on PostgreSQL. It provides a Python SDK for interacting with your database, and a UI for managing your data. Xata has a native vector type, which can be added to any table, and supports similarity search. LangChain inserts vectors directly to Xata, and queries it for the nearest neighbors of a given vector, so that you can use all the LangChain Embeddings integrations with Xata.\n\nThis notebook guides you how to use Xata as a VectorStore.\n\nSetup‚Äã\nCreate a database to use as a vector store‚Äã\n\nIn the Xata UI create a new database. You can name it whatever you want, in this notepad we'll use langchain. Create a table, again you can name it anything, but we will use vectors. Add the following columns via the UI:\n\ncontent of type \"Text\". This is used to store the Document.pageContent values.\nembedding of type \"Vector\". Use the dimension used by the model you plan to use. In this notebook we use OpenAI embeddings, which have 1536 dimensions.\nsearch of type \"Text\". This is used as a metadata column by this example.\nany other columns you want to use as metadata. They are populated from the Document.metadata object. For example, if in the Document.metadata object you have a title property, you can create a title column in the table and it will be populated.\n\nLet's first install our dependencies:\n\npip install xata openai tiktoken langchain\n\n\nLet's load the OpenAI key to the environemnt. If you don't have one you can create an OpenAI account and create a key on this page.\n\nimport getpass\nimport os\n\nos.environ[\"OPENAI_API_KEY\"] = getpass.getpass(\"OpenAI API Key:\")\n\n\nSimilarly, we need to get the environment variables for Xata. You can create a new API key by visiting your account settings. To find the database URL, go to the Settings page of the database that you have created. The database URL should look something like this: https://demo-uni3q8.eu-west-1.xata.sh/db/langchain.\n\napi_key = getpass.getpass(\"Xata API key: \")\ndb_url = input(\"Xata database URL (copy it from your DB settings):\")\n\nfrom langchain.document_loaders import TextLoader\nfrom langchain.embeddings.openai import OpenAIEmbeddings\nfrom langchain.text_splitter import CharacterTextSplitter\nfrom langchain.vectorstores.xata import XataVectorStore\n\nCreate the Xata vector store‚Äã\n\nLet's import our test dataset:\n\nloader = TextLoader(\"../../modules/state_of_the_union.txt\")\ndocuments = loader.load()\ntext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)\ndocs = text_splitter.split_documents(documents)\n\nembeddings = OpenAIEmbeddings()\n\n\nNow create the actual vector store, backed by the Xata table.\n\nvector_store = XataVectorStore.from_documents(\n    docs, embeddings, api_key=api_key, db_url=db_url, table_name=\"vectors\"\n)\n\n\nAfter running the above command, if you go to the Xata UI, you should see the documents loaded together with their embeddings.\n\nSimilarity Search‚Äã\nquery = \"What did the president say about Ketanji Brown Jackson\"\nfound_docs = vector_store.similarity_search(query)\nprint(found_docs)\n\nSimilarity Search with score (vector distance)‚Äã\nquery = \"What did the president say about Ketanji Brown Jackson\"\nresult = vector_store.similarity_search_with_score(query)\nfor doc, score in result:\n    print(f\"document={doc}, score={score}\")\n\nPrevious\nWeaviate\nNext\nZep"
}