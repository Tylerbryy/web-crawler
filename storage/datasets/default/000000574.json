{
	"title": "SageMakerEndpoint | 🦜️🔗 Langchain",
	"url": "https://python.langchain.com/docs/integrations/llms/sagemaker",
	"html": "ComponentsLLMsSageMakerEndpoint\nSageMakerEndpoint\n\nAmazon SageMaker is a system that can build, train, and deploy machine learning (ML) models for any use case with fully managed infrastructure, tools, and workflows.\n\nThis notebooks goes over how to use an LLM hosted on a SageMaker endpoint.\n\npip3 install langchain boto3\n\nSet up​\n\nYou have to set up following required parameters of the SagemakerEndpoint call:\n\nendpoint_name: The name of the endpoint from the deployed Sagemaker model. Must be unique within an AWS Region.\ncredentials_profile_name: The name of the profile in the ~/.aws/credentials or ~/.aws/config files, which has either access keys or role information specified. If not specified, the default credential profile or, if on an EC2 instance, credentials from IMDS will be used. See: https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html\nExample​\nfrom langchain.docstore.document import Document\n\nexample_doc_1 = \"\"\"\nPeter and Elizabeth took a taxi to attend the night party in the city. While in the party, Elizabeth collapsed and was rushed to the hospital.\nSince she was diagnosed with a brain injury, the doctor told Peter to stay besides her until she gets well.\nTherefore, Peter stayed with her at the hospital for 3 days without leaving.\n\"\"\"\n\ndocs = [\n    Document(\n        page_content=example_doc_1,\n    )\n]\n\nExample to initialize with external boto3 session​\nfor cross account scenarios​\nimport json\nfrom typing import Dict\n\nimport boto3\nfrom langchain.chains.question_answering import load_qa_chain\nfrom langchain.llms import SagemakerEndpoint\nfrom langchain.llms.sagemaker_endpoint import LLMContentHandler\nfrom langchain.prompts import PromptTemplate\n\nquery = \"\"\"How long was Elizabeth hospitalized?\n\"\"\"\n\nprompt_template = \"\"\"Use the following pieces of context to answer the question at the end.\n\n{context}\n\nQuestion: {question}\nAnswer:\"\"\"\nPROMPT = PromptTemplate(\n    template=prompt_template, input_variables=[\"context\", \"question\"]\n)\n\nroleARN = \"arn:aws:iam::123456789:role/cross-account-role\"\nsts_client = boto3.client(\"sts\")\nresponse = sts_client.assume_role(\n    RoleArn=roleARN, RoleSessionName=\"CrossAccountSession\"\n)\n\nclient = boto3.client(\n    \"sagemaker-runtime\",\n    region_name=\"us-west-2\",\n    aws_access_key_id=response[\"Credentials\"][\"AccessKeyId\"],\n    aws_secret_access_key=response[\"Credentials\"][\"SecretAccessKey\"],\n    aws_session_token=response[\"Credentials\"][\"SessionToken\"],\n)\n\n\nclass ContentHandler(LLMContentHandler):\n    content_type = \"application/json\"\n    accepts = \"application/json\"\n\n    def transform_input(self, prompt: str, model_kwargs: Dict) -> bytes:\n        input_str = json.dumps({prompt: prompt, **model_kwargs})\n        return input_str.encode(\"utf-8\")\n\n    def transform_output(self, output: bytes) -> str:\n        response_json = json.loads(output.read().decode(\"utf-8\"))\n        return response_json[0][\"generated_text\"]\n\n\ncontent_handler = ContentHandler()\n\nchain = load_qa_chain(\n    llm=SagemakerEndpoint(\n        endpoint_name=\"endpoint-name\",\n        client=client,\n        model_kwargs={\"temperature\": 1e-10},\n        content_handler=content_handler,\n    ),\n    prompt=PROMPT,\n)\n\nchain({\"input_documents\": docs, \"question\": query}, return_only_outputs=True)\n\nimport json\nfrom typing import Dict\n\nfrom langchain.chains.question_answering import load_qa_chain\nfrom langchain.llms import SagemakerEndpoint\nfrom langchain.llms.sagemaker_endpoint import LLMContentHandler\nfrom langchain.prompts import PromptTemplate\n\nquery = \"\"\"How long was Elizabeth hospitalized?\n\"\"\"\n\nprompt_template = \"\"\"Use the following pieces of context to answer the question at the end.\n\n{context}\n\nQuestion: {question}\nAnswer:\"\"\"\nPROMPT = PromptTemplate(\n    template=prompt_template, input_variables=[\"context\", \"question\"]\n)\n\n\nclass ContentHandler(LLMContentHandler):\n    content_type = \"application/json\"\n    accepts = \"application/json\"\n\n    def transform_input(self, prompt: str, model_kwargs: Dict) -> bytes:\n        input_str = json.dumps({prompt: prompt, **model_kwargs})\n        return input_str.encode(\"utf-8\")\n\n    def transform_output(self, output: bytes) -> str:\n        response_json = json.loads(output.read().decode(\"utf-8\"))\n        return response_json[0][\"generated_text\"]\n\n\ncontent_handler = ContentHandler()\n\nchain = load_qa_chain(\n    llm=SagemakerEndpoint(\n        endpoint_name=\"endpoint-name\",\n        credentials_profile_name=\"credentials-profile-name\",\n        region_name=\"us-west-2\",\n        model_kwargs={\"temperature\": 1e-10},\n        content_handler=content_handler,\n    ),\n    prompt=PROMPT,\n)\n\nchain({\"input_documents\": docs, \"question\": query}, return_only_outputs=True)\n\nPrevious\nRunhouse\nNext\nStochasticAI"
}