{
	"title": "Custom Trajectory Evaluator | 🦜️🔗 Langchain",
	"url": "https://python.langchain.com/docs/guides/evaluation/trajectory/custom",
	"html": "EvaluationTrajectory EvaluatorsCustom Trajectory Evaluator\nCustom Trajectory Evaluator\n\nYou can make your own custom trajectory evaluators by inheriting from the AgentTrajectoryEvaluator class and overwriting the _evaluate_agent_trajectory (and _aevaluate_agent_action) method.\n\nIn this example, you will make a simple trajectory evaluator that uses an LLM to determine if any actions were unnecessary.\n\nfrom typing import Any, Optional, Sequence, Tuple\n\nfrom langchain.chains import LLMChain\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.evaluation import AgentTrajectoryEvaluator\nfrom langchain.schema import AgentAction\n\n\nclass StepNecessityEvaluator(AgentTrajectoryEvaluator):\n    \"\"\"Evaluate the perplexity of a predicted string.\"\"\"\n\n    def __init__(self) -> None:\n        llm = ChatOpenAI(model=\"gpt-4\", temperature=0.0)\n        template = \"\"\"Are any of the following steps unnecessary in answering {input}? Provide the verdict on a new line as a single \"Y\" for yes or \"N\" for no.\n\n        DATA\n        ------\n        Steps: {trajectory}\n        ------\n\n        Verdict:\"\"\"\n        self.chain = LLMChain.from_string(llm, template)\n\n    def _evaluate_agent_trajectory(\n        self,\n        *,\n        prediction: str,\n        input: str,\n        agent_trajectory: Sequence[Tuple[AgentAction, str]],\n        reference: Optional[str] = None,\n        **kwargs: Any,\n    ) -> dict:\n        vals = [\n            f\"{i}: Action=[{action.tool}] returned observation = [{observation}]\"\n            for i, (action, observation) in enumerate(agent_trajectory)\n        ]\n        trajectory = \"\\n\".join(vals)\n        response = self.chain.run(dict(trajectory=trajectory, input=input), **kwargs)\n        decision = response.split(\"\\n\")[-1].strip()\n        score = 1 if decision == \"Y\" else 0\n        return {\"score\": score, \"value\": decision, \"reasoning\": response}\n\n\nThe example above will return a score of 1 if the language model predicts that any of the actions were unnecessary, and it returns a score of 0 if all of them were predicted to be necessary. It returns the string 'decision' as the 'value', and includes the rest of the generated text as 'reasoning' to let you audit the decision.\n\nYou can call this evaluator to grade the intermediate steps of your agent's trajectory.\n\nevaluator = StepNecessityEvaluator()\n\nevaluator.evaluate_agent_trajectory(\n    prediction=\"The answer is pi\",\n    input=\"What is today?\",\n    agent_trajectory=[\n        (\n            AgentAction(tool=\"ask\", tool_input=\"What is today?\", log=\"\"),\n            \"tomorrow's yesterday\",\n        ),\n        (\n            AgentAction(tool=\"check_tv\", tool_input=\"Watch tv for half hour\", log=\"\"),\n            \"bzzz\",\n        ),\n    ],\n)\n\n    {'score': 1, 'value': 'Y', 'reasoning': 'Y'}\n\nPrevious\nTrajectory Evaluators\nNext\nAgent Trajectory"
}