{
	"title": "Select by similarity | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/modules/model_io/prompts/example_selectors/similarity",
	"html": "ModulesModel I/OPromptsExample selectorsSelect by similarity\nSelect by similarity\n\nThis object selects examples based on similarity to the inputs. It does this by finding the examples with the embeddings that have the greatest cosine similarity with the inputs.\n\nfrom langchain.prompts.example_selector import SemanticSimilarityExampleSelector\nfrom langchain.vectorstores import Chroma\nfrom langchain.embeddings import OpenAIEmbeddings\nfrom langchain.prompts import FewShotPromptTemplate, PromptTemplate\n\nexample_prompt = PromptTemplate(\n    input_variables=[\"input\", \"output\"],\n    template=\"Input: {input}\\nOutput: {output}\",\n)\n\n# Examples of a pretend task of creating antonyms.\nexamples = [\n    {\"input\": \"happy\", \"output\": \"sad\"},\n    {\"input\": \"tall\", \"output\": \"short\"},\n    {\"input\": \"energetic\", \"output\": \"lethargic\"},\n    {\"input\": \"sunny\", \"output\": \"gloomy\"},\n    {\"input\": \"windy\", \"output\": \"calm\"},\n]\n\nexample_selector = SemanticSimilarityExampleSelector.from_examples(\n    # The list of examples available to select from.\n    examples,\n    # The embedding class used to produce embeddings which are used to measure semantic similarity.\n    OpenAIEmbeddings(),\n    # The VectorStore class that is used to store the embeddings and do a similarity search over.\n    Chroma,\n    # The number of examples to produce.\n    k=1\n)\nsimilar_prompt = FewShotPromptTemplate(\n    # We provide an ExampleSelector instead of examples.\n    example_selector=example_selector,\n    example_prompt=example_prompt,\n    prefix=\"Give the antonym of every input\",\n    suffix=\"Input: {adjective}\\nOutput:\",\n    input_variables=[\"adjective\"],\n)\n\n    Running Chroma using direct local API.\n    Using DuckDB in-memory for database. Data will be transient.\n\n# Input is a feeling, so should select the happy/sad example\nprint(similar_prompt.format(adjective=\"worried\"))\n\n    Give the antonym of every input\n\n    Input: happy\n    Output: sad\n\n    Input: worried\n    Output:\n\n# Input is a measurement, so should select the tall/short example\nprint(similar_prompt.format(adjective=\"large\"))\n\n    Give the antonym of every input\n\n    Input: tall\n    Output: short\n\n    Input: large\n    Output:\n\n# You can add new examples to the SemanticSimilarityExampleSelector as well\nsimilar_prompt.example_selector.add_example({\"input\": \"enthusiastic\", \"output\": \"apathetic\"})\nprint(similar_prompt.format(adjective=\"passionate\"))\n\n    Give the antonym of every input\n\n    Input: enthusiastic\n    Output: apathetic\n\n    Input: passionate\n    Output:\n\nPrevious\nSelect by n-gram overlap\nNext\nChat models"
}