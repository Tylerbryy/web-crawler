{
	"title": "LLMonitor | 🦜️🔗 Langchain",
	"url": "https://python.langchain.com/docs/integrations/callbacks/llmonitor",
	"html": "ComponentsCallbacksLLMonitor\nLLMonitor\n\nLLMonitor is an open-source observability platform that provides cost and usage analytics, user tracking, tracing and evaluation tools.\n\nSetup​\n\nCreate an account on llmonitor.com, then copy your new app's tracking id.\n\nOnce you have it, set it as an environment variable by running:\n\nexport LLMONITOR_APP_ID=\"...\"\n\n\nIf you'd prefer not to set an environment variable, you can pass the key directly when initializing the callback handler:\n\nfrom langchain.callbacks import LLMonitorCallbackHandler\n\nhandler = LLMonitorCallbackHandler(app_id=\"...\")\n\nUsage with LLM/Chat models​\nfrom langchain.llms import OpenAI\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.callbacks import LLMonitorCallbackHandler\n\nhandler = LLMonitorCallbackHandler()\n\nllm = OpenAI(\n    callbacks=[handler],\n)\n\nchat = ChatOpenAI(callbacks=[handler])\n\nllm(\"Tell me a joke\")\n\n\nUsage with chains and agents​\n\nMake sure to pass the callback handler to the run method so that all related chains and llm calls are correctly tracked.\n\nIt is also recommended to pass agent_name in the metadata to be able to distinguish between agents in the dashboard.\n\nExample:\n\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.schema import SystemMessage, HumanMessage\nfrom langchain.agents import OpenAIFunctionsAgent, AgentExecutor, tool\nfrom langchain.callbacks import LLMonitorCallbackHandler\n\nllm = ChatOpenAI(temperature=0)\n\nhandler = LLMonitorCallbackHandler()\n\n@tool\ndef get_word_length(word: str) -> int:\n    \"\"\"Returns the length of a word.\"\"\"\n    return len(word)\n\ntools = [get_word_length]\n\nprompt = OpenAIFunctionsAgent.create_prompt(\n    system_message=SystemMessage(\n        content=\"You are very powerful assistant, but bad at calculating lengths of words.\"\n    )\n)\n\nagent = OpenAIFunctionsAgent(llm=llm, tools=tools, prompt=prompt, verbose=True)\nagent_executor = AgentExecutor(\n    agent=agent, tools=tools, verbose=True, metadata={\"agent_name\": \"WordCount\"}  # <- recommended, assign a custom name\n)\nagent_executor.run(\"how many letters in the word educa?\", callbacks=[handler])\n\n\nAnother example:\n\nfrom langchain.agents import load_tools, initialize_agent, AgentType\nfrom langchain.llms import OpenAI\nfrom langchain.callbacks import LLMonitorCallbackHandler\n\nhandler = LLMonitorCallbackHandler()\n\nllm = OpenAI(temperature=0)\ntools = load_tools([\"serpapi\", \"llm-math\"], llm=llm)\nagent = initialize_agent(tools, llm, agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION, metadata={ \"agent_name\": \"GirlfriendAgeFinder\" })  # <- recommended, assign a custom name\n\nagent.run(\n    \"Who is Leo DiCaprio's girlfriend? What is her current age raised to the 0.43 power?\",\n    callbacks=[handler],\n)\n\nUser Tracking​\n\nUser tracking allows you to identify your users, track their cost, conversations and more.\n\nfrom langchain.callbacks.llmonitor_callback import LLMonitorCallbackHandler, identify\n\nwith identify(\"user-123\"):\n    llm(\"Tell me a joke\")\n\nwith identify(\"user-456\", user_props={\"email\": \"user456@test.com\"}):\n    agen.run(\"Who is Leo DiCaprio's girlfriend?\")\n\nSupport​\n\nFor any question or issue with integration you can reach out to the LLMonitor team on Discord or via email.\n\nPrevious\nLabel Studio\nNext\nPromptLayer"
}