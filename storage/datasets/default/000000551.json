{
	"title": "Javelin AI Gateway Tutorial | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/integrations/llms/javelin",
	"html": "ComponentsLLMsJavelin AI Gateway Tutorial\nJavelin AI Gateway Tutorial\n\nThis Jupyter Notebook will explore how to interact with the Javelin AI Gateway using the Python SDK. The Javelin AI Gateway facilitates the utilization of large language models (LLMs) like OpenAI, Cohere, Anthropic, and others by providing a secure and unified endpoint. The gateway itself provides a centralized mechanism to roll out models systematically, provide access security, policy & cost guardrails for enterprises, etc.,\n\nFor a complete listing of all the features & benefits of Javelin, please visit www.getjavelin.io\n\nStep 1: Introduction‚Äã\n\nThe Javelin AI Gateway is an enterprise-grade API Gateway for AI applications. It integrates robust access security, ensuring secure interactions with large language models. Learn more in the official documentation.\n\nStep 2: Installation‚Äã\n\nBefore we begin, we must install the javelin_sdk and set up the Javelin API key as an environment variable.\n\npip install 'javelin_sdk'\n\n    Requirement already satisfied: javelin_sdk in /usr/local/Caskroom/miniconda/base/lib/python3.11/site-packages (0.1.8)\n    Requirement already satisfied: httpx<0.25.0,>=0.24.0 in /usr/local/Caskroom/miniconda/base/lib/python3.11/site-packages (from javelin_sdk) (0.24.1)\n    Requirement already satisfied: pydantic<2.0.0,>=1.10.7 in /usr/local/Caskroom/miniconda/base/lib/python3.11/site-packages (from javelin_sdk) (1.10.12)\n    Requirement already satisfied: certifi in /usr/local/Caskroom/miniconda/base/lib/python3.11/site-packages (from httpx<0.25.0,>=0.24.0->javelin_sdk) (2023.5.7)\n    Requirement already satisfied: httpcore<0.18.0,>=0.15.0 in /usr/local/Caskroom/miniconda/base/lib/python3.11/site-packages (from httpx<0.25.0,>=0.24.0->javelin_sdk) (0.17.3)\n    Requirement already satisfied: idna in /usr/local/Caskroom/miniconda/base/lib/python3.11/site-packages (from httpx<0.25.0,>=0.24.0->javelin_sdk) (3.4)\n    Requirement already satisfied: sniffio in /usr/local/Caskroom/miniconda/base/lib/python3.11/site-packages (from httpx<0.25.0,>=0.24.0->javelin_sdk) (1.3.0)\n    Requirement already satisfied: typing-extensions>=4.2.0 in /usr/local/Caskroom/miniconda/base/lib/python3.11/site-packages (from pydantic<2.0.0,>=1.10.7->javelin_sdk) (4.7.1)\n    Requirement already satisfied: h11<0.15,>=0.13 in /usr/local/Caskroom/miniconda/base/lib/python3.11/site-packages (from httpcore<0.18.0,>=0.15.0->httpx<0.25.0,>=0.24.0->javelin_sdk) (0.14.0)\n    Requirement already satisfied: anyio<5.0,>=3.0 in /usr/local/Caskroom/miniconda/base/lib/python3.11/site-packages (from httpcore<0.18.0,>=0.15.0->httpx<0.25.0,>=0.24.0->javelin_sdk) (3.7.1)\n    Note: you may need to restart the kernel to use updated packages.\n\nStep 3: Completions Example‚Äã\n\nThis section will demonstrate how to interact with the Javelin AI Gateway to get completions from a large language model. Here is a Python script that demonstrates this: (note) assumes that you have setup a route in the gateway called 'eng_dept03'\n\nfrom langchain.chains import LLMChain\nfrom langchain.llms import JavelinAIGateway\nfrom langchain.prompts import PromptTemplate\n\nroute_completions = \"eng_dept03\"\n\ngateway = JavelinAIGateway(\n    gateway_uri=\"http://localhost:8000\",  # replace with service URL or host/port of Javelin\n    route=route_completions,\n    model_name=\"text-davinci-003\",\n)\n\nprompt = PromptTemplate(\"Translate the following English text to French: {text}\")\n\nllmchain = LLMChain(llm=gateway, prompt=prompt)\nresult = llmchain.run(\"podcast player\")\n\nprint(result)\n\n    ---------------------------------------------------------------------------\n\n    ImportError                               Traceback (most recent call last)\n\n    Cell In[6], line 2\n          1 from langchain.chains import LLMChain\n    ----> 2 from langchain.llms import JavelinAIGateway\n          3 from langchain.prompts import PromptTemplate\n          5 route_completions = \"eng_dept03\"\n\n\n    ImportError: cannot import name 'JavelinAIGateway' from 'langchain.llms' (/usr/local/Caskroom/miniconda/base/lib/python3.11/site-packages/langchain/llms/__init__.py)\n\nStep 4: Embeddings Example\n\nThis section demonstrates how to use the Javelin AI Gateway to obtain embeddings for text queries and documents. Here is a Python script that illustrates this: (note) assumes that you have setup a route in the gateway called 'embeddings'\n\nfrom langchain.embeddings import JavelinAIGatewayEmbeddings\n\nembeddings = JavelinAIGatewayEmbeddings(\n    gateway_uri=\"http://localhost:8000\",  # replace with service URL or host/port of Javelin\n    route=\"embeddings\",\n)\n\nprint(embeddings.embed_query(\"hello\"))\nprint(embeddings.embed_documents([\"hello\"]))\n\n    ---------------------------------------------------------------------------\n\n    ImportError                               Traceback (most recent call last)\n\n    Cell In[9], line 1\n    ----> 1 from langchain.embeddings import JavelinAIGatewayEmbeddings\n          2 from langchain.embeddings.openai import OpenAIEmbeddings\n          4 embeddings = JavelinAIGatewayEmbeddings(\n          5     gateway_uri=\"http://localhost:8000\", # replace with service URL or host/port of Javelin\n          6     route=\"embeddings\",\n          7 )\n\n\n    ImportError: cannot import name 'JavelinAIGatewayEmbeddings' from 'langchain.embeddings' (/usr/local/Caskroom/miniconda/base/lib/python3.11/site-packages/langchain/embeddings/__init__.py)\n\nStep 5: Chat Example\n\nThis section illustrates how to interact with the Javelin AI Gateway to facilitate a chat with a large language model. Here is a Python script that demonstrates this: (note) assumes that you have setup a route in the gateway called 'mychatbot_route'\n\nfrom langchain.chat_models import ChatJavelinAIGateway\nfrom langchain.schema import HumanMessage, SystemMessage\n\nmessages = [\n    SystemMessage(\n        content=\"You are a helpful assistant that translates English to French.\"\n    ),\n    HumanMessage(\n        content=\"Artificial Intelligence has the power to transform humanity and make the world a better place\"\n    ),\n]\n\nchat = ChatJavelinAIGateway(\n    gateway_uri=\"http://localhost:8000\",  # replace with service URL or host/port of Javelin\n    route=\"mychatbot_route\",\n    model_name=\"gpt-3.5-turbo\",\n    params={\"temperature\": 0.1},\n)\n\nprint(chat(messages))\n\n    ---------------------------------------------------------------------------\n\n    ImportError                               Traceback (most recent call last)\n\n    Cell In[8], line 1\n    ----> 1 from langchain.chat_models import ChatJavelinAIGateway\n          2 from langchain.schema import HumanMessage, SystemMessage\n          4 messages = [\n          5     SystemMessage(\n          6         content=\"You are a helpful assistant that translates English to French.\"\n       (...)\n         10     ),\n         11 ]\n\n\n    ImportError: cannot import name 'ChatJavelinAIGateway' from 'langchain.chat_models' (/usr/local/Caskroom/miniconda/base/lib/python3.11/site-packages/langchain/chat_models/__init__.py)\n\n\nStep 6: Conclusion This tutorial introduced the Javelin AI Gateway and demonstrated how to interact with it using the Python SDK. Remember to check the Javelin Python SDK for more examples and to explore the official documentation for additional details.\n\nHappy coding!\n\nPrevious\nHuggingface TextGen Inference\nNext\nJSONFormer"
}