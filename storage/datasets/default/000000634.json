{
	"title": "Banana | 🦜️🔗 Langchain",
	"url": "https://python.langchain.com/docs/integrations/providers/bananadev",
	"html": "ProvidersMoreBanana\nBanana\n\nBanana provided serverless GPU inference for AI models, including a CI/CD build pipeline and a simple Python framework (Potassium) to server your models.\n\nThis page covers how to use the Banana ecosystem within LangChain.\n\nIt is broken into two parts:\n\ninstallation and setup,\nand then references to specific Banana wrappers.\nInstallation and Setup​\nInstall with pip install banana-dev\nGet an Banana api key from the Banana.dev dashboard and set it as an environment variable (BANANA_API_KEY)\nGet your model's key and url slug from the model's details page\nDefine your Banana Template​\n\nYou'll need to set up a Github repo for your Banana app. You can get started in 5 minutes using this guide.\n\nAlternatively, for a ready-to-go LLM example, you can check out Banana's CodeLlama-7B-Instruct-GPTQ GitHub repository. Just fork it and deploy it within Banana.\n\nOther starter repos are available here.\n\nBuild the Banana app​\n\nTo use Banana apps within Langchain, they must include the outputs key in the returned json, and the value must be a string.\n\n# Return the results as a dictionary\nresult = {'outputs': result}\n\n\nAn example inference function would be:\n\n@app.handler(\"/\")\ndef handler(context: dict, request: Request) -> Response:\n    \"\"\"Handle a request to generate code from a prompt.\"\"\"\n    model = context.get(\"model\")\n    tokenizer = context.get(\"tokenizer\")\n    max_new_tokens = request.json.get(\"max_new_tokens\", 512)\n    temperature = request.json.get(\"temperature\", 0.7)\n    prompt = request.json.get(\"prompt\")\n    prompt_template=f'''[INST] Write code to solve the following coding problem that obeys the constraints and passes the example test cases. Please wrap your code answer using ```:\n    {prompt}\n    [/INST]\n    '''\n    input_ids = tokenizer(prompt_template, return_tensors='pt').input_ids.cuda()\n    output = model.generate(inputs=input_ids, temperature=temperature, max_new_tokens=max_new_tokens)\n    result = tokenizer.decode(output[0])\n    return Response(json={\"outputs\": result}, status=200)\n\n\nThis example is from the app.py file in CodeLlama-7B-Instruct-GPTQ.\n\nWrappers​\nLLM​\n\nWithin Langchain, there exists a Banana LLM wrapper, which you can access with\n\nfrom langchain.llms import Banana\n\n\nYou need to provide a model key and model url slug, which you can get from the model's details page in the Banana.dev dashboard.\n\nllm = Banana(model_key=\"YOUR_MODEL_KEY\", model_url_slug=\"YOUR_MODEL_URL_SLUG\")\n\nPrevious\nBagelDB\nNext\nBaseten"
}