{
	"title": "OpenAI Adapter | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/guides/adapters/openai",
	"html": "AdaptersOpenAI Adapter\nOpenAI Adapter\n\nA lot of people get started with OpenAI but want to explore other models. LangChain's integrations with many model providers make this easy to do so. While LangChain has it's own message and model APIs, we've also made it as easy as possible to explore other models by exposing an adapter to adapt LangChain models to the OpenAI api.\n\nAt the moment this only deals with output and does not return other information (token counts, stop reasons, etc).\n\nimport openai\nfrom langchain.adapters import openai as lc_openai\n\nChatCompletion.create‚Äã\nmessages = [{\"role\": \"user\", \"content\": \"hi\"}]\n\n\nOriginal OpenAI call\n\nresult = openai.ChatCompletion.create(\n    messages=messages, model=\"gpt-3.5-turbo\", temperature=0\n)\n\nresult[\"choices\"][0][\"message\"].to_dict_recursive()\n\n    {'role': 'assistant', 'content': 'Hello! How can I assist you today?'}\n\n\nLangChain OpenAI wrapper call\n\nlc_result = lc_openai.ChatCompletion.create(\n    messages=messages, model=\"gpt-3.5-turbo\", temperature=0\n)\n\nlc_result[\"choices\"][0][\"message\"]\n\n    {'role': 'assistant', 'content': 'Hello! How can I assist you today?'}\n\n\nSwapping out model providers\n\nlc_result = lc_openai.ChatCompletion.create(\n    messages=messages, model=\"claude-2\", temperature=0, provider=\"ChatAnthropic\"\n)\n\nlc_result[\"choices\"][0][\"message\"]\n\n    {'role': 'assistant', 'content': ' Hello!'}\n\nChatCompletion.stream‚Äã\n\nOriginal OpenAI call\n\nfor c in openai.ChatCompletion.create(\n    messages=messages, model=\"gpt-3.5-turbo\", temperature=0, stream=True\n):\n    print(c[\"choices\"][0][\"delta\"].to_dict_recursive())\n\n    {'role': 'assistant', 'content': ''}\n    {'content': 'Hello'}\n    {'content': '!'}\n    {'content': ' How'}\n    {'content': ' can'}\n    {'content': ' I'}\n    {'content': ' assist'}\n    {'content': ' you'}\n    {'content': ' today'}\n    {'content': '?'}\n    {}\n\n\nLangChain OpenAI wrapper call\n\nfor c in lc_openai.ChatCompletion.create(\n    messages=messages, model=\"gpt-3.5-turbo\", temperature=0, stream=True\n):\n    print(c[\"choices\"][0][\"delta\"])\n\n    {'role': 'assistant', 'content': ''}\n    {'content': 'Hello'}\n    {'content': '!'}\n    {'content': ' How'}\n    {'content': ' can'}\n    {'content': ' I'}\n    {'content': ' assist'}\n    {'content': ' you'}\n    {'content': ' today'}\n    {'content': '?'}\n    {}\n\n\nSwapping out model providers\n\nfor c in lc_openai.ChatCompletion.create(\n    messages=messages,\n    model=\"claude-2\",\n    temperature=0,\n    stream=True,\n    provider=\"ChatAnthropic\",\n):\n    print(c[\"choices\"][0][\"delta\"])\n\n    {'role': 'assistant', 'content': ' Hello'}\n    {'content': '!'}\n    {}\n\nNext\nDebugging"
}