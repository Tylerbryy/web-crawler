{
	"title": "StarRocks | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/integrations/vectorstores/starrocks",
	"html": "ComponentsVector storesStarRocks\nStarRocks\n\nStarRocks is a High-Performance Analytical Database. StarRocks is a next-gen sub-second MPP database for full analytics scenarios, including multi-dimensional analytics, real-time analytics and ad-hoc query.\n\nUsually StarRocks is categorized into OLAP, and it has showed excellent performance in ClickBench ‚Äî a Benchmark For Analytical DBMS. Since it has a super-fast vectorized execution engine, it could also be used as a fast vectordb.\n\nHere we'll show how to use the StarRocks Vector Store.\n\nSetup‚Äã\n#!pip install pymysql\n\n\nSet update_vectordb = False at the beginning. If there is no docs updated, then we don't need to rebuild the embeddings of docs\n\nfrom langchain.chains import RetrievalQA\nfrom langchain.document_loaders import DirectoryLoader, UnstructuredMarkdownLoader\nfrom langchain.embeddings.openai import OpenAIEmbeddings\nfrom langchain.llms import OpenAI\nfrom langchain.text_splitter import TokenTextSplitter\nfrom langchain.vectorstores import StarRocks\nfrom langchain.vectorstores.starrocks import StarRocksSettings\n\nupdate_vectordb = False\n\n    /Users/dirlt/utils/py3env/lib/python3.9/site-packages/requests/__init__.py:102: RequestsDependencyWarning: urllib3 (1.26.7) or chardet (5.1.0)/charset_normalizer (2.0.9) doesn't match a supported version!\n      warnings.warn(\"urllib3 ({}) or chardet ({})/charset_normalizer ({}) doesn't match a supported \"\n\nLoad docs and split them into tokens‚Äã\n\nLoad all markdown files under the docs directory\n\nfor starrocks documents, you can clone repo from https://github.com/StarRocks/starrocks, and there is docs directory in it.\n\nloader = DirectoryLoader(\n    \"./docs\", glob=\"**/*.md\", loader_cls=UnstructuredMarkdownLoader\n)\ndocuments = loader.load()\n\n\nSplit docs into tokens, and set update_vectordb = True because there are new docs/tokens.\n\n# load text splitter and split docs into snippets of text\ntext_splitter = TokenTextSplitter(chunk_size=400, chunk_overlap=50)\nsplit_docs = text_splitter.split_documents(documents)\n\n# tell vectordb to update text embeddings\nupdate_vectordb = True\n\nsplit_docs[-20]\n\n    Document(page_content='Compile StarRocks with Docker\\n\\nThis topic describes how to compile StarRocks using Docker.\\n\\nOverview\\n\\nStarRocks provides development environment images for both Ubuntu 22.04 and CentOS 7.9. With the image, you can launch a Docker container and compile StarRocks in the container.\\n\\nStarRocks version and DEV ENV image\\n\\nDifferent branches of StarRocks correspond to different development environment images provided on StarRocks Docker Hub.\\n\\nFor Ubuntu 22.04:\\n\\n| Branch name | Image name              |\\n  | --------------- | ----------------------------------- |\\n  | main            | starrocks/dev-env-ubuntu:latest     |\\n  | branch-3.0      | starrocks/dev-env-ubuntu:3.0-latest |\\n  | branch-2.5      | starrocks/dev-env-ubuntu:2.5-latest |\\n\\nFor CentOS 7.9:\\n\\n| Branch name | Image name                       |\\n  | --------------- | ------------------------------------ |\\n  | main            | starrocks/dev-env-centos7:latest     |\\n  | branch-3.0      | starrocks/dev-env-centos7:3.0-latest |\\n  | branch-2.5      | starrocks/dev-env-centos7:2.5-latest |\\n\\nPrerequisites\\n\\nBefore compiling StarRocks, make sure the following requirements are satisfied:\\n\\nHardware\\n\\n', metadata={'source': 'docs/developers/build-starrocks/Build_in_docker.md'})\n\nprint(\"# docs  = %d, # splits = %d\" % (len(documents), len(split_docs)))\n\n    # docs  = 657, # splits = 2802\n\nCreate vectordb instance‚Äã\nUse StarRocks as vectordb‚Äã\ndef gen_starrocks(update_vectordb, embeddings, settings):\n    if update_vectordb:\n        docsearch = StarRocks.from_documents(split_docs, embeddings, config=settings)\n    else:\n        docsearch = StarRocks(embeddings, settings)\n    return docsearch\n\nConvert tokens into embeddings and put them into vectordb‚Äã\n\nHere we use StarRocks as vectordb, you can configure StarRocks instance via StarRocksSettings.\n\nConfiguring StarRocks instance is pretty much like configuring mysql instance. You need to specify:\n\nhost/port\nusername(default: 'root')\npassword(default: '')\ndatabase(default: 'default')\ntable(default: 'langchain')\nembeddings = OpenAIEmbeddings()\n\n# configure starrocks settings(host/port/user/pw/db)\nsettings = StarRocksSettings()\nsettings.port = 41003\nsettings.host = \"127.0.0.1\"\nsettings.username = \"root\"\nsettings.password = \"\"\nsettings.database = \"zya\"\ndocsearch = gen_starrocks(update_vectordb, embeddings, settings)\n\nprint(docsearch)\n\nupdate_vectordb = False\n\n    Inserting data...: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 2802/2802 [02:26<00:00, 19.11it/s]\n\n\n    zya.langchain @ 127.0.0.1:41003\n    \n    username: root\n    \n    Table Schema:\n    ----------------------------------------------------------------------------\n    |name                    |type                    |key                     |\n    ----------------------------------------------------------------------------\n    |id                      |varchar(65533)          |true                    |\n    |document                |varchar(65533)          |false                   |\n    |embedding               |array<float>            |false                   |\n    |metadata                |varchar(65533)          |false                   |\n    ----------------------------------------------------------------------------\n    \n\nBuild QA and ask question to it‚Äã\nllm = OpenAI()\nqa = RetrievalQA.from_chain_type(\n    llm=llm, chain_type=\"stuff\", retriever=docsearch.as_retriever()\n)\nquery = \"is profile enabled by default? if not, how to enable profile?\"\nresp = qa.run(query)\nprint(resp)\n\n     No, profile is not enabled by default. To enable profile, set the variable `enable_profile` to `true` using the command `set enable_profile = true;`\n\nPrevious\nSQLite-VSS\nNext\nSupabase (Postgres)"
}