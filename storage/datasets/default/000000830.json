{
	"title": "Handle parsing errors | 🦜️🔗 Langchain",
	"url": "https://python.langchain.com/docs/modules/agents/how_to/handle_parsing_errors",
	"html": "ModulesAgentsHow-toHandle parsing errors\nHandle parsing errors\n\nOccasionally the LLM cannot determine what step to take because its outputs are not correctly formatted to be handled by the output parser. In this case, by default the agent errors. But you can easily control this functionality with handle_parsing_errors! Let's explore how.\n\nSetup​\nfrom langchain.agents import AgentType, Tool, initialize_agent\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.utilities import SerpAPIWrapper\n\nsearch = SerpAPIWrapper()\ntools = [\n    Tool(\n        name=\"Search\",\n        func=search.run,\n        description=\"useful for when you need to answer questions about current events. You should ask targeted questions\",\n    ),\n]\n\nError​\n\nIn this scenario, the agent will error (because it fails to output an Action string)\n\nmrkl = initialize_agent(\n    tools,\n    ChatOpenAI(temperature=0),\n    agent=AgentType.CHAT_ZERO_SHOT_REACT_DESCRIPTION,\n    verbose=True,\n)\n\nmrkl.run(\"Who is Leo DiCaprio's girlfriend? No need to add Action\")\n\n    \n    \n    > Entering new AgentExecutor chain...\n\n\n\n    ---------------------------------------------------------------------------\n\n    IndexError                                Traceback (most recent call last)\n\n    File ~/workplace/langchain/langchain/agents/chat/output_parser.py:21, in ChatOutputParser.parse(self, text)\n         20 try:\n    ---> 21     action = text.split(\"```\")[1]\n         22     response = json.loads(action.strip())\n\n\n    IndexError: list index out of range\n\n    \n    During handling of the above exception, another exception occurred:\n\n\n    OutputParserException                     Traceback (most recent call last)\n\n    Cell In[4], line 1\n    ----> 1 mrkl.run(\"Who is Leo DiCaprio's girlfriend? No need to add Action\")\n\n\n    File ~/workplace/langchain/langchain/chains/base.py:236, in Chain.run(self, callbacks, *args, **kwargs)\n        234     if len(args) != 1:\n        235         raise ValueError(\"`run` supports only one positional argument.\")\n    --> 236     return self(args[0], callbacks=callbacks)[self.output_keys[0]]\n        238 if kwargs and not args:\n        239     return self(kwargs, callbacks=callbacks)[self.output_keys[0]]\n\n\n    File ~/workplace/langchain/langchain/chains/base.py:140, in Chain.__call__(self, inputs, return_only_outputs, callbacks)\n        138 except (KeyboardInterrupt, Exception) as e:\n        139     run_manager.on_chain_error(e)\n    --> 140     raise e\n        141 run_manager.on_chain_end(outputs)\n        142 return self.prep_outputs(inputs, outputs, return_only_outputs)\n\n\n    File ~/workplace/langchain/langchain/chains/base.py:134, in Chain.__call__(self, inputs, return_only_outputs, callbacks)\n        128 run_manager = callback_manager.on_chain_start(\n        129     {\"name\": self.__class__.__name__},\n        130     inputs,\n        131 )\n        132 try:\n        133     outputs = (\n    --> 134         self._call(inputs, run_manager=run_manager)\n        135         if new_arg_supported\n        136         else self._call(inputs)\n        137     )\n        138 except (KeyboardInterrupt, Exception) as e:\n        139     run_manager.on_chain_error(e)\n\n\n    File ~/workplace/langchain/langchain/agents/agent.py:947, in AgentExecutor._call(self, inputs, run_manager)\n        945 # We now enter the agent loop (until it returns something).\n        946 while self._should_continue(iterations, time_elapsed):\n    --> 947     next_step_output = self._take_next_step(\n        948         name_to_tool_map,\n        949         color_mapping,\n        950         inputs,\n        951         intermediate_steps,\n        952         run_manager=run_manager,\n        953     )\n        954     if isinstance(next_step_output, AgentFinish):\n        955         return self._return(\n        956             next_step_output, intermediate_steps, run_manager=run_manager\n        957         )\n\n\n    File ~/workplace/langchain/langchain/agents/agent.py:773, in AgentExecutor._take_next_step(self, name_to_tool_map, color_mapping, inputs, intermediate_steps, run_manager)\n        771     raise_error = False\n        772 if raise_error:\n    --> 773     raise e\n        774 text = str(e)\n        775 if isinstance(self.handle_parsing_errors, bool):\n\n\n    File ~/workplace/langchain/langchain/agents/agent.py:762, in AgentExecutor._take_next_step(self, name_to_tool_map, color_mapping, inputs, intermediate_steps, run_manager)\n        756 \"\"\"Take a single step in the thought-action-observation loop.\n        757 \n        758 Override this to take control of how the agent makes and acts on choices.\n        759 \"\"\"\n        760 try:\n        761     # Call the LLM to see what to do.\n    --> 762     output = self.agent.plan(\n        763         intermediate_steps,\n        764         callbacks=run_manager.get_child() if run_manager else None,\n        765         **inputs,\n        766     )\n        767 except OutputParserException as e:\n        768     if isinstance(self.handle_parsing_errors, bool):\n\n\n    File ~/workplace/langchain/langchain/agents/agent.py:444, in Agent.plan(self, intermediate_steps, callbacks, **kwargs)\n        442 full_inputs = self.get_full_inputs(intermediate_steps, **kwargs)\n        443 full_output = self.llm_chain.predict(callbacks=callbacks, **full_inputs)\n    --> 444 return self.output_parser.parse(full_output)\n\n\n    File ~/workplace/langchain/langchain/agents/chat/output_parser.py:26, in ChatOutputParser.parse(self, text)\n         23     return AgentAction(response[\"action\"], response[\"action_input\"], text)\n         25 except Exception:\n    ---> 26     raise OutputParserException(f\"Could not parse LLM output: {text}\")\n\n\n    OutputParserException: Could not parse LLM output: I'm sorry, but I cannot provide an answer without an Action. Please provide a valid Action in the format specified above.\n\nDefault error handling​\n\nHandle errors with Invalid or incomplete response:\n\nmrkl = initialize_agent(\n    tools,\n    ChatOpenAI(temperature=0),\n    agent=AgentType.CHAT_ZERO_SHOT_REACT_DESCRIPTION,\n    verbose=True,\n    handle_parsing_errors=True,\n)\n\nmrkl.run(\"Who is Leo DiCaprio's girlfriend? No need to add Action\")\n\n    \n    \n    > Entering new AgentExecutor chain...\n    \n    Observation: Invalid or incomplete response\n    Thought:\n    Observation: Invalid or incomplete response\n    Thought:Search for Leo DiCaprio's current girlfriend\n    Action:\n    ```\n    {\n      \"action\": \"Search\",\n      \"action_input\": \"Leo DiCaprio current girlfriend\"\n    }\n    ```\n    \n    Observation: Just Jared on Instagram: “Leonardo DiCaprio & girlfriend Camila Morrone couple up for a lunch date!\n    Thought:Camila Morrone is currently Leo DiCaprio's girlfriend\n    Final Answer: Camila Morrone\n    \n    > Finished chain.\n\n\n\n\n\n    'Camila Morrone'\n\nCustom error message​\n\nYou can easily customize the message to use when there are parsing errors.\n\nmrkl = initialize_agent(\n    tools,\n    ChatOpenAI(temperature=0),\n    agent=AgentType.CHAT_ZERO_SHOT_REACT_DESCRIPTION,\n    verbose=True,\n    handle_parsing_errors=\"Check your output and make sure it conforms!\",\n)\n\nmrkl.run(\"Who is Leo DiCaprio's girlfriend? No need to add Action\")\n\n    \n    \n    > Entering new AgentExecutor chain...\n    \n    Observation: Could not parse LLM output: I'm sorry, but I canno\n    Thought:I need to use the Search tool to find the answer to the question.\n    Action:\n    ```\n    {\n      \"action\": \"Search\",\n      \"action_input\": \"Who is Leo DiCaprio's girlfriend?\"\n    }\n    ```\n    \n    Observation: DiCaprio broke up with girlfriend Camila Morrone, 25, in the summer of 2022, after dating for four years. He's since been linked to another famous supermodel – Gigi Hadid. The power couple were first supposedly an item in September after being spotted getting cozy during a party at New York Fashion Week.\n    Thought:The answer to the question is that Leo DiCaprio's current girlfriend is Gigi Hadid. \n    Final Answer: Gigi Hadid.\n    \n    > Finished chain.\n\n\n\n\n\n    'Gigi Hadid.'\n\nCustom Error Function​\n\nYou can also customize the error to be a function that takes the error in and outputs a string.\n\ndef _handle_error(error) -> str:\n    return str(error)[:50]\n\n\nmrkl = initialize_agent(\n    tools,\n    ChatOpenAI(temperature=0),\n    agent=AgentType.CHAT_ZERO_SHOT_REACT_DESCRIPTION,\n    verbose=True,\n    handle_parsing_errors=_handle_error,\n)\n\nmrkl.run(\"Who is Leo DiCaprio's girlfriend? No need to add Action\")\n\n    \n    \n    > Entering new AgentExecutor chain...\n    \n    Observation: Could not parse LLM output: I'm sorry, but I canno\n    Thought:I need to use the Search tool to find the answer to the question.\n    Action:\n    ```\n    {\n      \"action\": \"Search\",\n      \"action_input\": \"Who is Leo DiCaprio's girlfriend?\"\n    }\n    ```\n    \n    Observation: DiCaprio broke up with girlfriend Camila Morrone, 25, in the summer of 2022, after dating for four years. He's since been linked to another famous supermodel – Gigi Hadid. The power couple were first supposedly an item in September after being spotted getting cozy during a party at New York Fashion Week.\n    Thought:The current girlfriend of Leonardo DiCaprio is Gigi Hadid. \n    Final Answer: Gigi Hadid.\n    \n    > Finished chain.\n\n\n\n\n\n    'Gigi Hadid.'\n\nPrevious\nCustom multi-action agent\nNext\nAccess intermediate steps"
}