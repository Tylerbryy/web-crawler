{
	"title": "Google Drive | 🦜️🔗 Langchain",
	"url": "https://python.langchain.com/docs/integrations/document_loaders/google_drive",
	"html": "ComponentsDocument loadersGoogle Drive\nGoogle Drive\n\nGoogle Drive is a file storage and synchronization service developed by Google.\n\nThis notebook covers how to load documents from Google Drive. Currently, only Google Docs are supported.\n\nPrerequisites​\nCreate a Google Cloud project or use an existing project\nEnable the Google Drive API\nAuthorize credentials for desktop app\npip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib\n🧑 Instructions for ingesting your Google Docs data​\n\nBy default, the GoogleDriveLoader expects the credentials.json file to be ~/.credentials/credentials.json, but this is configurable using the credentials_path keyword argument. Same thing with token.json - token_path. Note that token.json will be created automatically the first time you use the loader.\n\nThe first time you use GoogleDriveLoader, you will be displayed with the consent screen in your browser. If this doesn't happen and you get a RefreshError, do not use credentials_path in your GoogleDriveLoader constructor call. Instead, put that path in a GOOGLE_APPLICATION_CREDENTIALS environmental variable.\n\nGoogleDriveLoader can load from a list of Google Docs document ids or a folder id. You can obtain your folder and document id from the URL:\n\nFolder: https://drive.google.com/drive/u/0/folders/1yucgL9WGgWZdM1TOuKkeghlPizuzMYb5 -> folder id is \"1yucgL9WGgWZdM1TOuKkeghlPizuzMYb5\"\nDocument: https://docs.google.com/document/d/1bfaMQ18_i56204VaQDVeAFpqEijJTgvurupdEDiaUQw/edit -> document id is \"1bfaMQ18_i56204VaQDVeAFpqEijJTgvurupdEDiaUQw\"\npip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib\n\nfrom langchain.document_loaders import GoogleDriveLoader\n\nloader = GoogleDriveLoader(\n    folder_id=\"1yucgL9WGgWZdM1TOuKkeghlPizuzMYb5\",\n    token_path=\"/path/where/you/want/token/to/be/created/google_token.json\",\n    # Optional: configure whether to recursively fetch files from subfolders. Defaults to False.\n    recursive=False,\n)\n\ndocs = loader.load()\n\n\nWhen you pass a folder_id by default all files of type document, sheet and pdf are loaded. You can modify this behaviour by passing a file_types argument\n\nloader = GoogleDriveLoader(\n    folder_id=\"1yucgL9WGgWZdM1TOuKkeghlPizuzMYb5\",\n    file_types=[\"document\", \"sheet\"],\n    recursive=False,\n)\n\nPassing in Optional File Loaders​\n\nWhen processing files other than Google Docs and Google Sheets, it can be helpful to pass an optional file loader to GoogleDriveLoader. If you pass in a file loader, that file loader will be used on documents that do not have a Google Docs or Google Sheets MIME type. Here is an example of how to load an Excel document from Google Drive using a file loader.\n\nfrom langchain.document_loaders import GoogleDriveLoader, UnstructuredFileIOLoader\n\nfile_id = \"1x9WBtFPWMEAdjcJzPScRsjpjQvpSo_kz\"\nloader = GoogleDriveLoader(\n    file_ids=[file_id],\n    file_loader_cls=UnstructuredFileIOLoader,\n    file_loader_kwargs={\"mode\": \"elements\"},\n)\n\ndocs = loader.load()\n\ndocs[0]\n\n\nYou can also process a folder with a mix of files and Google Docs/Sheets using the following pattern:\n\nfolder_id = \"1asMOHY1BqBS84JcRbOag5LOJac74gpmD\"\nloader = GoogleDriveLoader(\n    folder_id=folder_id,\n    file_loader_cls=UnstructuredFileIOLoader,\n    file_loader_kwargs={\"mode\": \"elements\"},\n)\n\ndocs = loader.load()\n\ndocs[0]\n\nExtended usage​\n\nAn external component can manage the complexity of Google Drive : langchain-googledrive It's compatible with the ̀langchain.document_loaders.GoogleDriveLoader and can be used in its place.\n\nTo be compatible with containers, the authentication uses an environment variable ̀GOOGLE_ACCOUNT_FILE` to credential file (for user or service).\n\npip install langchain-googledrive\n\nfolder_id = \"root\"\n# folder_id='1yucgL9WGgWZdM1TOuKkeghlPizuzMYb5'\n\n# Use the advanced version.\nfrom langchain_googledrive.document_loaders import GoogleDriveLoader\n\nloader = GoogleDriveLoader(\n    folder_id=folder_id,\n    recursive=False,\n    num_results=2,  # Maximum number of file to load\n)\n\n\nBy default, all files with these mime-type can be converted to Document.\n\ntext/text\ntext/plain\ntext/html\ntext/csv\ntext/markdown\nimage/png\nimage/jpeg\napplication/epub+zip\napplication/pdf\napplication/rtf\napplication/vnd.google-apps.document (GDoc)\napplication/vnd.google-apps.presentation (GSlide)\napplication/vnd.google-apps.spreadsheet (GSheet)\napplication/vnd.google.colaboratory (Notebook colab)\napplication/vnd.openxmlformats-officedocument.presentationml.presentation (PPTX)\napplication/vnd.openxmlformats-officedocument.wordprocessingml.document (DOCX)\n\nIt's possible to update or customize this. See the documentation of GDriveLoader.\n\nBut, the corresponding packages must be installed.\n\npip install unstructured\n\nfor doc in loader.load():\n    print(\"---\")\n    print(doc.page_content.strip()[:60] + \"...\")\n\nCustomize the search pattern​\n\nAll parameter compatible with Google list() API can be set.\n\nTo specify the new pattern of the Google request, you can use a PromptTemplate(). The variables for the prompt can be set with kwargs in the constructor. Some pre-formated request are proposed (use {query}, {folder_id} and/or {mime_type}):\n\nYou can customize the criteria to select the files. A set of predefined filter are proposed: | template | description | | -------------------------------------- | --------------------------------------------------------------------- | | gdrive-all-in-folder | Return all compatible files from a folder_id | | gdrive-query | Search query in all drives | | gdrive-by-name | Search file with name query | | gdrive-query-in-folder | Search query in folder_id (and sub-folders if recursive=true) | | gdrive-mime-type | Search a specific mime_type | | gdrive-mime-type-in-folder | Search a specific mime_type in folder_id | | gdrive-query-with-mime-type | Search query with a specific mime_type | | gdrive-query-with-mime-type-and-folder | Search query with a specific mime_type and in folder_id |\n\nloader = GoogleDriveLoader(\n    folder_id=folder_id,\n    recursive=False,\n    template=\"gdrive-query\",  # Default template to use\n    query=\"machine learning\",\n    num_results=2,  # Maximum number of file to load\n    supportsAllDrives=False,  # GDrive `list()` parameter\n)\nfor doc in loader.load():\n    print(\"---\")\n    print(doc.page_content.strip()[:60] + \"...\")\n\n\nYou can customize your pattern.\n\nfrom langchain.prompts.prompt import PromptTemplate\n\nloader = GoogleDriveLoader(\n    folder_id=folder_id,\n    recursive=False,\n    template=PromptTemplate(\n        input_variables=[\"query\", \"query_name\"],\n        template=\"fullText contains '{query}' and name contains '{query_name}' and trashed=false\",\n    ),  # Default template to use\n    query=\"machine learning\",\n    query_name=\"ML\",\n    num_results=2,  # Maximum number of file to load\n)\nfor doc in loader.load():\n    print(\"---\")\n    print(doc.page_content.strip()[:60] + \"...\")\n\nModes for GSlide and GSheet​\n\nThe parameter mode accepts different values:\n\n\"document\": return the body of each document\n\"snippets\": return the description of each file (set in metadata of Google Drive files).\n\nThe conversion can manage in Markdown format:\n\nbullet\nlink\ntable\ntitles\n\nThe parameter gslide_mode accepts different values:\n\n\"single\" : one document with <PAGE BREAK>\n\"slide\" : one document by slide\n\"elements\" : one document for each elements.\nloader = GoogleDriveLoader(\n    template=\"gdrive-mime-type\",\n    mime_type=\"application/vnd.google-apps.presentation\",  # Only GSlide files\n    gslide_mode=\"slide\",\n    num_results=2,  # Maximum number of file to load\n)\nfor doc in loader.load():\n    print(\"---\")\n    print(doc.page_content.strip()[:60] + \"...\")\n\n\nThe parameter gsheet_mode accepts different values:\n\n\"single\": Generate one document by line\n\"elements\" : one document with markdown array and <PAGE BREAK> tags.\nloader = GoogleDriveLoader(\n    template=\"gdrive-mime-type\",\n    mime_type=\"application/vnd.google-apps.spreadsheet\",  # Only GSheet files\n    gsheet_mode=\"elements\",\n    num_results=2,  # Maximum number of file to load\n)\nfor doc in loader.load():\n    print(\"---\")\n    print(doc.page_content.strip()[:60] + \"...\")\n\nAdvanced usage​\n\nAll Google File have a 'description' in the metadata. This field can be used to memorize a summary of the document or others indexed tags (See method lazy_update_description_with_summary()).\n\nIf you use the mode=\"snippet\", only the description will be used for the body. Else, the metadata['summary'] has the field.\n\nSometime, a specific filter can be used to extract some information from the filename, to select some files with specific criteria. You can use a filter.\n\nSometimes, many documents are returned. It's not necessary to have all documents in memory at the same time. You can use the lazy versions of methods, to get one document at a time. It's better to use a complex query in place of a recursive search. For each folder, a query must be applied if you activate recursive=True.\n\nimport os\n\nloader = GoogleDriveLoader(\n    gdrive_api_file=os.environ[\"GOOGLE_ACCOUNT_FILE\"],\n    num_results=2,\n    template=\"gdrive-query\",\n    filter=lambda search, file: \"#test\" not in file.get(\"description\", \"\"),\n    query=\"machine learning\",\n    supportsAllDrives=False,\n)\nfor doc in loader.load():\n    print(\"---\")\n    print(doc.page_content.strip()[:60] + \"...\")\n\nPrevious\nGoogle Cloud Storage File\nNext\nGoogle Speech-to-Text Audio Transcripts"
}