{
	"title": "Rockset | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/integrations/document_loaders/rockset",
	"html": "ComponentsDocument loadersRockset\nRockset\n\nRockset is a real-time analytics database which enables queries on massive, semi-structured data without operational burden. With Rockset, ingested data is queryable within one second and analytical queries against that data typically execute in milliseconds. Rockset is compute optimized, making it suitable for serving high concurrency applications in the sub-100TB range (or larger than 100s of TBs with rollups).\n\nThis notebook demonstrates how to use Rockset as a document loader in langchain. To get started, make sure you have a Rockset account and an API key available.\n\nSetting up the environment‚Äã\nGo to the Rockset console and get an API key. Find your API region from the API reference. For the purpose of this notebook, we will assume you're using Rockset from Oregon(us-west-2).\nSet your the environment variable ROCKSET_API_KEY.\nInstall the Rockset python client, which will be used by langchain to interact with the Rockset database.\npip install rockset\n\nLoading Documents\n\nThe Rockset integration with LangChain allows you to load documents from Rockset collections with SQL queries. In order to do this you must construct a RocksetLoader object. Here is an example snippet that initializes a RocksetLoader.\n\nfrom langchain.document_loaders import RocksetLoader\nfrom rockset import Regions, RocksetClient, models\n\nloader = RocksetLoader(\n    RocksetClient(Regions.usw2a1, \"<api key>\"),\n    models.QueryRequestSql(query=\"SELECT * FROM langchain_demo LIMIT 3\"),  # SQL query\n    [\"text\"],  # content columns\n    metadata_keys=[\"id\", \"date\"],  # metadata columns\n)\n\n\nHere, you can see that the following query is run:\n\nSELECT * FROM langchain_demo LIMIT 3\n\n\nThe text column in the collection is used as the page content, and the record's id and date columns are used as metadata (if you do not pass anything into metadata_keys, the whole Rockset document will be used as metadata).\n\nTo execute the query and access an iterator over the resulting Documents, run:\n\nloader.lazy_load()\n\n\nTo execute the query and access all resulting Documents at once, run:\n\nloader.load()\n\n\nHere is an example response of loader.load():\n\n[\n    Document(\n        page_content=\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas a libero porta, dictum ipsum eget, hendrerit neque. Morbi blandit, ex ut suscipit viverra, enim velit tincidunt tellus, a tempor velit nunc et ex. Proin hendrerit odio nec convallis lobortis. Aenean in purus dolor. Vestibulum orci orci, laoreet eget magna in, commodo euismod justo.\", \n        metadata={\"id\": 83209, \"date\": \"2022-11-13T18:26:45.000000Z\"}\n    ),\n    Document(\n        page_content=\"Integer at finibus odio. Nam sit amet enim cursus lacus gravida feugiat vestibulum sed libero. Aenean eleifend est quis elementum tincidunt. Curabitur sit amet ornare erat. Nulla id dolor ut magna volutpat sodales fringilla vel ipsum. Donec ultricies, lacus sed fermentum dignissim, lorem elit aliquam ligula, sed suscipit sapien purus nec ligula.\", \n        metadata={\"id\": 89313, \"date\": \"2022-11-13T18:28:53.000000Z\"}\n    ),\n    Document(\n        page_content=\"Morbi tortor enim, commodo id efficitur vitae, fringilla nec mi. Nullam molestie faucibus aliquet. Praesent a est facilisis, condimentum justo sit amet, viverra erat. Fusce volutpat nisi vel purus blandit, et facilisis felis accumsan. Phasellus luctus ligula ultrices tellus tempor hendrerit. Donec at ultricies leo.\", \n        metadata={\"id\": 87732, \"date\": \"2022-11-13T18:49:04.000000Z\"}\n    )\n]\n\nUsing multiple columns as content‚Äã\n\nYou can choose to use multiple columns as content:\n\nfrom langchain.document_loaders import RocksetLoader\nfrom rockset import Regions, RocksetClient, models\n\nloader = RocksetLoader(\n    RocksetClient(Regions.usw2a1, \"<api key>\"),\n    models.QueryRequestSql(query=\"SELECT * FROM langchain_demo LIMIT 1 WHERE id=38\"),\n    [\"sentence1\", \"sentence2\"],  # TWO content columns\n)\n\n\nAssuming the \"sentence1\" field is \"This is the first sentence.\" and the \"sentence2\" field is \"This is the second sentence.\", the page_content of the resulting Document would be:\n\nThis is the first sentence.\nThis is the second sentence.\n\n\nYou can define you own function to join content columns by setting the content_columns_joiner argument in the RocksetLoader constructor. content_columns_joiner is a method that takes in a List[Tuple[str, Any]]] as an argument, representing a list of tuples of (column name, column value). By default, this is a method that joins each column value with a new line.\n\nFor example, if you wanted to join sentence1 and sentence2 with a space instead of a new line, you could set content_columns_joiner like so:\n\nRocksetLoader(\n    RocksetClient(Regions.usw2a1, \"<api key>\"),\n    models.QueryRequestSql(query=\"SELECT * FROM langchain_demo LIMIT 1 WHERE id=38\"),\n    [\"sentence1\", \"sentence2\"],\n    content_columns_joiner=lambda docs: \" \".join(\n        [doc[1] for doc in docs]\n    ),  # join with space instead of /n\n)\n\n\nThe page_content of the resulting Document would be:\n\nThis is the first sentence. This is the second sentence.\n\n\nOftentimes you want to include the column name in the page_content. You can do that like this:\n\nRocksetLoader(\n    RocksetClient(Regions.usw2a1, \"<api key>\"),\n    models.QueryRequestSql(query=\"SELECT * FROM langchain_demo LIMIT 1 WHERE id=38\"),\n    [\"sentence1\", \"sentence2\"],\n    content_columns_joiner=lambda docs: \"\\n\".join(\n        [f\"{doc[0]}: {doc[1]}\" for doc in docs]\n    ),\n)\n\n\nThis would result in the following page_content:\n\nsentence1: This is the first sentence.\nsentence2: This is the second sentence.\n\nPrevious\nRoam\nNext\nrspace"
}