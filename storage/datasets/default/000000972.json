{
	"title": "Chat models | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/modules/model_io/chat",
	"html": "ModulesModel I/OChat models\nChat models\nINFO\n\nHead to Integrations for documentation on built-in integrations with chat model providers.\n\nChat models are a variation on language models. While chat models use language models under the hood, the interface they use is a bit different. Rather than using a \"text in, text out\" API, they use an interface where \"chat messages\" are the inputs and outputs.\n\nSetup‚Äã\n\nFor this example we'll need to install the OpenAI Python package:\n\npip install openai\n\n\nAccessing the API requires an API key, which you can get by creating an account and heading here. Once we have a key we'll want to set it as an environment variable by running:\n\nexport OPENAI_API_KEY=\"...\"\n\n\nIf you'd prefer not to set an environment variable you can pass the key in directly via the openai_api_key named parameter when initiating the OpenAI LLM class:\n\nfrom langchain.chat_models import ChatOpenAI\n\nchat = ChatOpenAI(openai_api_key=\"...\")\n\n\nOtherwise you can initialize without any params:\n\nfrom langchain.chat_models import ChatOpenAI\n\nchat = ChatOpenAI()\n\nMessages‚Äã\n\nThe chat model interface is based around messages rather than raw text. The types of messages currently supported in LangChain are AIMessage, HumanMessage, SystemMessage, FunctionMessage and ChatMessage -- ChatMessage takes in an arbitrary role parameter. Most of the time, you'll just be dealing with HumanMessage, AIMessage, and SystemMessage\n\nLCEL‚Äã\n\nChat models implement the Runnable interface, the basic building block of the LangChain Expression Language (LCEL). This means they support invoke, ainvoke, stream, astream, batch, abatch, astream_log calls.\n\nChat models accept List[BaseMessage] as inputs, or objects which can be coerced to messages, including str (converted to HumanMessage) and PromptValue.\n\nfrom langchain.schema.messages import HumanMessage, SystemMessage\n\nmessages = [\n    SystemMessage(content=\"You're a helpful assistant\"),\n    HumanMessage(content=\"What is the purpose of model regularization?\"),\n]\n\nchat.invoke(messages)\n\n    AIMessage(content=\"The purpose of model regularization is to prevent overfitting in machine learning models. Overfitting occurs when a model becomes too complex and starts to fit the noise in the training data, leading to poor generalization on unseen data. Regularization techniques introduce additional constraints or penalties to the model's objective function, discouraging it from becoming overly complex and promoting simpler and more generalizable models. Regularization helps to strike a balance between fitting the training data well and avoiding overfitting, leading to better performance on new, unseen data.\")\n\nfor chunk in chat.stream(messages):\n    print(chunk.content, end=\"\", flush=True)\n\n    The purpose of model regularization is to prevent overfitting and improve the generalization of a machine learning model. Overfitting occurs when a model is too complex and learns the noise or random variations in the training data, which leads to poor performance on new, unseen data. Regularization techniques introduce additional constraints or penalties to the model's learning process, discouraging it from fitting the noise and reducing the complexity of the model. This helps to improve the model's ability to generalize well and make accurate predictions on unseen data.\n\nchat.batch([messages])\n\n    [AIMessage(content=\"The purpose of model regularization is to prevent overfitting in machine learning models. Overfitting occurs when a model becomes too complex and starts to learn the noise or random fluctuations in the training data, rather than the underlying patterns or relationships. Regularization techniques add a penalty term to the model's objective function, which discourages the model from becoming too complex and helps it generalize better to new, unseen data. This improves the model's ability to make accurate predictions on new data by reducing the variance and increasing the model's overall performance.\")]\n\nawait chat.ainvoke(messages)\n\n    AIMessage(content='The purpose of model regularization is to prevent overfitting in machine learning models. Overfitting occurs when a model becomes too complex and starts to memorize the training data instead of learning general patterns and relationships. This leads to poor performance on new, unseen data.\\n\\nRegularization techniques introduce additional constraints or penalties to the model during training, discouraging it from becoming overly complex. This helps to strike a balance between fitting the training data well and generalizing to new data. Regularization techniques can include adding a penalty term to the loss function, such as L1 or L2 regularization, or using techniques like dropout or early stopping. By regularizing the model, it encourages it to learn the most relevant features and reduce the impact of noise or outliers in the data.')\n\nasync for chunk in chat.astream(messages):\n    print(chunk.content, end=\"\", flush=True)\n\n    The purpose of model regularization is to prevent overfitting in machine learning models. Overfitting occurs when a model becomes too complex and starts to memorize the training data instead of learning the underlying patterns. Regularization techniques help in reducing the complexity of the model by adding a penalty to the loss function. This penalty encourages the model to have smaller weights or fewer features, making it more generalized and less prone to overfitting. The goal is to find the right balance between fitting the training data well and being able to generalize well to unseen data.\n\nasync for chunk in chat.astream_log(messages):\n    print(chunk)\n\n    RunLogPatch({'op': 'replace',\n      'path': '',\n      'value': {'final_output': None,\n                'id': '754c4143-2348-46c4-ad2b-3095913084c6',\n                'logs': {},\n                'streamed_output': []}})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content='')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content='The')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' purpose')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' of')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' model')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' regularization')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' is')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' to')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' prevent')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' a')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' machine')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' learning')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' model')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' from')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' over')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content='fit')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content='ting')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' the')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' training')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' data')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' and')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' improve')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' its')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' general')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content='ization')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' ability')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content='.')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' Over')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content='fit')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content='ting')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' occurs')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' when')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' a')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' model')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' becomes')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' too')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' complex')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' and')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' learns')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' to')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' fit')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' the')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' noise')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' or')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' random')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' fluctuations')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' in')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' the')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' training')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' data')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=',')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' instead')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' of')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' capturing')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' the')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' underlying')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' patterns')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' and')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' relationships')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content='.')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' Regular')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content='ization')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' techniques')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' introduce')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' a')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' penalty')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' term')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' to')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' the')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' model')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=\"'s\")})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' objective')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' function')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=',')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' which')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' discour')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content='ages')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' the')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' model')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' from')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' becoming')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' too')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' complex')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content='.')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' This')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' helps')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' to')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' control')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' the')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' model')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=\"'s\")})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' complexity')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' and')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' reduces')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' the')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' risk')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' of')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' over')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content='fit')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content='ting')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=',')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' leading')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' to')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' better')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' performance')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' on')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' unseen')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content=' data')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content='.')})\n    RunLogPatch({'op': 'add',\n      'path': '/streamed_output/-',\n      'value': AIMessageChunk(content='')})\n    RunLogPatch({'op': 'replace',\n      'path': '/final_output',\n      'value': {'generations': [[{'generation_info': {'finish_reason': 'stop'},\n                                  'message': AIMessageChunk(content=\"The purpose of model regularization is to prevent a machine learning model from overfitting the training data and improve its generalization ability. Overfitting occurs when a model becomes too complex and learns to fit the noise or random fluctuations in the training data, instead of capturing the underlying patterns and relationships. Regularization techniques introduce a penalty term to the model's objective function, which discourages the model from becoming too complex. This helps to control the model's complexity and reduces the risk of overfitting, leading to better performance on unseen data.\"),\n                                  'text': 'The purpose of model regularization is '\n                                          'to prevent a machine learning model '\n                                          'from overfitting the training data and '\n                                          'improve its generalization ability. '\n                                          'Overfitting occurs when a model becomes '\n                                          'too complex and learns to fit the noise '\n                                          'or random fluctuations in the training '\n                                          'data, instead of capturing the '\n                                          'underlying patterns and relationships. '\n                                          'Regularization techniques introduce a '\n                                          \"penalty term to the model's objective \"\n                                          'function, which discourages the model '\n                                          'from becoming too complex. This helps '\n                                          \"to control the model's complexity and \"\n                                          'reduces the risk of overfitting, '\n                                          'leading to better performance on unseen '\n                                          'data.'}]],\n                'llm_output': None,\n                'run': None}})\n\nLangSmith‚Äã\n\nAll ChatModels come with built-in LangSmith tracing. Just set the following environment variables:\n\nexport LANGCHAIN_TRACING_V2=\"true\"\nexport LANGCHAIN_API_KEY=<your-api-key>\n\n\nand any ChatModel invocation (whether it's nested in a chain or not) will automatically be traced. A trace will include inputs, outputs, latency, token usage, invocation params, environment params, and more. See an example here: https://smith.langchain.com/public/a54192ae-dd5c-4f7a-88d1-daa1eaba1af7/r.\n\nIn LangSmith you can then provide feedback for any trace, compile annotated datasets for evals, debug performance in the playground, and more.\n\n[Legacy] __call__‚Äã\nMessages in -> message out‚Äã\n\nFor convenience you can also treat chat models as callables. You can get chat completions by passing one or more messages to the chat model. The response will be a message.\n\nfrom langchain.schema import HumanMessage, SystemMessage\n\nchat(\n    [\n        HumanMessage(\n            content=\"Translate this sentence from English to French: I love programming.\"\n        )\n    ]\n)\n\n    AIMessage(content=\"J'adore la programmation.\")\n\n\nOpenAI's chat model supports multiple messages as input. See here for more information. Here is an example of sending a system and user message to the chat model:\n\nmessages = [\n    SystemMessage(\n        content=\"You are a helpful assistant that translates English to French.\"\n    ),\n    HumanMessage(content=\"I love programming.\"),\n]\nchat(messages)\n\n    AIMessage(content=\"J'adore la programmation.\")\n\n[Legacy] generate‚Äã\nBatch calls, richer outputs‚Äã\n\nYou can go one step further and generate completions for multiple sets of messages using generate. This returns an LLMResult with an additional message parameter. This will include additional information about each generation beyond the returned message (e.g. the finish reason) and additional information about the full API call (e.g. total tokens used).\n\nbatch_messages = [\n    [\n        SystemMessage(\n            content=\"You are a helpful assistant that translates English to French.\"\n        ),\n        HumanMessage(content=\"I love programming.\"),\n    ],\n    [\n        SystemMessage(\n            content=\"You are a helpful assistant that translates English to French.\"\n        ),\n        HumanMessage(content=\"I love artificial intelligence.\"),\n    ],\n]\nresult = chat.generate(batch_messages)\nresult\n\n    LLMResult(generations=[[ChatGeneration(text=\"J'adore programmer.\", generation_info={'finish_reason': 'stop'}, message=AIMessage(content=\"J'adore programmer.\"))], [ChatGeneration(text=\"J'adore l'intelligence artificielle.\", generation_info={'finish_reason': 'stop'}, message=AIMessage(content=\"J'adore l'intelligence artificielle.\"))]], llm_output={'token_usage': {'prompt_tokens': 53, 'completion_tokens': 18, 'total_tokens': 71}, 'model_name': 'gpt-3.5-turbo'}, run=[RunInfo(run_id=UUID('077917a9-026c-47c4-b308-77b37c3a3bfa')), RunInfo(run_id=UUID('0a70a0bf-c599-4f51-932a-c7d42202c984'))])\n\n\nYou can recover things like token usage from this LLMResult:\n\nresult.llm_output\n\n    {'token_usage': {'prompt_tokens': 53,\n      'completion_tokens': 18,\n      'total_tokens': 71},\n     'model_name': 'gpt-3.5-turbo'}\n\nPrevious\nSelect by similarity\nNext\nCaching"
}