{
	"title": "PGVecto.rs | 🦜️🔗 Langchain",
	"url": "https://python.langchain.com/docs/integrations/vectorstores/pgvecto_rs",
	"html": "ComponentsVector storesPGVecto.rs\nPGVecto.rs\n\nThis notebook shows how to use functionality related to the Postgres vector database (pgvecto.rs). You need to install SQLAlchemy >= 2 manually.\n\n## Loading Environment Variables\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\nfrom typing import List\n\nfrom langchain.docstore.document import Document\nfrom langchain.document_loaders import TextLoader\nfrom langchain.embeddings.openai import OpenAIEmbeddings\nfrom langchain.text_splitter import CharacterTextSplitter\nfrom langchain.vectorstores.pgvecto_rs import PGVecto_rs\n\nloader = TextLoader(\"../../../state_of_the_union.txt\")\ndocuments = loader.load()\ntext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)\ndocs = text_splitter.split_documents(documents)\n\nembeddings = OpenAIEmbeddings()\n\n\nStart the database with the official demo docker image.\n\ndocker run --name pgvecto-rs-demo -e POSTGRES_PASSWORD=mysecretpassword -p 5432:5432 -d tensorchord/pgvecto-rs:latest\n\n\nThen contruct the db URL\n\n## PGVecto.rs needs the connection string to the database.\n## We will load it from the environment variables.\nimport os\n\nPORT = os.getenv(\"DB_PORT\", 5432)\nHOST = os.getenv(\"DB_HOST\", \"localhost\")\nUSER = os.getenv(\"DB_USER\", \"postgres\")\nPASS = os.getenv(\"DB_PASS\", \"mysecretpassword\")\nDB_NAME = os.getenv(\"DB_NAME\", \"postgres\")\n\n# Run tests with shell:\nURL = \"postgresql+psycopg://{username}:{password}@{host}:{port}/{db_name}\".format(\n    port=PORT,\n    host=HOST,\n    username=USER,\n    password=PASS,\n    db_name=DB_NAME,\n)\n\n\nFinally, create the VectorStore from the documents:\n\ndb1 = PGVecto_rs.from_documents(\n    documents=docs,\n    embedding=embeddings,\n    db_url=URL,\n    # The table name is f\"collection_{collection_name}\", so that it should be unique.\n    collection_name=\"state_of_the_union\",\n)\n\n\nYou can connect to the table laterly with:\n\n# Create new empty vectorstore with collection_name.\n# Or connect to an existing vectorstore in database if exists.\n# Arguments should be the same as when the vectorstore was created.\ndb1 = PGVecto_rs.from_collection_name(\n    embedding=embeddings,\n    db_url=URL,\n    collection_name=\"state_of_the_union\",\n)\n\n\nMake sure that the user is permitted to create a table.\n\nSimilarity search with score​\nSimilarity Search with Euclidean Distance (Default)​\nquery = \"What did the president say about Ketanji Brown Jackson\"\ndocs: List[Document] = db1.similarity_search(query, k=4)\n\nfor doc in docs:\n    print(doc.page_content)\n    print(\"======================\")\n\nPrevious\nPostgres Embedding\nNext\nPGVector"
}