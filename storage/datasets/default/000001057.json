{
	"title": "Lost in the middle: The problem with long contexts | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/modules/data_connection/document_transformers/post_retrieval/long_context_reorder",
	"html": "ModulesRetrievalDocument transformersPost retrievalLost in the middle: The problem with long contexts\nLost in the middle: The problem with long contexts\n\nNo matter the architecture of your model, there is a substantial performance degradation when you include 10+ retrieved documents. In brief: When models must access relevant information in the middle of long contexts, they tend to ignore the provided documents. See: https://arxiv.org/abs/2307.03172\n\nTo avoid this issue you can re-order documents after retrieval to avoid performance degradation.\n\nfrom langchain.chains import LLMChain, StuffDocumentsChain\nfrom langchain.document_transformers import (\n    LongContextReorder,\n)\nfrom langchain.embeddings import HuggingFaceEmbeddings\nfrom langchain.llms import OpenAI\nfrom langchain.prompts import PromptTemplate\nfrom langchain.vectorstores import Chroma\n\n# Get embeddings.\nembeddings = HuggingFaceEmbeddings(model_name=\"all-MiniLM-L6-v2\")\n\ntexts = [\n    \"Basquetball is a great sport.\",\n    \"Fly me to the moon is one of my favourite songs.\",\n    \"The Celtics are my favourite team.\",\n    \"This is a document about the Boston Celtics\",\n    \"I simply love going to the movies\",\n    \"The Boston Celtics won the game by 20 points\",\n    \"This is just a random text.\",\n    \"Elden Ring is one of the best games in the last 15 years.\",\n    \"L. Kornet is one of the best Celtics players.\",\n    \"Larry Bird was an iconic NBA player.\",\n]\n\n# Create a retriever\nretriever = Chroma.from_texts(texts, embedding=embeddings).as_retriever(\n    search_kwargs={\"k\": 10}\n)\nquery = \"What can you tell me about the Celtics?\"\n\n# Get relevant documents ordered by relevance score\ndocs = retriever.get_relevant_documents(query)\ndocs\n\n    [Document(page_content='This is a document about the Boston Celtics', metadata={}),\n     Document(page_content='The Celtics are my favourite team.', metadata={}),\n     Document(page_content='L. Kornet is one of the best Celtics players.', metadata={}),\n     Document(page_content='The Boston Celtics won the game by 20 points', metadata={}),\n     Document(page_content='Larry Bird was an iconic NBA player.', metadata={}),\n     Document(page_content='Elden Ring is one of the best games in the last 15 years.', metadata={}),\n     Document(page_content='Basquetball is a great sport.', metadata={}),\n     Document(page_content='I simply love going to the movies', metadata={}),\n     Document(page_content='Fly me to the moon is one of my favourite songs.', metadata={}),\n     Document(page_content='This is just a random text.', metadata={})]\n\n# Reorder the documents:\n# Less relevant document will be at the middle of the list and more\n# relevant elements at beginning / end.\nreordering = LongContextReorder()\nreordered_docs = reordering.transform_documents(docs)\n\n# Confirm that the 4 relevant documents are at beginning and end.\nreordered_docs\n\n    [Document(page_content='The Celtics are my favourite team.', metadata={}),\n     Document(page_content='The Boston Celtics won the game by 20 points', metadata={}),\n     Document(page_content='Elden Ring is one of the best games in the last 15 years.', metadata={}),\n     Document(page_content='I simply love going to the movies', metadata={}),\n     Document(page_content='This is just a random text.', metadata={}),\n     Document(page_content='Fly me to the moon is one of my favourite songs.', metadata={}),\n     Document(page_content='Basquetball is a great sport.', metadata={}),\n     Document(page_content='Larry Bird was an iconic NBA player.', metadata={}),\n     Document(page_content='L. Kornet is one of the best Celtics players.', metadata={}),\n     Document(page_content='This is a document about the Boston Celtics', metadata={})]\n\n# We prepare and run a custom Stuff chain with reordered docs as context.\n\n# Override prompts\ndocument_prompt = PromptTemplate(\n    input_variables=[\"page_content\"], template=\"{page_content}\"\n)\ndocument_variable_name = \"context\"\nllm = OpenAI()\nstuff_prompt_override = \"\"\"Given this text extracts:\n-----\n{context}\n-----\nPlease answer the following question:\n{query}\"\"\"\nprompt = PromptTemplate(\n    template=stuff_prompt_override, input_variables=[\"context\", \"query\"]\n)\n\n# Instantiate the chain\nllm_chain = LLMChain(llm=llm, prompt=prompt)\nchain = StuffDocumentsChain(\n    llm_chain=llm_chain,\n    document_prompt=document_prompt,\n    document_variable_name=document_variable_name,\n)\nchain.run(input_documents=reordered_docs, query=query)\n\nPrevious\nSplit by tokens\nNext\nRetrieval"
}