{
	"title": "Gmail | 🦜️🔗 Langchain",
	"url": "https://python.langchain.com/docs/integrations/toolkits/gmail",
	"html": "ComponentsAgents and toolkitsGmail\nGmail\n\nThis notebook walks through connecting a LangChain email to the Gmail API.\n\nTo use this toolkit, you will need to set up your credentials explained in the Gmail API docs. Once you've downloaded the credentials.json file, you can start using the Gmail API. Once this is done, we'll install the required libraries.\n\npip install --upgrade google-api-python-client > /dev/null\npip install --upgrade google-auth-oauthlib > /dev/null\npip install --upgrade google-auth-httplib2 > /dev/null\npip install beautifulsoup4 > /dev/null # This is optional but is useful for parsing HTML messages\n\nCreate the Toolkit​\n\nBy default the toolkit reads the local credentials.json file. You can also manually provide a Credentials object.\n\nfrom langchain.agents.agent_toolkits import GmailToolkit\n\ntoolkit = GmailToolkit()\n\nCustomizing Authentication​\n\nBehind the scenes, a googleapi resource is created using the following methods. you can manually build a googleapi resource for more auth control.\n\nfrom langchain.tools.gmail.utils import build_resource_service, get_gmail_credentials\n\n# Can review scopes here https://developers.google.com/gmail/api/auth/scopes\n# For instance, readonly scope is 'https://www.googleapis.com/auth/gmail.readonly'\ncredentials = get_gmail_credentials(\n    token_file=\"token.json\",\n    scopes=[\"https://mail.google.com/\"],\n    client_secrets_file=\"credentials.json\",\n)\napi_resource = build_resource_service(credentials=credentials)\ntoolkit = GmailToolkit(api_resource=api_resource)\n\ntools = toolkit.get_tools()\ntools\n\n    [GmailCreateDraft(name='create_gmail_draft', description='Use this tool to create a draft email with the provided message fields.', args_schema=<class 'langchain.tools.gmail.create_draft.CreateDraftSchema'>, return_direct=False, verbose=False, callbacks=None, callback_manager=None, api_resource=<googleapiclient.discovery.Resource object at 0x10e5c6d10>),\n     GmailSendMessage(name='send_gmail_message', description='Use this tool to send email messages. The input is the message, recipents', args_schema=None, return_direct=False, verbose=False, callbacks=None, callback_manager=None, api_resource=<googleapiclient.discovery.Resource object at 0x10e5c6d10>),\n     GmailSearch(name='search_gmail', description=('Use this tool to search for email messages or threads. The input must be a valid Gmail query. The output is a JSON list of the requested resource.',), args_schema=<class 'langchain.tools.gmail.search.SearchArgsSchema'>, return_direct=False, verbose=False, callbacks=None, callback_manager=None, api_resource=<googleapiclient.discovery.Resource object at 0x10e5c6d10>),\n     GmailGetMessage(name='get_gmail_message', description='Use this tool to fetch an email by message ID. Returns the thread ID, snipet, body, subject, and sender.', args_schema=<class 'langchain.tools.gmail.get_message.SearchArgsSchema'>, return_direct=False, verbose=False, callbacks=None, callback_manager=None, api_resource=<googleapiclient.discovery.Resource object at 0x10e5c6d10>),\n     GmailGetThread(name='get_gmail_thread', description=('Use this tool to search for email messages. The input must be a valid Gmail query. The output is a JSON list of messages.',), args_schema=<class 'langchain.tools.gmail.get_thread.GetThreadSchema'>, return_direct=False, verbose=False, callbacks=None, callback_manager=None, api_resource=<googleapiclient.discovery.Resource object at 0x10e5c6d10>)]\n\nUse within an Agent​\nfrom langchain.agents import AgentType, initialize_agent\nfrom langchain.llms import OpenAI\n\nllm = OpenAI(temperature=0)\nagent = initialize_agent(\n    tools=toolkit.get_tools(),\n    llm=llm,\n    agent=AgentType.STRUCTURED_CHAT_ZERO_SHOT_REACT_DESCRIPTION,\n)\n\nagent.run(\n    \"Create a gmail draft for me to edit of a letter from the perspective of a sentient parrot\"\n    \" who is looking to collaborate on some research with her\"\n    \" estranged friend, a cat. Under no circumstances may you send the message, however.\"\n)\n\n    WARNING:root:Failed to load default session, using empty session: 0\n    WARNING:root:Failed to persist run: {\"detail\":\"Not Found\"}\n\n\n\n\n\n    'I have created a draft email for you to edit. The draft Id is r5681294731961864018.'\n\nagent.run(\"Could you search in my drafts for the latest email?\")\n\n    WARNING:root:Failed to load default session, using empty session: 0\n    WARNING:root:Failed to persist run: {\"detail\":\"Not Found\"}\n\n\n\n\n\n    \"The latest email in your drafts is from hopefulparrot@gmail.com with the subject 'Collaboration Opportunity'. The body of the email reads: 'Dear [Friend], I hope this letter finds you well. I am writing to you in the hopes of rekindling our friendship and to discuss the possibility of collaborating on some research together. I know that we have had our differences in the past, but I believe that we can put them aside and work together for the greater good. I look forward to hearing from you. Sincerely, [Parrot]'\"\n\nPrevious\nGitlab\nNext\nGoogle Drive tool"
}