{
	"title": "Running Agent as an Iterator | 🦜️🔗 Langchain",
	"url": "https://python.langchain.com/docs/modules/agents/how_to/agent_iter",
	"html": "ModulesAgentsHow-toRunning Agent as an Iterator\nRunning Agent as an Iterator\n\nTo demonstrate the AgentExecutorIterator functionality, we will set up a problem where an Agent must:\n\nRetrieve three prime numbers from a Tool\nMultiply these together.\n\nIn this simple problem we can demonstrate adding some logic to verify intermediate steps by checking whether their outputs are prime.\n\nimport pydantic\nfrom langchain.agents import AgentType, initialize_agent\nfrom langchain.agents.tools import Tool\nfrom langchain.chains import LLMMathChain\nfrom langchain.chat_models import ChatOpenAI\n\n# Uncomment if you have a .env in root of repo contains OPENAI_API_KEY\n# dotenv.load_dotenv(\"../../../../../.env\")\n\n# need to use GPT-4 here as GPT-3.5 does not understand, however hard you insist, that\n# it should use the calculator to perform the final calculation\nllm = ChatOpenAI(temperature=0, model=\"gpt-4\")\nllm_math_chain = LLMMathChain.from_llm(llm=llm, verbose=True)\n\n\nDefine tools which provide:\n\nThe nth prime number (using a small subset for this example)\nThe LLMMathChain to act as a calculator\nprimes = {998: 7901, 999: 7907, 1000: 7919}\n\n\nclass CalculatorInput(pydantic.BaseModel):\n    question: str = pydantic.Field()\n\n\nclass PrimeInput(pydantic.BaseModel):\n    n: int = pydantic.Field()\n\n\ndef is_prime(n: int) -> bool:\n    if n <= 1 or (n % 2 == 0 and n > 2):\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef get_prime(n: int, primes: dict = primes) -> str:\n    return str(primes.get(int(n)))\n\n\nasync def aget_prime(n: int, primes: dict = primes) -> str:\n    return str(primes.get(int(n)))\n\n\ntools = [\n    Tool(\n        name=\"GetPrime\",\n        func=get_prime,\n        description=\"A tool that returns the `n`th prime number\",\n        args_schema=PrimeInput,\n        coroutine=aget_prime,\n    ),\n    Tool.from_function(\n        func=llm_math_chain.run,\n        name=\"Calculator\",\n        description=\"Useful for when you need to compute mathematical expressions\",\n        args_schema=CalculatorInput,\n        coroutine=llm_math_chain.arun,\n    ),\n]\n\n\nConstruct the agent. We will use the default agent type here.\n\nagent = initialize_agent(\n    tools, llm, agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION, verbose=True\n)\n\n\nRun the iteration and perform a custom check on certain steps:\n\nquestion = \"What is the product of the 998th, 999th and 1000th prime numbers?\"\n\nfor step in agent.iter(question):\n    if output := step.get(\"intermediate_step\"):\n        action, value = output[0]\n        if action.tool == \"GetPrime\":\n            print(f\"Checking whether {value} is prime...\")\n            assert is_prime(int(value))\n        # Ask user if they want to continue\n        _continue = input(\"Should the agent continue (Y/n)?:\\n\")\n        if _continue != \"Y\":\n            break\n\n    \n    \n    > Entering new  chain...\n    I need to find the 998th, 999th and 1000th prime numbers first.\n    Action: GetPrime\n    Action Input: 998\n    Observation: 7901\n    Thought:Checking whether 7901 is prime...\n    Should the agent continue (Y/n)?:\n    Y\n    I have the 998th prime number. Now I need to find the 999th prime number.\n    Action: GetPrime\n    Action Input: 999\n    Observation: 7907\n    Thought:Checking whether 7907 is prime...\n    Should the agent continue (Y/n)?:\n    Y\n    I have the 999th prime number. Now I need to find the 1000th prime number.\n    Action: GetPrime\n    Action Input: 1000\n    Observation: 7919\n    Thought:Checking whether 7919 is prime...\n    Should the agent continue (Y/n)?:\n    Y\n    I have all three prime numbers. Now I need to calculate the product of these numbers.\n    Action: Calculator\n    Action Input: 7901 * 7907 * 7919\n    \n    > Entering new  chain...\n    7901 * 7907 * 7919```text\n    7901 * 7907 * 7919\n    ```\n    ...numexpr.evaluate(\"7901 * 7907 * 7919\")...\n    \n    Answer: 494725326233\n    > Finished chain.\n    \n    Observation: Answer: 494725326233\n    Thought:Should the agent continue (Y/n)?:\n    Y\n    I now know the final answer\n    Final Answer: 494725326233\n    \n    > Finished chain.\n\nPrevious\nAdd Memory to OpenAI Functions Agent\nNext\nReturning Structured Output"
}