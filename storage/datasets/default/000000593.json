{
	"title": "Nuclia | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/integrations/document_transformers/nuclia_transformer",
	"html": "ComponentsDocument transformersNuclia\nNuclia\n\nNuclia automatically indexes your unstructured data from any internal and external source, providing optimized search results and generative answers. It can handle video and audio transcription, image content extraction, and document parsing.\n\nNuclia Understanding API document transformer splits text into paragraphs and sentences, identifies entities, provides a summary of the text and generates embeddings for all the sentences.\n\nTo use the Nuclia Understanding API, you need to have a Nuclia account. You can create one for free at https://nuclia.cloud, and then create a NUA key.\n\nfrom langchain.document_transformers.nuclia_text_transform import NucliaTextTransformer\n\n#!pip install --upgrade protobuf\n#!pip install nucliadb-protos\n\nimport os\n\nos.environ[\"NUCLIA_ZONE\"] = \"<YOUR_ZONE>\"  # e.g. europe-1\nos.environ[\"NUCLIA_NUA_KEY\"] = \"<YOUR_API_KEY>\"\n\n\nTo use the Nuclia document transformer, you need to instantiate a NucliaUnderstandingAPI tool with enable_ml set to True:\n\nfrom langchain.tools.nuclia import NucliaUnderstandingAPI\n\nnua = NucliaUnderstandingAPI(enable_ml=True)\n\n\nThe Nuclia document transformer must be called in async mode, so you need to use the atransform_documents method:\n\nimport asyncio\n\nfrom langchain.document_transformers.nuclia_text_transform import NucliaTextTransformer\nfrom langchain.schema.document import Document\n\n\nasync def process():\n    documents = [\n        Document(page_content=\"<TEXT 1>\", metadata={}),\n        Document(page_content=\"<TEXT 2>\", metadata={}),\n        Document(page_content=\"<TEXT 3>\", metadata={}),\n    ]\n    nuclia_transformer = NucliaTextTransformer(nua)\n    transformed_documents = await nuclia_transformer.atransform_documents(documents)\n    print(transformed_documents)\n\n\nasyncio.run(process())\n\nPrevious\nHTML to text\nNext\nOpenAI metadata tagger"
}