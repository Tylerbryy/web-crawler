{
	"title": "MyScale | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/integrations/vectorstores/myscale",
	"html": "ComponentsVector storesMyScale\nMyScale\n\nMyScale is a cloud-based database optimized for AI applications and solutions, built on the open-source ClickHouse.\n\nThis notebook shows how to use functionality related to the MyScale vector database.\n\nSetting up environments‚Äã\npip install clickhouse-connect\n\n\nWe want to use OpenAIEmbeddings so we have to get the OpenAI API Key.\n\nimport getpass\nimport os\n\nos.environ[\"OPENAI_API_KEY\"] = getpass.getpass(\"OpenAI API Key:\")\nos.environ[\"OPENAI_API_BASE\"] = getpass.getpass(\"OpenAI Base:\")\nos.environ[\"MYSCALE_HOST\"] = getpass.getpass(\"MyScale Host:\")\nos.environ[\"MYSCALE_PORT\"] = getpass.getpass(\"MyScale Port:\")\nos.environ[\"MYSCALE_USERNAME\"] = getpass.getpass(\"MyScale Username:\")\nos.environ[\"MYSCALE_PASSWORD\"] = getpass.getpass(\"MyScale Password:\")\n\n\nThere are two ways to set up parameters for myscale index.\n\nEnvironment Variables\n\nBefore you run the app, please set the environment variable with export: export MYSCALE_HOST='<your-endpoints-url>' MYSCALE_PORT=<your-endpoints-port> MYSCALE_USERNAME=<your-username> MYSCALE_PASSWORD=<your-password> ...\n\nYou can easily find your account, password and other info on our SaaS. For details please refer to this document\n\nEvery attributes under MyScaleSettings can be set with prefix MYSCALE_ and is case insensitive.\n\nCreate MyScaleSettings object with parameters\n\n```python\nfrom langchain.vectorstores import MyScale, MyScaleSettings\nconfig = MyScaleSetting(host=\"<your-backend-url>\", port=8443, ...)\nindex = MyScale(embedding_function, config)\nindex.add_documents(...)\n```\n\nfrom langchain.document_loaders import TextLoader\nfrom langchain.embeddings.openai import OpenAIEmbeddings\nfrom langchain.text_splitter import CharacterTextSplitter\nfrom langchain.vectorstores import MyScale\n\nfrom langchain.document_loaders import TextLoader\n\nloader = TextLoader(\"../../modules/state_of_the_union.txt\")\ndocuments = loader.load()\ntext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)\ndocs = text_splitter.split_documents(documents)\n\nembeddings = OpenAIEmbeddings()\n\nfor d in docs:\n    d.metadata = {\"some\": \"metadata\"}\ndocsearch = MyScale.from_documents(docs, embeddings)\n\nquery = \"What did the president say about Ketanji Brown Jackson\"\ndocs = docsearch.similarity_search(query)\n\n    Inserting data...: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 42/42 [00:15<00:00,  2.66it/s]\n\nprint(docs[0].page_content)\n\n    Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections. \n    \n    Tonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service. \n    \n    One of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court. \n    \n    And I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.\n\nGet connection info and data schema‚Äã\nprint(str(docsearch))\n\nFiltering‚Äã\n\nYou can have direct access to myscale SQL where statement. You can write WHERE clause following standard SQL.\n\nNOTE: Please be aware of SQL injection, this interface must not be directly called by end-user.\n\nIf you customized your column_map under your setting, you search with filter like this:\n\nfrom langchain.document_loaders import TextLoader\nfrom langchain.vectorstores import MyScale\n\nloader = TextLoader(\"../../modules/state_of_the_union.txt\")\ndocuments = loader.load()\ntext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)\ndocs = text_splitter.split_documents(documents)\n\nembeddings = OpenAIEmbeddings()\n\nfor i, d in enumerate(docs):\n    d.metadata = {\"doc_id\": i}\n\ndocsearch = MyScale.from_documents(docs, embeddings)\n\n    Inserting data...: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 42/42 [00:15<00:00,  2.68it/s]\n\nSimilarity search with score‚Äã\n\nThe returned distance score is cosine distance. Therefore, a lower score is better.\n\nmeta = docsearch.metadata_column\noutput = docsearch.similarity_search_with_relevance_scores(\n    \"What did the president say about Ketanji Brown Jackson?\",\n    k=4,\n    where_str=f\"{meta}.doc_id<10\",\n)\nfor d, dist in output:\n    print(dist, d.metadata, d.page_content[:20] + \"...\")\n\n    0.229655921459198 {'doc_id': 0} Madam Speaker, Madam...\n    0.24506962299346924 {'doc_id': 8} And so many families...\n    0.24786919355392456 {'doc_id': 1} Groups of citizens b...\n    0.24875116348266602 {'doc_id': 6} And I‚Äôm taking robus...\n\nDeleting your data‚Äã\n\nYou can either drop the table with .drop() method or partially delete your data with .delete() method.\n\n# use directly a `where_str` to delete\ndocsearch.delete(where_str=f\"{docsearch.metadata_column}.doc_id < 5\")\nmeta = docsearch.metadata_column\noutput = docsearch.similarity_search_with_relevance_scores(\n    \"What did the president say about Ketanji Brown Jackson?\",\n    k=4,\n    where_str=f\"{meta}.doc_id<10\",\n)\nfor d, dist in output:\n    print(dist, d.metadata, d.page_content[:20] + \"...\")\n\n    0.24506962299346924 {'doc_id': 8} And so many families...\n    0.24875116348266602 {'doc_id': 6} And I‚Äôm taking robus...\n    0.26027143001556396 {'doc_id': 7} We see the unity amo...\n    0.26390212774276733 {'doc_id': 9} And unlike the $2 Tr...\n\ndocsearch.drop()\n\nPrevious\nMongoDB Atlas\nNext\nNeo4j Vector Index"
}