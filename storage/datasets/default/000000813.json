{
	"title": "Async API | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/modules/chains/how_to/async_chain",
	"html": "ModulesMoreChainsHow toAsync API\nAsync API\n\nLangChain provides async support by leveraging the asyncio library.\n\nINFO\n\nAsync support is built into all Runnable objects (the building block of LangChain Expression Language (LCEL) by default. Using LCEL is preferred to using Chains. Head to Interface for more on the Runnable interface.\n\nimport asyncio\nimport time\n\nfrom langchain.chains import LLMChain\nfrom langchain.llms import OpenAI\nfrom langchain.prompts import PromptTemplate\n\n\ndef generate_serially():\n    llm = OpenAI(temperature=0.9)\n    prompt = PromptTemplate(\n        input_variables=[\"product\"],\n        template=\"What is a good name for a company that makes {product}?\",\n    )\n    chain = LLMChain(llm=llm, prompt=prompt)\n    for _ in range(5):\n        resp = chain.run(product=\"toothpaste\")\n        print(resp)\n\n\nasync def async_generate(chain):\n    resp = await chain.arun(product=\"toothpaste\")\n    print(resp)\n\n\nasync def generate_concurrently():\n    llm = OpenAI(temperature=0.9)\n    prompt = PromptTemplate(\n        input_variables=[\"product\"],\n        template=\"What is a good name for a company that makes {product}?\",\n    )\n    chain = LLMChain(llm=llm, prompt=prompt)\n    tasks = [async_generate(chain) for _ in range(5)]\n    await asyncio.gather(*tasks)\n\n\ns = time.perf_counter()\n# If running this outside of Jupyter, use asyncio.run(generate_concurrently())\nawait generate_concurrently()\nelapsed = time.perf_counter() - s\nprint(\"\\033[1m\" + f\"Concurrent executed in {elapsed:0.2f} seconds.\" + \"\\033[0m\")\n\ns = time.perf_counter()\ngenerate_serially()\nelapsed = time.perf_counter() - s\nprint(\"\\033[1m\" + f\"Serial executed in {elapsed:0.2f} seconds.\" + \"\\033[0m\")\n\n    \n    \n    BrightSmile Toothpaste Company\n    \n    \n    BrightSmile Toothpaste Co.\n    \n    \n    BrightSmile Toothpaste\n    \n    \n    Gleaming Smile Inc.\n    \n    \n    SparkleSmile Toothpaste\n    Concurrent executed in 1.54 seconds.\n    \n    \n    BrightSmile Toothpaste Co.\n    \n    \n    MintyFresh Toothpaste Co.\n    \n    \n    SparkleSmile Toothpaste.\n    \n    \n    Pearly Whites Toothpaste Co.\n    \n    \n    BrightSmile Toothpaste.\n    Serial executed in 6.38 seconds.\n\nPrevious\nHow to\nNext\nDifferent call methods"
}