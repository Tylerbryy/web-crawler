{
	"title": "WeChat | 🦜️🔗 Langchain",
	"url": "https://python.langchain.com/docs/integrations/chat_loaders/wechat",
	"html": "ComponentsChat loadersWeChat\nWeChat\n\nThere is not yet a straightforward way to export personal WeChat messages. However if you just need no more than few hundreds of messages for model fine-tuning or few-shot examples, this notebook shows how to create your own chat loader that works on copy-pasted WeChat messages to a list of LangChain messages.\n\nHighly inspired by https://python.langchain.com/docs/integrations/chat_loaders/discord\n\nThe process has five steps:\n\nOpen your chat in the WeChat desktop app. Select messages you need by mouse-dragging or right-click. Due to restrictions, you can select up to 100 messages once a time. CMD/Ctrl + C to copy.\nCreate the chat .txt file by pasting selected messages in a file on your local computer.\nCopy the chat loader definition from below to a local file.\nInitialize the WeChatChatLoader with the file path pointed to the text file.\nCall loader.load() (or loader.lazy_load()) to perform the conversion.\n1. Create message dump​\n\nThis loader only supports .txt files in the format generated by copying messages in the app to your clipboard and pasting in a file. Below is an example.\n\nwechat_chats.txt\n女朋友 2023/09/16 2:51 PM\n天气有点凉\n\n男朋友 2023/09/16 2:51 PM\n珍簟凉风著，瑶琴寄恨生。嵇君懒书札，底物慰秋情。\n\n女朋友 2023/09/16 3:06 PM\n忙什么呢\n\n男朋友 2023/09/16 3:06 PM\n今天只干成了一件像样的事\n那就是想你\n\n女朋友 2023/09/16 3:06 PM\n[动画表情]\n\n2. Define chat loader​\n\nLangChain currently does not support\n\nimport logging\nimport re\nfrom typing import Iterator, List\n\nfrom langchain.chat_loaders import base as chat_loaders\nfrom langchain.schema import BaseMessage, HumanMessage\n\nlogger = logging.getLogger()\n\n\nclass WeChatChatLoader(chat_loaders.BaseChatLoader):\n    def __init__(self, path: str):\n        \"\"\"\n        Initialize the Discord chat loader.\n\n        Args:\n            path: Path to the exported Discord chat text file.\n        \"\"\"\n        self.path = path\n        self._message_line_regex = re.compile(\n            r\"(?P<sender>.+?) (?P<timestamp>\\d{4}/\\d{2}/\\d{2} \\d{1,2}:\\d{2} (?:AM|PM))\",  # noqa\n            # flags=re.DOTALL,\n        )\n\n    def _append_message_to_results(\n        self,\n        results: List,\n        current_sender: str,\n        current_timestamp: str,\n        current_content: List[str],\n    ):\n        content = \"\\n\".join(current_content).strip()\n        # skip non-text messages like stickers, images, etc.\n        if not re.match(r\"\\[.*\\]\", content):\n            results.append(\n                HumanMessage(\n                    content=content,\n                    additional_kwargs={\n                        \"sender\": current_sender,\n                        \"events\": [{\"message_time\": current_timestamp}],\n                    },\n                )\n            )\n        return results\n\n    def _load_single_chat_session_from_txt(\n        self, file_path: str\n    ) -> chat_loaders.ChatSession:\n        \"\"\"\n        Load a single chat session from a text file.\n\n        Args:\n            file_path: Path to the text file containing the chat messages.\n\n        Returns:\n            A `ChatSession` object containing the loaded chat messages.\n        \"\"\"\n        with open(file_path, \"r\", encoding=\"utf-8\") as file:\n            lines = file.readlines()\n\n        results: List[BaseMessage] = []\n        current_sender = None\n        current_timestamp = None\n        current_content = []\n        for line in lines:\n            if re.match(self._message_line_regex, line):\n                if current_sender and current_content:\n                    results = self._append_message_to_results(\n                        results, current_sender, current_timestamp, current_content\n                    )\n                current_sender, current_timestamp = re.match(\n                    self._message_line_regex, line\n                ).groups()\n                current_content = []\n            else:\n                current_content.append(line.strip())\n\n        if current_sender and current_content:\n            results = self._append_message_to_results(\n                results, current_sender, current_timestamp, current_content\n            )\n\n        return chat_loaders.ChatSession(messages=results)\n\n    def lazy_load(self) -> Iterator[chat_loaders.ChatSession]:\n        \"\"\"\n        Lazy load the messages from the chat file and yield them in the required format.\n\n        Yields:\n            A `ChatSession` object containing the loaded chat messages.\n        \"\"\"\n        yield self._load_single_chat_session_from_txt(self.path)\n\n2. Create loader​\n\nWe will point to the file we just wrote to disk.\n\nloader = WeChatChatLoader(\n    path=\"./wechat_chats.txt\",\n)\n\n3. Load Messages​\n\nAssuming the format is correct, the loader will convert the chats to langchain messages.\n\nfrom typing import List\n\nfrom langchain.chat_loaders.base import ChatSession\nfrom langchain.chat_loaders.utils import (\n    map_ai_messages,\n    merge_chat_runs,\n)\n\nraw_messages = loader.lazy_load()\n# Merge consecutive messages from the same sender into a single message\nmerged_messages = merge_chat_runs(raw_messages)\n# Convert messages from \"男朋友\" to AI messages\nmessages: List[ChatSession] = list(map_ai_messages(merged_messages, sender=\"男朋友\"))\n\nmessages\n\n    [{'messages': [HumanMessage(content='天气有点凉', additional_kwargs={'sender': '女朋友', 'events': [{'message_time': '2023/09/16 2:51 PM'}]}, example=False),\n       AIMessage(content='珍簟凉风著，瑶琴寄恨生。嵇君懒书札，底物慰秋情。', additional_kwargs={'sender': '男朋友', 'events': [{'message_time': '2023/09/16 2:51 PM'}]}, example=False),\n       HumanMessage(content='忙什么呢', additional_kwargs={'sender': '女朋友', 'events': [{'message_time': '2023/09/16 3:06 PM'}]}, example=False),\n       AIMessage(content='今天只干成了一件像样的事\\n那就是想你', additional_kwargs={'sender': '男朋友', 'events': [{'message_time': '2023/09/16 3:06 PM'}]}, example=False)]}]\n\nNext Steps​\n\nYou can then use these messages how you see fit, such as fine-tuning a model, few-shot example selection, or directly make predictions for the next message\n\nfrom langchain.chat_models import ChatOpenAI\n\nllm = ChatOpenAI()\n\nfor chunk in llm.stream(messages[0][\"messages\"]):\n    print(chunk.content, end=\"\", flush=True)\n\nPrevious\nTwitter (via Apify)\nNext\nWhatsApp"
}