{
	"title": "Slack | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/integrations/chat_loaders/slack",
	"html": "ComponentsChat loadersSlack\nSlack\n\nThis notebook shows how to use the Slack chat loader. This class helps map exported slack conversations to LangChain chat messages.\n\nThe process has three steps:\n\nExport the desired conversation thread by following the instructions here.\nCreate the SlackChatLoader with the file path pointed to the json file or directory of JSON files\nCall loader.load() (or loader.lazy_load()) to perform the conversion. Optionally use merge_chat_runs to combine message from the same sender in sequence, and/or map_ai_messages to convert messages from the specified sender to the \"AIMessage\" class.\n1. Create message dump‚Äã\n\nCurrently (2023/08/23) this loader best supports a zip directory of files in the format generated by exporting your a direct message conversation from Slack. Follow up-to-date instructions from slack on how to do so.\n\nWe have an example in the LangChain repo.\n\nimport requests\n\npermalink = \"https://raw.githubusercontent.com/langchain-ai/langchain/342087bdfa3ac31d622385d0f2d09cf5e06c8db3/libs/langchain/tests/integration_tests/examples/slack_export.zip\"\nresponse = requests.get(permalink)\nwith open(\"slack_dump.zip\", \"wb\") as f:\n    f.write(response.content)\n\n2. Create the Chat Loader‚Äã\n\nProvide the loader with the file path to the zip directory. You can optionally specify the user id that maps to an ai message as well an configure whether to merge message runs.\n\nfrom langchain.chat_loaders.slack import SlackChatLoader\n\nloader = SlackChatLoader(\n    path=\"slack_dump.zip\",\n)\n\n3. Load messages‚Äã\n\nThe load() (or lazy_load) methods return a list of \"ChatSessions\" that currently just contain a list of messages per loaded conversation.\n\nfrom typing import List\n\nfrom langchain.chat_loaders.base import ChatSession\nfrom langchain.chat_loaders.utils import (\n    map_ai_messages,\n    merge_chat_runs,\n)\n\nraw_messages = loader.lazy_load()\n# Merge consecutive messages from the same sender into a single message\nmerged_messages = merge_chat_runs(raw_messages)\n# Convert messages from \"U0500003428\" to AI messages\nmessages: List[ChatSession] = list(\n    map_ai_messages(merged_messages, sender=\"U0500003428\")\n)\n\nNext Steps‚Äã\n\nYou can then use these messages how you see fit, such as fine-tuning a model, few-shot example selection, or directly make predictions for the next message.\n\nfrom langchain.chat_models import ChatOpenAI\n\nllm = ChatOpenAI()\n\nfor chunk in llm.stream(messages[1][\"messages\"]):\n    print(chunk.content, end=\"\", flush=True)\n\n    Hi, \n    \n    I hope you're doing well. I wanted to reach out and ask if you'd be available to meet up for coffee sometime next week. I'd love to catch up and hear about what's been going on in your life. Let me know if you're interested and we can find a time that works for both of us. \n    \n    Looking forward to hearing from you!\n    \n    Best, [Your Name]\n\nPrevious\nLangSmith LLM Runs\nNext\nTelegram"
}