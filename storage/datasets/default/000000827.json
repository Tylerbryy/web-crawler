{
	"title": "Custom MRKL agent | 🦜️🔗 Langchain",
	"url": "https://python.langchain.com/docs/modules/agents/how_to/custom_mrkl_agent",
	"html": "ModulesAgentsHow-toCustom MRKL agent\nCustom MRKL agent\n\nThis notebook goes through how to create your own custom MRKL agent.\n\nA MRKL agent consists of three parts:\n\nTools: The tools the agent has available to use.\nLLMChain: The LLMChain that produces the text that is parsed in a certain way to determine which action to take.\nThe agent class itself: this parses the output of the LLMChain to determine which action to take.\n\nIn this notebook we walk through how to create a custom MRKL agent by creating a custom LLMChain.\n\nCustom LLMChain​\n\nThe first way to create a custom agent is to use an existing Agent class, but use a custom LLMChain. This is the simplest way to create a custom Agent. It is highly recommended that you work with the ZeroShotAgent, as at the moment that is by far the most generalizable one.\n\nMost of the work in creating the custom LLMChain comes down to the prompt. Because we are using an existing agent class to parse the output, it is very important that the prompt say to produce text in that format. Additionally, we currently require an agent_scratchpad input variable to put notes on previous actions and observations. This should almost always be the final part of the prompt. However, besides those instructions, you can customize the prompt as you wish.\n\nTo ensure that the prompt contains the appropriate instructions, we will utilize a helper method on that class. The helper method for the ZeroShotAgent takes the following arguments:\n\ntools: List of tools the agent will have access to, used to format the prompt.\nprefix: String to put before the list of tools.\nsuffix: String to put after the list of tools.\ninput_variables: List of input variables the final prompt will expect.\n\nFor this exercise, we will give our agent access to Google Search, and we will customize it in that we will have it answer as a pirate.\n\nfrom langchain.agents import AgentExecutor, Tool, ZeroShotAgent\nfrom langchain.chains import LLMChain\nfrom langchain.llms import OpenAI\nfrom langchain.utilities import SerpAPIWrapper\n\nsearch = SerpAPIWrapper()\ntools = [\n    Tool(\n        name=\"Search\",\n        func=search.run,\n        description=\"useful for when you need to answer questions about current events\",\n    )\n]\n\nprefix = \"\"\"Answer the following questions as best you can, but speaking as a pirate might speak. You have access to the following tools:\"\"\"\nsuffix = \"\"\"Begin! Remember to speak as a pirate when giving your final answer. Use lots of \"Args\"\n\nQuestion: {input}\n{agent_scratchpad}\"\"\"\n\nprompt = ZeroShotAgent.create_prompt(\n    tools, prefix=prefix, suffix=suffix, input_variables=[\"input\", \"agent_scratchpad\"]\n)\n\n\nIn case we are curious, we can now take a look at the final prompt template to see what it looks like when its all put together.\n\nprint(prompt.template)\n\n    Answer the following questions as best you can, but speaking as a pirate might speak. You have access to the following tools:\n    \n    Search: useful for when you need to answer questions about current events\n    \n    Use the following format:\n    \n    Question: the input question you must answer\n    Thought: you should always think about what to do\n    Action: the action to take, should be one of [Search]\n    Action Input: the input to the action\n    Observation: the result of the action\n    ... (this Thought/Action/Action Input/Observation can repeat N times)\n    Thought: I now know the final answer\n    Final Answer: the final answer to the original input question\n    \n    Begin! Remember to speak as a pirate when giving your final answer. Use lots of \"Args\"\n    \n    Question: {input}\n    {agent_scratchpad}\n\n\nNote that we are able to feed agents a self-defined prompt template, i.e. not restricted to the prompt generated by the create_prompt function, assuming it meets the agent's requirements.\n\nFor example, for ZeroShotAgent, we will need to ensure that it meets the following requirements. There should a string starting with \"Action:\" and a following string starting with \"Action Input:\", and both should be separated by a newline.\n\nllm_chain = LLMChain(llm=OpenAI(temperature=0), prompt=prompt)\n\ntool_names = [tool.name for tool in tools]\nagent = ZeroShotAgent(llm_chain=llm_chain, allowed_tools=tool_names)\n\nagent_executor = AgentExecutor.from_agent_and_tools(\n    agent=agent, tools=tools, verbose=True\n)\n\nagent_executor.run(\"How many people live in canada as of 2023?\")\n\n    \n    \n    > Entering new AgentExecutor chain...\n    Thought: I need to find out the population of Canada\n    Action: Search\n    Action Input: Population of Canada 2023\n    Observation: The current population of Canada is 38,661,927 as of Sunday, April 16, 2023, based on Worldometer elaboration of the latest United Nations data.\n    Thought: I now know the final answer\n    Final Answer: Arrr, Canada be havin' 38,661,927 people livin' there as of 2023!\n    \n    > Finished chain.\n\n\n\n\n\n    \"Arrr, Canada be havin' 38,661,927 people livin' there as of 2023!\"\n\nMultiple inputs​\n\nAgents can also work with prompts that require multiple inputs.\n\nprefix = \"\"\"Answer the following questions as best you can. You have access to the following tools:\"\"\"\nsuffix = \"\"\"When answering, you MUST speak in the following language: {language}.\n\nQuestion: {input}\n{agent_scratchpad}\"\"\"\n\nprompt = ZeroShotAgent.create_prompt(\n    tools,\n    prefix=prefix,\n    suffix=suffix,\n    input_variables=[\"input\", \"language\", \"agent_scratchpad\"],\n)\n\nllm_chain = LLMChain(llm=OpenAI(temperature=0), prompt=prompt)\n\nagent = ZeroShotAgent(llm_chain=llm_chain, tools=tools)\n\nagent_executor = AgentExecutor.from_agent_and_tools(\n    agent=agent, tools=tools, verbose=True\n)\n\nagent_executor.run(\n    input=\"How many people live in canada as of 2023?\", language=\"italian\"\n)\n\n    \n    \n    > Entering new AgentExecutor chain...\n    Thought: I should look for recent population estimates.\n    Action: Search\n    Action Input: Canada population 2023\n    Observation: 39,566,248\n    Thought: I should double check this number.\n    Action: Search\n    Action Input: Canada population estimates 2023\n    Observation: Canada's population was estimated at 39,566,248 on January 1, 2023, after a record population growth of 1,050,110 people from January 1, 2022, to January 1, 2023.\n    Thought: I now know the final answer.\n    Final Answer: La popolazione del Canada è stata stimata a 39.566.248 il 1° gennaio 2023, dopo un record di crescita demografica di 1.050.110 persone dal 1° gennaio 2022 al 1° gennaio 2023.\n    \n    > Finished chain.\n\n\n\n\n\n    'La popolazione del Canada è stata stimata a 39.566.248 il 1° gennaio 2023, dopo un record di crescita demografica di 1.050.110 persone dal 1° gennaio 2022 al 1° gennaio 2023.'\n\nPrevious\nCustom LLM Chat Agent\nNext\nCustom multi-action agent"
}