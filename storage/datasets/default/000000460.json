{
	"title": "Redis | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/integrations/retrievers/self_query/redis_self_query",
	"html": "ComponentsRetrieversSelf-querying retrieverRedis\nRedis\n\nRedis is an open-source key-value store that can be used as a cache, message broker, database, vector database and more.\n\nIn the notebook, we'll demo the SelfQueryRetriever wrapped around a Redis vector store.\n\nCreating a Redis vector store‚Äã\n\nFirst we'll want to create a Redis vector store and seed it with some data. We've created a small demo set of documents that contain summaries of movies.\n\nNote: The self-query retriever requires you to have lark installed (pip install lark) along with integration-specific requirements.\n\n# !pip install redis redisvl openai tiktoken lark\n\n\nWe want to use OpenAIEmbeddings so we have to get the OpenAI API Key.\n\nimport getpass\nimport os\n\nos.environ[\"OPENAI_API_KEY\"] = getpass.getpass(\"OpenAI API Key:\")\n\nfrom langchain.embeddings.openai import OpenAIEmbeddings\nfrom langchain.schema import Document\nfrom langchain.vectorstores import Redis\n\nembeddings = OpenAIEmbeddings()\n\ndocs = [\n    Document(\n        page_content=\"A bunch of scientists bring back dinosaurs and mayhem breaks loose\",\n        metadata={\n            \"year\": 1993,\n            \"rating\": 7.7,\n            \"director\": \"Steven Spielberg\",\n            \"genre\": \"science fiction\",\n        },\n    ),\n    Document(\n        page_content=\"Leo DiCaprio gets lost in a dream within a dream within a dream within a ...\",\n        metadata={\n            \"year\": 2010,\n            \"director\": \"Christopher Nolan\",\n            \"genre\": \"science fiction\",\n            \"rating\": 8.2,\n        },\n    ),\n    Document(\n        page_content=\"A psychologist / detective gets lost in a series of dreams within dreams within dreams and Inception reused the idea\",\n        metadata={\n            \"year\": 2006,\n            \"director\": \"Satoshi Kon\",\n            \"genre\": \"science fiction\",\n            \"rating\": 8.6,\n        },\n    ),\n    Document(\n        page_content=\"A bunch of normal-sized women are supremely wholesome and some men pine after them\",\n        metadata={\n            \"year\": 2019,\n            \"director\": \"Greta Gerwig\",\n            \"genre\": \"drama\",\n            \"rating\": 8.3,\n        },\n    ),\n    Document(\n        page_content=\"Toys come alive and have a blast doing so\",\n        metadata={\n            \"year\": 1995,\n            \"director\": \"John Lasseter\",\n            \"genre\": \"animated\",\n            \"rating\": 9.1,\n        },\n    ),\n    Document(\n        page_content=\"Three men walk into the Zone, three men walk out of the Zone\",\n        metadata={\n            \"year\": 1979,\n            \"rating\": 9.9,\n            \"director\": \"Andrei Tarkovsky\",\n            \"genre\": \"science fiction\",\n        },\n    ),\n]\n\nindex_schema = {\n    \"tag\": [{\"name\": \"genre\"}],\n    \"text\": [{\"name\": \"director\"}],\n    \"numeric\": [{\"name\": \"year\"}, {\"name\": \"rating\"}],\n}\n\nvectorstore = Redis.from_documents(\n    docs,\n    embeddings,\n    redis_url=\"redis://localhost:6379\",\n    index_name=\"movie_reviews\",\n    index_schema=index_schema,\n)\n\n    `index_schema` does not match generated metadata schema.\n    If you meant to manually override the schema, please ignore this message.\n    index_schema: {'tag': [{'name': 'genre'}], 'text': [{'name': 'director'}], 'numeric': [{'name': 'year'}, {'name': 'rating'}]}\n    generated_schema: {'text': [{'name': 'director'}, {'name': 'genre'}], 'numeric': [{'name': 'year'}, {'name': 'rating'}], 'tag': []}\n    \n\nCreating our self-querying retriever‚Äã\n\nNow we can instantiate our retriever. To do this we'll need to provide some information upfront about the metadata fields that our documents support and a short description of the document contents.\n\nfrom langchain.chains.query_constructor.base import AttributeInfo\nfrom langchain.llms import OpenAI\nfrom langchain.retrievers.self_query.base import SelfQueryRetriever\n\nmetadata_field_info = [\n    AttributeInfo(\n        name=\"genre\",\n        description=\"The genre of the movie\",\n        type=\"string or list[string]\",\n    ),\n    AttributeInfo(\n        name=\"year\",\n        description=\"The year the movie was released\",\n        type=\"integer\",\n    ),\n    AttributeInfo(\n        name=\"director\",\n        description=\"The name of the movie director\",\n        type=\"string\",\n    ),\n    AttributeInfo(\n        name=\"rating\", description=\"A 1-10 rating for the movie\", type=\"float\"\n    ),\n]\ndocument_content_description = \"Brief summary of a movie\"\n\nllm = OpenAI(temperature=0)\nretriever = SelfQueryRetriever.from_llm(\n    llm, vectorstore, document_content_description, metadata_field_info, verbose=True\n)\n\nTesting it out‚Äã\n\nAnd now we can try actually using our retriever!\n\n# This example only specifies a relevant query\nretriever.get_relevant_documents(\"What are some movies about dinosaurs\")\n\n    /Users/bagatur/langchain/libs/langchain/langchain/chains/llm.py:278: UserWarning: The predict_and_parse method is deprecated, instead pass an output parser directly to LLMChain.\n      warnings.warn(\n\n\n    query='dinosaur' filter=None limit=None\n\n\n\n\n\n    [Document(page_content='A bunch of scientists bring back dinosaurs and mayhem breaks loose', metadata={'id': 'doc:movie_reviews:7b5481d753bc4135851b66fa61def7fb', 'director': 'Steven Spielberg', 'genre': 'science fiction', 'year': '1993', 'rating': '7.7'}),\n     Document(page_content='Toys come alive and have a blast doing so', metadata={'id': 'doc:movie_reviews:9e4e84daa0374941a6aa4274e9bbb607', 'director': 'John Lasseter', 'genre': 'animated', 'year': '1995', 'rating': '9.1'}),\n     Document(page_content='Three men walk into the Zone, three men walk out of the Zone', metadata={'id': 'doc:movie_reviews:2cc66f38bfbd438eb3a045d90a1a4088', 'director': 'Andrei Tarkovsky', 'genre': 'science fiction', 'year': '1979', 'rating': '9.9'}),\n     Document(page_content='A psychologist / detective gets lost in a series of dreams within dreams within dreams and Inception reused the idea', metadata={'id': 'doc:movie_reviews:edf567b1d5334e02b2a4c692d853c80c', 'director': 'Satoshi Kon', 'genre': 'science fiction', 'year': '2006', 'rating': '8.6'})]\n\n# This example only specifies a filter\nretriever.get_relevant_documents(\"I want to watch a movie rated higher than 8.4\")\n\n    query=' ' filter=Comparison(comparator=<Comparator.GT: 'gt'>, attribute='rating', value=8.4) limit=None\n\n\n\n\n\n    [Document(page_content='Toys come alive and have a blast doing so', metadata={'id': 'doc:movie_reviews:9e4e84daa0374941a6aa4274e9bbb607', 'director': 'John Lasseter', 'genre': 'animated', 'year': '1995', 'rating': '9.1'}),\n     Document(page_content='Three men walk into the Zone, three men walk out of the Zone', metadata={'id': 'doc:movie_reviews:2cc66f38bfbd438eb3a045d90a1a4088', 'director': 'Andrei Tarkovsky', 'genre': 'science fiction', 'year': '1979', 'rating': '9.9'}),\n     Document(page_content='A psychologist / detective gets lost in a series of dreams within dreams within dreams and Inception reused the idea', metadata={'id': 'doc:movie_reviews:edf567b1d5334e02b2a4c692d853c80c', 'director': 'Satoshi Kon', 'genre': 'science fiction', 'year': '2006', 'rating': '8.6'})]\n\n# This example specifies a query and a filter\nretriever.get_relevant_documents(\"Has Greta Gerwig directed any movies about women\")\n\n    query='women' filter=Comparison(comparator=<Comparator.EQ: 'eq'>, attribute='director', value='Greta Gerwig') limit=None\n\n\n\n\n\n    [Document(page_content='A bunch of normal-sized women are supremely wholesome and some men pine after them', metadata={'id': 'doc:movie_reviews:bb899807b93c442083fd45e75a4779d5', 'director': 'Greta Gerwig', 'genre': 'drama', 'year': '2019', 'rating': '8.3'})]\n\n# This example specifies a composite filter\nretriever.get_relevant_documents(\n    \"What's a highly rated (above 8.5) science fiction film?\"\n)\n\n    query=' ' filter=Operation(operator=<Operator.AND: 'and'>, arguments=[Comparison(comparator=<Comparator.GTE: 'gte'>, attribute='rating', value=8.5), Comparison(comparator=<Comparator.CONTAIN: 'contain'>, attribute='genre', value='science fiction')]) limit=None\n\n\n\n\n\n    [Document(page_content='Three men walk into the Zone, three men walk out of the Zone', metadata={'id': 'doc:movie_reviews:2cc66f38bfbd438eb3a045d90a1a4088', 'director': 'Andrei Tarkovsky', 'genre': 'science fiction', 'year': '1979', 'rating': '9.9'}),\n     Document(page_content='A psychologist / detective gets lost in a series of dreams within dreams within dreams and Inception reused the idea', metadata={'id': 'doc:movie_reviews:edf567b1d5334e02b2a4c692d853c80c', 'director': 'Satoshi Kon', 'genre': 'science fiction', 'year': '2006', 'rating': '8.6'})]\n\n# This example specifies a query and composite filter\nretriever.get_relevant_documents(\n    \"What's a movie after 1990 but before 2005 that's all about toys, and preferably is animated\"\n)\n\n    query='toys' filter=Operation(operator=<Operator.AND: 'and'>, arguments=[Comparison(comparator=<Comparator.GT: 'gt'>, attribute='year', value=1990), Comparison(comparator=<Comparator.LT: 'lt'>, attribute='year', value=2005), Comparison(comparator=<Comparator.CONTAIN: 'contain'>, attribute='genre', value='animated')]) limit=None\n\n\n\n\n\n    [Document(page_content='Toys come alive and have a blast doing so', metadata={'id': 'doc:movie_reviews:9e4e84daa0374941a6aa4274e9bbb607', 'director': 'John Lasseter', 'genre': 'animated', 'year': '1995', 'rating': '9.1'})]\n\nFilter k‚Äã\n\nWe can also use the self query retriever to specify k: the number of documents to fetch.\n\nWe can do this by passing enable_limit=True to the constructor.\n\nretriever = SelfQueryRetriever.from_llm(\n    llm,\n    vectorstore,\n    document_content_description,\n    metadata_field_info,\n    enable_limit=True,\n    verbose=True,\n)\n\n# This example only specifies a relevant query\nretriever.get_relevant_documents(\"what are two movies about dinosaurs\")\n\n    query='dinosaur' filter=None limit=2\n\n\n\n\n\n    [Document(page_content='A bunch of scientists bring back dinosaurs and mayhem breaks loose', metadata={'id': 'doc:movie_reviews:7b5481d753bc4135851b66fa61def7fb', 'director': 'Steven Spielberg', 'genre': 'science fiction', 'year': '1993', 'rating': '7.7'}),\n     Document(page_content='Toys come alive and have a blast doing so', metadata={'id': 'doc:movie_reviews:9e4e84daa0374941a6aa4274e9bbb607', 'director': 'John Lasseter', 'genre': 'animated', 'year': '1995', 'rating': '9.1'})]\n\nPrevious\nQdrant\nNext\nSupabase"
}