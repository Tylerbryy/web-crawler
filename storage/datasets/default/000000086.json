{
	"title": "rag-mongo | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/templates/rag-mongo",
	"html": "Templatesrag-mongo\nrag-mongo\n\nThis template performs RAG using MongoDB and OpenAI.\n\nEnvironment Setup‚Äã\n\nYou should export two environment variables, one being your MongoDB URI, the other being your OpenAI API KEY. If you do not have a MongoDB URI, see the Setup Mongo section at the bottom for instructions on how to do so.\n\nexport MONGO_URI=...\nexport OPENAI_API_KEY=...\n\nUsage‚Äã\n\nTo use this package, you should first have the LangChain CLI installed:\n\npip install -U langchain-cli\n\n\nTo create a new LangChain project and install this as the only package, you can do:\n\nlangchain app new my-app --package rag-mongo\n\n\nIf you want to add this to an existing project, you can just run:\n\nlangchain app add rag-mongo\n\n\nAnd add the following code to your server.py file:\n\nfrom rag_mongo import chain as rag_mongo_chain\n\nadd_routes(app, rag_mongo_chain, path=\"/rag-mongo\")\n\n\nIf you want to set up an ingestion pipeline, you can add the following code to your server.py file:\n\nfrom rag_mongo import ingest as rag_mongo_ingest\n\nadd_routes(app, rag_mongo_ingest, path=\"/rag-mongo-ingest\")\n\n\n(Optional) Let's now configure LangSmith. LangSmith will help us trace, monitor and debug LangChain applications. LangSmith is currently in private beta, you can sign up here. If you don't have access, you can skip this section\n\nexport LANGCHAIN_TRACING_V2=true\nexport LANGCHAIN_API_KEY=<your-api-key>\nexport LANGCHAIN_PROJECT=<your-project>  # if not specified, defaults to \"default\"\n\n\nIf you DO NOT already have a Mongo Search Index you want to connect to, see MongoDB Setup section below before proceeding.\n\nIf you DO have a MongoDB Search index you want to connect to, edit the connection details in rag_mongo/chain.py\n\nIf you are inside this directory, then you can spin up a LangServe instance directly by:\n\nlangchain serve\n\n\nThis will start the FastAPI app with a server is running locally at http://localhost:8000\n\nWe can see all templates at http://127.0.0.1:8000/docs We can access the playground at http://127.0.0.1:8000/rag-mongo/playground\n\nWe can access the template from code with:\n\nfrom langserve.client import RemoteRunnable\n\nrunnable = RemoteRunnable(\"http://localhost:8000/rag-mongo\")\n\n\nFor additional context, please refer to this notebook.\n\nMongoDB Setup‚Äã\n\nUse this step if you need to setup your MongoDB account and ingest data. We will first follow the standard MongoDB Atlas setup instructions here.\n\nCreate an account (if not already done)\nCreate a new project (if not already done)\nLocate your MongoDB URI.\n\nThis can be done by going to the deployement overview page and connecting to you database\n\nWe then look at the drivers available\n\nAmong which we will see our URI listed\n\nLet's then set that as an environment variable locally:\n\nexport MONGO_URI=...\n\nLet's also set an environment variable for OpenAI (which we will use as an LLM)\nexport OPENAI_API_KEY=...\n\nLet's now ingest some data! We can do that by moving into this directory and running the code in ingest.py, eg:\npython ingest.py\n\n\nNote that you can (and should!) change this to ingest data of your choice\n\nWe now need to set up a vector index on our data.\n\nWe can first connect to the cluster where our database lives\n\nWe can then navigate to where all our collections are listed\n\nWe can then find the collection we want and look at the search indexes for that collection\n\nThat should likely be empty, and we want to create a new one:\n\nWe will use the JSON editor to create it\n\nAnd we will paste the following JSON in:\n\n {\n   \"mappings\": {\n     \"dynamic\": true,\n     \"fields\": {\n       \"embedding\": {\n         \"dimensions\": 1536,\n         \"similarity\": \"cosine\",\n         \"type\": \"knnVector\"\n       }\n     }\n   }\n }\n\n\nFrom there, hit \"Next\" and then \"Create Search Index\". It will take a little bit but you should then have an index over your data!\n\nPrevious\nrag-momento-vector-index\nNext\nRAG with Mulitple Indexes (Fusion)"
}