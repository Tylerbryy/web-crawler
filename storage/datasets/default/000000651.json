{
	"title": "Comet | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/integrations/providers/comet_tracking",
	"html": "ProvidersMoreComet\nComet\n\nIn this guide we will demonstrate how to track your Langchain Experiments, Evaluation Metrics, and LLM Sessions with Comet.\n\nExample Project: Comet with LangChain\n\nInstall Comet and Dependencies‚Äã\n{sys.executable} -m spacy download en_core_web_sm\n\nInitialize Comet and Set your Credentials‚Äã\n\nYou can grab your Comet API Key here or click the link after initializing Comet\n\nimport comet_ml\n\ncomet_ml.init(project_name=\"comet-example-langchain\")\n\nSet OpenAI and SerpAPI credentials‚Äã\n\nYou will need an OpenAI API Key and a SerpAPI API Key to run the following examples\n\nimport os\n\nos.environ[\"OPENAI_API_KEY\"] = \"...\"\n# os.environ[\"OPENAI_ORGANIZATION\"] = \"...\"\nos.environ[\"SERPAPI_API_KEY\"] = \"...\"\n\nScenario 1: Using just an LLM‚Äã\nfrom langchain.callbacks import CometCallbackHandler, StdOutCallbackHandler\nfrom langchain.llms import OpenAI\n\ncomet_callback = CometCallbackHandler(\n    project_name=\"comet-example-langchain\",\n    complexity_metrics=True,\n    stream_logs=True,\n    tags=[\"llm\"],\n    visualizations=[\"dep\"],\n)\ncallbacks = [StdOutCallbackHandler(), comet_callback]\nllm = OpenAI(temperature=0.9, callbacks=callbacks, verbose=True)\n\nllm_result = llm.generate([\"Tell me a joke\", \"Tell me a poem\", \"Tell me a fact\"] * 3)\nprint(\"LLM result\", llm_result)\ncomet_callback.flush_tracker(llm, finish=True)\n\nScenario 2: Using an LLM in a Chain‚Äã\nfrom langchain.callbacks import CometCallbackHandler, StdOutCallbackHandler\nfrom langchain.chains import LLMChain\nfrom langchain.llms import OpenAI\nfrom langchain.prompts import PromptTemplate\n\ncomet_callback = CometCallbackHandler(\n    complexity_metrics=True,\n    project_name=\"comet-example-langchain\",\n    stream_logs=True,\n    tags=[\"synopsis-chain\"],\n)\ncallbacks = [StdOutCallbackHandler(), comet_callback]\nllm = OpenAI(temperature=0.9, callbacks=callbacks)\n\ntemplate = \"\"\"You are a playwright. Given the title of play, it is your job to write a synopsis for that title.\nTitle: {title}\nPlaywright: This is a synopsis for the above play:\"\"\"\nprompt_template = PromptTemplate(input_variables=[\"title\"], template=template)\nsynopsis_chain = LLMChain(llm=llm, prompt=prompt_template, callbacks=callbacks)\n\ntest_prompts = [{\"title\": \"Documentary about Bigfoot in Paris\"}]\nprint(synopsis_chain.apply(test_prompts))\ncomet_callback.flush_tracker(synopsis_chain, finish=True)\n\nScenario 3: Using An Agent with Tools‚Äã\nfrom langchain.agents import initialize_agent, load_tools\nfrom langchain.callbacks import CometCallbackHandler, StdOutCallbackHandler\nfrom langchain.llms import OpenAI\n\ncomet_callback = CometCallbackHandler(\n    project_name=\"comet-example-langchain\",\n    complexity_metrics=True,\n    stream_logs=True,\n    tags=[\"agent\"],\n)\ncallbacks = [StdOutCallbackHandler(), comet_callback]\nllm = OpenAI(temperature=0.9, callbacks=callbacks)\n\ntools = load_tools([\"serpapi\", \"llm-math\"], llm=llm, callbacks=callbacks)\nagent = initialize_agent(\n    tools,\n    llm,\n    agent=\"zero-shot-react-description\",\n    callbacks=callbacks,\n    verbose=True,\n)\nagent.run(\n    \"Who is Leo DiCaprio's girlfriend? What is her current age raised to the 0.43 power?\"\n)\ncomet_callback.flush_tracker(agent, finish=True)\n\nScenario 4: Using Custom Evaluation Metrics‚Äã\n\nThe CometCallbackManager also allows you to define and use Custom Evaluation Metrics to assess generated outputs from your model. Let's take a look at how this works.\n\nIn the snippet below, we will use the ROUGE metric to evaluate the quality of a generated summary of an input prompt.\n\n%pip install rouge-score\n\nfrom langchain.callbacks import CometCallbackHandler, StdOutCallbackHandler\nfrom langchain.chains import LLMChain\nfrom langchain.llms import OpenAI\nfrom langchain.prompts import PromptTemplate\nfrom rouge_score import rouge_scorer\n\n\nclass Rouge:\n    def __init__(self, reference):\n        self.reference = reference\n        self.scorer = rouge_scorer.RougeScorer([\"rougeLsum\"], use_stemmer=True)\n\n    def compute_metric(self, generation, prompt_idx, gen_idx):\n        prediction = generation.text\n        results = self.scorer.score(target=self.reference, prediction=prediction)\n\n        return {\n            \"rougeLsum_score\": results[\"rougeLsum\"].fmeasure,\n            \"reference\": self.reference,\n        }\n\n\nreference = \"\"\"\nThe tower is 324 metres (1,063 ft) tall, about the same height as an 81-storey building.\nIt was the first structure to reach a height of 300 metres.\n\nIt is now taller than the Chrysler Building in New York City by 5.2 metres (17 ft)\nExcluding transmitters, the Eiffel Tower is the second tallest free-standing structure in France .\n\"\"\"\nrouge_score = Rouge(reference=reference)\n\ntemplate = \"\"\"Given the following article, it is your job to write a summary.\nArticle:\n{article}\nSummary: This is the summary for the above article:\"\"\"\nprompt_template = PromptTemplate(input_variables=[\"article\"], template=template)\n\ncomet_callback = CometCallbackHandler(\n    project_name=\"comet-example-langchain\",\n    complexity_metrics=False,\n    stream_logs=True,\n    tags=[\"custom_metrics\"],\n    custom_metrics=rouge_score.compute_metric,\n)\ncallbacks = [StdOutCallbackHandler(), comet_callback]\nllm = OpenAI(temperature=0.9)\n\nsynopsis_chain = LLMChain(llm=llm, prompt=prompt_template)\n\ntest_prompts = [\n    {\n        \"article\": \"\"\"\n                 The tower is 324 metres (1,063 ft) tall, about the same height as\n                 an 81-storey building, and the tallest structure in Paris. Its base is square,\n                 measuring 125 metres (410 ft) on each side.\n                 During its construction, the Eiffel Tower surpassed the\n                 Washington Monument to become the tallest man-made structure in the world,\n                 a title it held for 41 years until the Chrysler Building\n                 in New York City was finished in 1930.\n\n                 It was the first structure to reach a height of 300 metres.\n                 Due to the addition of a broadcasting aerial at the top of the tower in 1957,\n                 it is now taller than the Chrysler Building by 5.2 metres (17 ft).\n\n                 Excluding transmitters, the Eiffel Tower is the second tallest\n                 free-standing structure in France after the Millau Viaduct.\n                 \"\"\"\n    }\n]\nprint(synopsis_chain.apply(test_prompts, callbacks=callbacks))\ncomet_callback.flush_tracker(synopsis_chain, finish=True)\n\nPrevious\nCollege Confidential\nNext\nConfident AI"
}