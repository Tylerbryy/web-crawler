{
	"title": "MongoDB Atlas | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/integrations/vectorstores/mongodb_atlas",
	"html": "ComponentsVector storesMongoDB Atlas\nMongoDB Atlas\n\nMongoDB Atlas is a fully-managed cloud database available in AWS, Azure, and GCP. It now has support for native Vector Search on your MongoDB document data.\n\nThis notebook shows how to use MongoDB Atlas Vector Search to store your embeddings in MongoDB documents, create a vector search index, and perform KNN search with an approximate nearest neighbor algorithm (Hierarchical Navigable Small Worlds). It uses the $vectorSearch MQL Stage.\n\nTo use MongoDB Atlas, you must first deploy a cluster. We have a Forever-Free tier of clusters available. To get started head over to Atlas here: quick start.\n\nNote:\n\nThis feature is in Public Preview and available for evaluation purposes, to validate functionality, and to gather feedback from public preview users. It is not recommended for production deployments as we may introduce breaking changes.\nThe langchain version 0.0.35 (release notes) introduces the support for $vectorSearch MQL stage, which is available with MongoDB Atlas 6.0.11 and 7.0.2. Users utilizing earlier versions of MongoDB Atlas need to pin their LangChain version to <=0.0.304\n\nIn the notebook we will demonstrate how to perform Retrieval Augmented Generation (RAG) using MongoDB Atlas, OpenAI and Langchain. We will be performing Similarity Search and Question Answering over the PDF document for GPT 4 technical report that came out in March 2023 and hence is not part of the OpenAI's Large Language Model(LLM)'s parametric memory, which had a knowledge cutoff of September 2021.\n\nWe want to use OpenAIEmbeddings so we need to set up our OpenAI API Key.\n\nos.environ[\"OPENAI_API_KEY\"] = getpass.getpass(\"OpenAI API Key:\")\n\n\nNow we will setup the environment variables for the MongoDB Atlas cluster\n\npip install langchain pypdf pymongo openai tiktoken\n\nimport getpass\n\nMONGODB_ATLAS_CLUSTER_URI = getpass.getpass(\"MongoDB Atlas Cluster URI:\")\n\nfrom pymongo import MongoClient\n\n# initialize MongoDB python client\nclient = MongoClient(MONGODB_ATLAS_CLUSTER_URI)\n\nDB_NAME = \"langchain_db\"\nCOLLECTION_NAME = \"test\"\nATLAS_VECTOR_SEARCH_INDEX_NAME = \"default\"\n\nMONGODB_COLLECTION = client[DB_NAME][COLLECTION_NAME]\n\n# Create Vector Search Index\n\n\nNow, let's create a vector search index on your cluster. In the below example, embedding is the name of the field that contains the embedding vector. Please refer to the documentation to get more details on how to define an Atlas Vector Search index. You can name the index {ATLAS_VECTOR_SEARCH_INDEX_NAME} and create the index on the namespace {DB_NAME}.{COLLECTION_NAME}. Finally, write the following definition in the JSON editor on MongoDB Atlas:\n\n{\n  \"mappings\": {\n    \"dynamic\": true,\n    \"fields\": {\n      \"embedding\": {\n        \"dimensions\": 1536,\n        \"similarity\": \"cosine\",\n        \"type\": \"knnVector\"\n      }\n    }\n  }\n}\n\nInsert Data\nfrom langchain.document_loaders import PyPDFLoader\n\n# Load the PDF\nloader = PyPDFLoader(\"https://arxiv.org/pdf/2303.08774.pdf\")\ndata = loader.load()\n\nfrom langchain.text_splitter import RecursiveCharacterTextSplitter\n\ntext_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=150)\ndocs = text_splitter.split_documents(data)\n\nprint(docs[0])\n\nfrom langchain.embeddings import OpenAIEmbeddings\nfrom langchain.vectorstores import MongoDBAtlasVectorSearch\n\n# insert the documents in MongoDB Atlas with their embedding\nvector_search = MongoDBAtlasVectorSearch.from_documents(\n    documents=docs,\n    embedding=OpenAIEmbeddings(disallowed_special=()),\n    collection=MONGODB_COLLECTION,\n    index_name=ATLAS_VECTOR_SEARCH_INDEX_NAME,\n)\n\n# Perform a similarity search between the embedding of the query and the embeddings of the documents\nquery = \"What were the compute requirements for training GPT 4\"\nresults = vector_search.similarity_search(query)\n\nprint(results[0].page_content)\n\nQuerying data\n\nWe can also instantiate the vector store directly and execute a query as follows:\n\nfrom langchain.embeddings import OpenAIEmbeddings\nfrom langchain.vectorstores import MongoDBAtlasVectorSearch\n\nvector_search = MongoDBAtlasVectorSearch.from_connection_string(\n    MONGODB_ATLAS_CLUSTER_URI,\n    DB_NAME + \".\" + COLLECTION_NAME,\n    OpenAIEmbeddings(disallowed_special=()),\n    index_name=ATLAS_VECTOR_SEARCH_INDEX_NAME,\n)\n\nSimilarity Search with Score‚Äã\nquery = \"What were the compute requirements for training GPT 4\"\n\nresults = vector_search.similarity_search_with_score(\n    query=query,\n    k=5,\n)\n\n# Display results\nfor result in results:\n    print(result)\n\nQuestion Answering‚Äã\nqa_retriever = vector_search.as_retriever(\n    search_type=\"similarity\",\n    search_kwargs={\"k\": 100, \"post_filter_pipeline\": [{\"$limit\": 25}]},\n)\n\nfrom langchain.prompts import PromptTemplate\n\nprompt_template = \"\"\"Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer.\n\n{context}\n\nQuestion: {question}\n\"\"\"\nPROMPT = PromptTemplate(\n    template=prompt_template, input_variables=[\"context\", \"question\"]\n)\n\nfrom langchain.chains import RetrievalQA\nfrom langchain.llms import OpenAI\n\nqa = RetrievalQA.from_chain_type(\n    llm=OpenAI(),\n    chain_type=\"stuff\",\n    retriever=qa_retriever,\n    return_source_documents=True,\n    chain_type_kwargs={\"prompt\": PROMPT},\n)\n\ndocs = qa({\"query\": \"gpt-4 compute requirements\"})\n\nprint(docs[\"result\"])\nprint(docs[\"source_documents\"])\n\n\nGPT-4 requires significantly more compute than earlier GPT models. On a dataset derived from OpenAI's internal codebase, GPT-4 requires 100p (petaflops) of compute to reach the lowest loss, while the smaller models require 1-10n (nanoflops).\n\nPrevious\nMomento Vector Index (MVI)\nNext\nMyScale"
}