{
	"title": "FalkorDBQAChain | 🦜️🔗 Langchain",
	"url": "https://python.langchain.com/docs/use_cases/graph/graph_falkordb_qa",
	"html": "Graph queryingFalkorDBQAChain\nFalkorDBQAChain\n\nThis notebook shows how to use LLMs to provide a natural language interface to FalkorDB database.\n\nFalkorDB is a low latency property graph database management system. You can simply run its docker locally:\n\ndocker run -p 6379:6379 -it --rm falkordb/falkordb:edge\n\n\nOnce launched, you can simply start creating a database on the local machine and connect to it.\n\nfrom langchain.chains import FalkorDBQAChain\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.graphs import FalkorDBGraph\n\nCreate a graph connection and insert some demo data.​\ngraph = FalkorDBGraph(database=\"movies\")\n\ngraph.query(\n    \"\"\"\n    CREATE \n        (al:Person {name: 'Al Pacino', birthDate: '1940-04-25'}),\n        (robert:Person {name: 'Robert De Niro', birthDate: '1943-08-17'}),\n        (tom:Person {name: 'Tom Cruise', birthDate: '1962-07-3'}),\n        (val:Person {name: 'Val Kilmer', birthDate: '1959-12-31'}),\n        (anthony:Person {name: 'Anthony Edwards', birthDate: '1962-7-19'}),\n        (meg:Person {name: 'Meg Ryan', birthDate: '1961-11-19'}),\n\n        (god1:Movie {title: 'The Godfather'}),\n        (god2:Movie {title: 'The Godfather: Part II'}),\n        (god3:Movie {title: 'The Godfather Coda: The Death of Michael Corleone'}),\n        (top:Movie {title: 'Top Gun'}),\n\n        (al)-[:ACTED_IN]->(god1),\n        (al)-[:ACTED_IN]->(god2),\n        (al)-[:ACTED_IN]->(god3),\n        (robert)-[:ACTED_IN]->(god2),\n        (tom)-[:ACTED_IN]->(top),\n        (val)-[:ACTED_IN]->(top),\n        (anthony)-[:ACTED_IN]->(top),\n        (meg)-[:ACTED_IN]->(top)\n\"\"\"\n)\n\n    []\n\nCreating FalkorDBQAChain​\ngraph.refresh_schema()\nprint(graph.schema)\n\nimport os\n\nos.environ[\"OPENAI_API_KEY\"] = \"API_KEY_HERE\"\n\n    Node properties: [[OrderedDict([('label', None), ('properties', ['name', 'birthDate', 'title'])])]]\n    Relationships properties: [[OrderedDict([('type', None), ('properties', [])])]]\n    Relationships: [['(:Person)-[:ACTED_IN]->(:Movie)']]\n    \n\nchain = FalkorDBQAChain.from_llm(ChatOpenAI(temperature=0), graph=graph, verbose=True)\n\nQuerying the graph​\nchain.run(\"Who played in Top Gun?\")\n\n    \n    \n    > Entering new FalkorDBQAChain chain...\n    Generated Cypher:\n    MATCH (p:Person)-[:ACTED_IN]->(m:Movie)\n    WHERE m.title = 'Top Gun'\n    RETURN p.name\n    Full Context:\n    [['Tom Cruise'], ['Val Kilmer'], ['Anthony Edwards'], ['Meg Ryan'], ['Tom Cruise'], ['Val Kilmer'], ['Anthony Edwards'], ['Meg Ryan']]\n    \n    > Finished chain.\n\n\n\n\n\n    'Tom Cruise, Val Kilmer, Anthony Edwards, and Meg Ryan played in Top Gun.'\n\nchain.run(\"Who is the oldest actor who played in The Godfather: Part II?\")\n\n    \n    \n    > Entering new FalkorDBQAChain chain...\n    Generated Cypher:\n    MATCH (p:Person)-[r:ACTED_IN]->(m:Movie)\n    WHERE m.title = 'The Godfather: Part II'\n    RETURN p.name\n    ORDER BY p.birthDate ASC\n    LIMIT 1\n    Full Context:\n    [['Al Pacino']]\n    \n    > Finished chain.\n\n\n\n\n\n    'The oldest actor who played in The Godfather: Part II is Al Pacino.'\n\nchain.run(\"Robert De Niro played in which movies?\")\n\n    \n    \n    > Entering new FalkorDBQAChain chain...\n    Generated Cypher:\n    MATCH (p:Person {name: 'Robert De Niro'})-[:ACTED_IN]->(m:Movie)\n    RETURN m.title\n    Full Context:\n    [['The Godfather: Part II'], ['The Godfather: Part II']]\n    \n    > Finished chain.\n\n\n\n\n\n    'Robert De Niro played in \"The Godfather: Part II\".'\n\nPrevious\nNeo4j DB QA chain\nNext\nHugeGraph QA Chain"
}