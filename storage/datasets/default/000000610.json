{
	"title": "Apify | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/integrations/tools/apify",
	"html": "ComponentsToolsApify\nApify\n\nThis notebook shows how to use the Apify integration for LangChain.\n\nApify is a cloud platform for web scraping and data extraction, which provides an ecosystem of more than a thousand ready-made apps called Actors for various web scraping, crawling, and data extraction use cases. For example, you can use it to extract Google Search results, Instagram and Facebook profiles, products from Amazon or Shopify, Google Maps reviews, etc. etc.\n\nIn this example, we'll use the Website Content Crawler Actor, which can deeply crawl websites such as documentation, knowledge bases, help centers, or blogs, and extract text content from the web pages. Then we feed the documents into a vector index and answer questions from it.\n\n#!pip install apify-client openai langchain chromadb tiktoken\n\n\nFirst, import ApifyWrapper into your source code:\n\nfrom langchain.document_loaders.base import Document\nfrom langchain.indexes import VectorstoreIndexCreator\nfrom langchain.utilities import ApifyWrapper\n\n\nInitialize it using your Apify API token and for the purpose of this example, also with your OpenAI API key:\n\nimport os\n\nos.environ[\"OPENAI_API_KEY\"] = \"Your OpenAI API key\"\nos.environ[\"APIFY_API_TOKEN\"] = \"Your Apify API token\"\n\napify = ApifyWrapper()\n\n\nThen run the Actor, wait for it to finish, and fetch its results from the Apify dataset into a LangChain document loader.\n\nNote that if you already have some results in an Apify dataset, you can load them directly using ApifyDatasetLoader, as shown in this notebook. In that notebook, you'll also find the explanation of the dataset_mapping_function, which is used to map fields from the Apify dataset records to LangChain Document fields.\n\nloader = apify.call_actor(\n    actor_id=\"apify/website-content-crawler\",\n    run_input={\"startUrls\": [{\"url\": \"https://python.langchain.com/en/latest/\"}]},\n    dataset_mapping_function=lambda item: Document(\n        page_content=item[\"text\"] or \"\", metadata={\"source\": item[\"url\"]}\n    ),\n)\n\n\nInitialize the vector index from the crawled documents:\n\nindex = VectorstoreIndexCreator().from_loaders([loader])\n\n\nAnd finally, query the vector index:\n\nquery = \"What is LangChain?\"\nresult = index.query_with_sources(query)\n\nprint(result[\"answer\"])\nprint(result[\"sources\"])\n\n     LangChain is a standard interface through which you can interact with a variety of large language models (LLMs). It provides modules that can be used to build language model applications, and it also provides chains and agents with memory capabilities.\n    \n    https://python.langchain.com/en/latest/modules/models/llms.html, https://python.langchain.com/en/latest/getting_started/getting_started.html\n\nPrevious\nAlpha Vantage\nNext\nArXiv"
}