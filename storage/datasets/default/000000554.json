{
	"title": "LLM Caching integrations | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/integrations/llms/llm_caching",
	"html": "ComponentsLLMsLLM Caching integrations\nLLM Caching integrations\n\nThis notebook covers how to cache results of individual LLM calls using different caches.\n\nfrom langchain.globals import set_llm_cache\nfrom langchain.llms import OpenAI\n\n# To make the caching really obvious, lets use a slower model.\nllm = OpenAI(model_name=\"text-davinci-002\", n=2, best_of=2)\n\nIn Memory Cache‚Äã\nfrom langchain.cache import InMemoryCache\n\nset_llm_cache(InMemoryCache())\n\n# The first time, it is not yet in cache, so it should take longer\nllm(\"Tell me a joke\")\n\n    CPU times: user 52.2 ms, sys: 15.2 ms, total: 67.4 ms\n    Wall time: 1.19 s\n\n\n\n\n\n    \"\\n\\nWhy couldn't the bicycle stand up by itself? Because it was...two tired!\"\n\n# The second time it is, so it goes faster\nllm(\"Tell me a joke\")\n\n    CPU times: user 191 ¬µs, sys: 11 ¬µs, total: 202 ¬µs\n    Wall time: 205 ¬µs\n\n\n\n\n\n    \"\\n\\nWhy couldn't the bicycle stand up by itself? Because it was...two tired!\"\n\nSQLite Cache‚Äã\nrm .langchain.db\n\n# We can do the same thing with a SQLite cache\nfrom langchain.cache import SQLiteCache\n\nset_llm_cache(SQLiteCache(database_path=\".langchain.db\"))\n\n# The first time, it is not yet in cache, so it should take longer\nllm(\"Tell me a joke\")\n\n    CPU times: user 33.2 ms, sys: 18.1 ms, total: 51.2 ms\n    Wall time: 667 ms\n\n\n\n\n\n    '\\n\\nWhy did the chicken cross the road?\\n\\nTo get to the other side.'\n\n# The second time it is, so it goes faster\nllm(\"Tell me a joke\")\n\n    CPU times: user 4.86 ms, sys: 1.97 ms, total: 6.83 ms\n    Wall time: 5.79 ms\n\n\n\n\n\n    '\\n\\nWhy did the chicken cross the road?\\n\\nTo get to the other side.'\n\nUpstash Redis Cache‚Äã\nStandard Cache‚Äã\n\nUse Upstash Redis to cache prompts and responses with a serverless HTTP API.\n\nfrom langchain.cache import UpstashRedisCache\nfrom upstash_redis import Redis\n\nURL = \"<UPSTASH_REDIS_REST_URL>\"\nTOKEN = \"<UPSTASH_REDIS_REST_TOKEN>\"\n\nlangchain.llm_cache = UpstashRedisCache(redis_=Redis(url=URL, token=TOKEN))\n\n# The first time, it is not yet in cache, so it should take longer\nllm(\"Tell me a joke\")\n\n    CPU times: user 7.56 ms, sys: 2.98 ms, total: 10.5 ms\n    Wall time: 1.14 s\n\n\n\n\n\n    '\\n\\nWhy did the chicken cross the road?\\n\\nTo get to the other side!'\n\n# The first time, it is not yet in cache, so it should take longer\nllm(\"Tell me a joke\")\n\n    CPU times: user 2.78 ms, sys: 1.95 ms, total: 4.73 ms\n    Wall time: 82.9 ms\n\n\n\n\n\n    '\\n\\nTwo guys stole a calendar. They got six months each.'\n\nRedis Cache‚Äã\nStandard Cache‚Äã\n\nUse Redis to cache prompts and responses.\n\n# We can do the same thing with a Redis cache\n# (make sure your local Redis instance is running first before running this example)\nfrom langchain.cache import RedisCache\nfrom redis import Redis\n\nset_llm_cache(RedisCache(redis_=Redis()))\n\n# The first time, it is not yet in cache, so it should take longer\nllm(\"Tell me a joke\")\n\n    CPU times: user 6.88 ms, sys: 8.75 ms, total: 15.6 ms\n    Wall time: 1.04 s\n\n\n\n\n\n    '\\n\\nWhy did the chicken cross the road?\\n\\nTo get to the other side!'\n\n# The second time it is, so it goes faster\nllm(\"Tell me a joke\")\n\n    CPU times: user 1.59 ms, sys: 610 ¬µs, total: 2.2 ms\n    Wall time: 5.58 ms\n\n\n\n\n\n    '\\n\\nWhy did the chicken cross the road?\\n\\nTo get to the other side!'\n\nSemantic Cache‚Äã\n\nUse Redis to cache prompts and responses and evaluate hits based on semantic similarity.\n\nfrom langchain.cache import RedisSemanticCache\nfrom langchain.embeddings import OpenAIEmbeddings\n\nset_llm_cache(\n    RedisSemanticCache(redis_url=\"redis://localhost:6379\", embedding=OpenAIEmbeddings())\n)\n\n# The first time, it is not yet in cache, so it should take longer\nllm(\"Tell me a joke\")\n\n    CPU times: user 351 ms, sys: 156 ms, total: 507 ms\n    Wall time: 3.37 s\n\n\n\n\n\n    \"\\n\\nWhy don't scientists trust atoms?\\nBecause they make up everything.\"\n\n# The second time, while not a direct hit, the question is semantically similar to the original question,\n# so it uses the cached result!\nllm(\"Tell me one joke\")\n\n    CPU times: user 6.25 ms, sys: 2.72 ms, total: 8.97 ms\n    Wall time: 262 ms\n\n\n\n\n\n    \"\\n\\nWhy don't scientists trust atoms?\\nBecause they make up everything.\"\n\nGPTCache‚Äã\n\nWe can use GPTCache for exact match caching OR to cache results based on semantic similarity\n\nLet's first start with an example of exact match\n\nimport hashlib\n\nfrom gptcache import Cache\nfrom gptcache.manager.factory import manager_factory\nfrom gptcache.processor.pre import get_prompt\nfrom langchain.cache import GPTCache\n\n\ndef get_hashed_name(name):\n    return hashlib.sha256(name.encode()).hexdigest()\n\n\ndef init_gptcache(cache_obj: Cache, llm: str):\n    hashed_llm = get_hashed_name(llm)\n    cache_obj.init(\n        pre_embedding_func=get_prompt,\n        data_manager=manager_factory(manager=\"map\", data_dir=f\"map_cache_{hashed_llm}\"),\n    )\n\n\nset_llm_cache(GPTCache(init_gptcache))\n\n# The first time, it is not yet in cache, so it should take longer\nllm(\"Tell me a joke\")\n\n    CPU times: user 21.5 ms, sys: 21.3 ms, total: 42.8 ms\n    Wall time: 6.2 s\n\n\n\n\n\n    '\\n\\nWhy did the chicken cross the road?\\n\\nTo get to the other side!'\n\n# The second time it is, so it goes faster\nllm(\"Tell me a joke\")\n\n    CPU times: user 571 ¬µs, sys: 43 ¬µs, total: 614 ¬µs\n    Wall time: 635 ¬µs\n\n\n\n\n\n    '\\n\\nWhy did the chicken cross the road?\\n\\nTo get to the other side!'\n\n\nLet's now show an example of similarity caching\n\nimport hashlib\n\nfrom gptcache import Cache\nfrom gptcache.adapter.api import init_similar_cache\nfrom langchain.cache import GPTCache\n\n\ndef get_hashed_name(name):\n    return hashlib.sha256(name.encode()).hexdigest()\n\n\ndef init_gptcache(cache_obj: Cache, llm: str):\n    hashed_llm = get_hashed_name(llm)\n    init_similar_cache(cache_obj=cache_obj, data_dir=f\"similar_cache_{hashed_llm}\")\n\n\nset_llm_cache(GPTCache(init_gptcache))\n\n# The first time, it is not yet in cache, so it should take longer\nllm(\"Tell me a joke\")\n\n    CPU times: user 1.42 s, sys: 279 ms, total: 1.7 s\n    Wall time: 8.44 s\n\n\n\n\n\n    '\\n\\nWhy did the chicken cross the road?\\n\\nTo get to the other side.'\n\n# This is an exact match, so it finds it in the cache\nllm(\"Tell me a joke\")\n\n    CPU times: user 866 ms, sys: 20 ms, total: 886 ms\n    Wall time: 226 ms\n\n\n\n\n\n    '\\n\\nWhy did the chicken cross the road?\\n\\nTo get to the other side.'\n\n# This is not an exact match, but semantically within distance so it hits!\nllm(\"Tell me joke\")\n\n    CPU times: user 853 ms, sys: 14.8 ms, total: 868 ms\n    Wall time: 224 ms\n\n\n\n\n\n    '\\n\\nWhy did the chicken cross the road?\\n\\nTo get to the other side.'\n\nMomento Cache‚Äã\n\nUse Momento to cache prompts and responses.\n\nRequires momento to use, uncomment below to install:\n\n# !pip install momento\n\n\nYou'll need to get a Momento auth token to use this class. This can either be passed in to a momento.CacheClient if you'd like to instantiate that directly, as a named parameter auth_token to MomentoChatMessageHistory.from_client_params, or can just be set as an environment variable MOMENTO_AUTH_TOKEN.\n\nfrom datetime import timedelta\n\nfrom langchain.cache import MomentoCache\n\ncache_name = \"langchain\"\nttl = timedelta(days=1)\nset_llm_cache(MomentoCache.from_client_params(cache_name, ttl))\n\n# The first time, it is not yet in cache, so it should take longer\nllm(\"Tell me a joke\")\n\n    CPU times: user 40.7 ms, sys: 16.5 ms, total: 57.2 ms\n    Wall time: 1.73 s\n\n\n\n\n\n    '\\n\\nWhy did the chicken cross the road?\\n\\nTo get to the other side!'\n\n# The second time it is, so it goes faster\n# When run in the same region as the cache, latencies are single digit ms\nllm(\"Tell me a joke\")\n\n    CPU times: user 3.16 ms, sys: 2.98 ms, total: 6.14 ms\n    Wall time: 57.9 ms\n\n\n\n\n\n    '\\n\\nWhy did the chicken cross the road?\\n\\nTo get to the other side!'\n\nSQLAlchemy Cache‚Äã\n\nYou can use SQLAlchemyCache to cache with any SQL database supported by SQLAlchemy.\n\n# from langchain.cache import SQLAlchemyCache\n# from sqlalchemy import create_engine\n\n# engine = create_engine(\"postgresql://postgres:postgres@localhost:5432/postgres\")\n# set_llm_cache(SQLAlchemyCache(engine))\n\nCustom SQLAlchemy Schemas‚Äã\n# You can define your own declarative SQLAlchemyCache child class to customize the schema used for caching. For example, to support high-speed fulltext prompt indexing with Postgres, use:\n\nfrom langchain.cache import SQLAlchemyCache\nfrom sqlalchemy import Column, Computed, Index, Integer, Sequence, String, create_engine\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy_utils import TSVectorType\n\nBase = declarative_base()\n\n\nclass FulltextLLMCache(Base):  # type: ignore\n    \"\"\"Postgres table for fulltext-indexed LLM Cache\"\"\"\n\n    __tablename__ = \"llm_cache_fulltext\"\n    id = Column(Integer, Sequence(\"cache_id\"), primary_key=True)\n    prompt = Column(String, nullable=False)\n    llm = Column(String, nullable=False)\n    idx = Column(Integer)\n    response = Column(String)\n    prompt_tsv = Column(\n        TSVectorType(),\n        Computed(\"to_tsvector('english', llm || ' ' || prompt)\", persisted=True),\n    )\n    __table_args__ = (\n        Index(\"idx_fulltext_prompt_tsv\", prompt_tsv, postgresql_using=\"gin\"),\n    )\n\n\nengine = create_engine(\"postgresql://postgres:postgres@localhost:5432/postgres\")\nset_llm_cache(SQLAlchemyCache(engine, FulltextLLMCache))\n\nCassandra caches‚Äã\n\nYou can use Cassandra / Astra DB for caching LLM responses, choosing from the exact-match CassandraCache or the (vector-similarity-based) CassandraSemanticCache.\n\nLet's see both in action in the following cells.\n\nConnect to the DB‚Äã\n\nFirst you need to establish a Session to the DB and to specify a keyspace for the cache table(s). The following gets you started with an Astra DB instance (see e.g. here for more backends and connection options).\n\nimport getpass\n\nkeyspace = input(\"\\nKeyspace name? \")\nASTRA_DB_APPLICATION_TOKEN = getpass.getpass('\\nAstra DB Token (\"AstraCS:...\") ')\nASTRA_DB_SECURE_BUNDLE_PATH = input(\"Full path to your Secure Connect Bundle? \")\n\n    \n    Keyspace name? my_keyspace\n    \n    Astra DB Token (\"AstraCS:...\") ¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑\n    Full path to your Secure Connect Bundle? /path/to/secure-connect-databasename.zip\n\nfrom cassandra.auth import PlainTextAuthProvider\nfrom cassandra.cluster import Cluster\n\ncluster = Cluster(\n    cloud={\n        \"secure_connect_bundle\": ASTRA_DB_SECURE_BUNDLE_PATH,\n    },\n    auth_provider=PlainTextAuthProvider(\"token\", ASTRA_DB_APPLICATION_TOKEN),\n)\nsession = cluster.connect()\n\nExact cache‚Äã\n\nThis will avoid invoking the LLM when the supplied prompt is exactly the same as one encountered already:\n\nfrom langchain.cache import CassandraCache\nfrom langchain.globals import set_llm_cache\n\nset_llm_cache(CassandraCache(session=session, keyspace=keyspace))\n\nprint(llm(\"Why is the Moon always showing the same side?\"))\n\n    \n    \n    The Moon always shows the same side because it is tidally locked to Earth.\n    CPU times: user 41.7 ms, sys: 153 ¬µs, total: 41.8 ms\n    Wall time: 1.96 s\n\nprint(llm(\"Why is the Moon always showing the same side?\"))\n\n    \n    \n    The Moon always shows the same side because it is tidally locked to Earth.\n    CPU times: user 4.09 ms, sys: 0 ns, total: 4.09 ms\n    Wall time: 119 ms\n\nSemantic cache‚Äã\n\nThis cache will do a semantic similarity search and return a hit if it finds a cached entry that is similar enough, For this, you need to provide an Embeddings instance of your choice.\n\nfrom langchain.embeddings import OpenAIEmbeddings\n\nembedding = OpenAIEmbeddings()\n\nfrom langchain.cache import CassandraSemanticCache\n\nset_llm_cache(\n    CassandraSemanticCache(\n        session=session,\n        keyspace=keyspace,\n        embedding=embedding,\n        table_name=\"cass_sem_cache\",\n    )\n)\n\nprint(llm(\"Why is the Moon always showing the same side?\"))\n\n    \n    \n    The Moon always shows the same side because it is tidally locked with Earth. This means that the same side of the Moon always faces Earth.\n    CPU times: user 21.3 ms, sys: 177 ¬µs, total: 21.4 ms\n    Wall time: 3.09 s\n\nprint(llm(\"How come we always see one face of the moon?\"))\n\n    \n    \n    The Moon always shows the same side because it is tidally locked with Earth. This means that the same side of the Moon always faces Earth.\n    CPU times: user 10.9 ms, sys: 17 ¬µs, total: 10.9 ms\n    Wall time: 461 ms\n\nOptional Caching‚Äã\n\nYou can also turn off caching for specific LLMs should you choose. In the example below, even though global caching is enabled, we turn it off for a specific LLM\n\nllm = OpenAI(model_name=\"text-davinci-002\", n=2, best_of=2, cache=False)\n\nllm(\"Tell me a joke\")\n\n    CPU times: user 5.8 ms, sys: 2.71 ms, total: 8.51 ms\n    Wall time: 745 ms\n\n\n\n\n\n    '\\n\\nWhy did the chicken cross the road?\\n\\nTo get to the other side!'\n\nllm(\"Tell me a joke\")\n\n    CPU times: user 4.91 ms, sys: 2.64 ms, total: 7.55 ms\n    Wall time: 623 ms\n\n\n\n\n\n    '\\n\\nTwo guys stole a calendar. They got six months each.'\n\nOptional Caching in Chains‚Äã\n\nYou can also turn off caching for particular nodes in chains. Note that because of certain interfaces, its often easier to construct the chain first, and then edit the LLM afterwards.\n\nAs an example, we will load a summarizer map-reduce chain. We will cache results for the map-step, but then not freeze it for the combine step.\n\nllm = OpenAI(model_name=\"text-davinci-002\")\nno_cache_llm = OpenAI(model_name=\"text-davinci-002\", cache=False)\n\nfrom langchain.text_splitter import CharacterTextSplitter\n\ntext_splitter = CharacterTextSplitter()\n\nwith open(\"../../modules/state_of_the_union.txt\") as f:\n    state_of_the_union = f.read()\ntexts = text_splitter.split_text(state_of_the_union)\n\nfrom langchain.docstore.document import Document\n\ndocs = [Document(page_content=t) for t in texts[:3]]\nfrom langchain.chains.summarize import load_summarize_chain\n\nchain = load_summarize_chain(llm, chain_type=\"map_reduce\", reduce_llm=no_cache_llm)\n\nchain.run(docs)\n\n    CPU times: user 452 ms, sys: 60.3 ms, total: 512 ms\n    Wall time: 5.09 s\n\n\n\n\n\n    '\\n\\nPresident Biden is discussing the American Rescue Plan and the Bipartisan Infrastructure Law, which will create jobs and help Americans. He also talks about his vision for America, which includes investing in education and infrastructure. In response to Russian aggression in Ukraine, the United States is joining with European allies to impose sanctions and isolate Russia. American forces are being mobilized to protect NATO countries in the event that Putin decides to keep moving west. The Ukrainians are bravely fighting back, but the next few weeks will be hard for them. Putin will pay a high price for his actions in the long run. Americans should not be alarmed, as the United States is taking action to protect its interests and allies.'\n\n\nWhen we run it again, we see that it runs substantially faster but the final answer is different. This is due to caching at the map steps, but not at the reduce step.\n\nchain.run(docs)\n\n    CPU times: user 11.5 ms, sys: 4.33 ms, total: 15.8 ms\n    Wall time: 1.04 s\n\n\n\n\n\n    '\\n\\nPresident Biden is discussing the American Rescue Plan and the Bipartisan Infrastructure Law, which will create jobs and help Americans. He also talks about his vision for America, which includes investing in education and infrastructure.'\n\nrm .langchain.db sqlite.db\n\nPrevious\nLlama.cpp\nNext\nLM Format Enforcer"
}