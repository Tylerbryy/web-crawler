{
	"title": "Memory in LLMChain | 🦜️🔗 Langchain",
	"url": "https://python.langchain.com/docs/modules/memory/adding_memory",
	"html": "ModulesMoreMemoryMemory in LLMChain\nMemory in LLMChain\n\nThis notebook goes over how to use the Memory class with an LLMChain.\n\nWe will add the ConversationBufferMemory class, although this can be any memory class.\n\nfrom langchain.chains import LLMChain\nfrom langchain.llms import OpenAI\nfrom langchain.memory import ConversationBufferMemory\nfrom langchain.prompts import PromptTemplate\n\n\nThe most important step is setting up the prompt correctly. In the below prompt, we have two input keys: one for the actual input, another for the input from the Memory class. Importantly, we make sure the keys in the PromptTemplate and the ConversationBufferMemory match up (chat_history).\n\ntemplate = \"\"\"You are a chatbot having a conversation with a human.\n\n{chat_history}\nHuman: {human_input}\nChatbot:\"\"\"\n\nprompt = PromptTemplate(\n    input_variables=[\"chat_history\", \"human_input\"], template=template\n)\nmemory = ConversationBufferMemory(memory_key=\"chat_history\")\n\nllm = OpenAI()\nllm_chain = LLMChain(\n    llm=llm,\n    prompt=prompt,\n    verbose=True,\n    memory=memory,\n)\n\nllm_chain.predict(human_input=\"Hi there my friend\")\n\n    \n    \n    > Entering new LLMChain chain...\n    Prompt after formatting:\n    You are a chatbot having a conversation with a human.\n    \n    \n    Human: Hi there my friend\n    Chatbot:\n    \n    > Finished chain.\n\n\n\n\n\n    ' Hi there! How can I help you today?'\n\nllm_chain.predict(human_input=\"Not too bad - how are you?\")\n\n    \n    \n    > Entering new LLMChain chain...\n    Prompt after formatting:\n    You are a chatbot having a conversation with a human.\n    \n    Human: Hi there my friend\n    AI:  Hi there! How can I help you today?\n    Human: Not too bad - how are you?\n    Chatbot:\n    \n    > Finished chain.\n\n\n\n\n\n    \" I'm doing great, thanks for asking! How are you doing?\"\n\nAdding Memory to a chat model-based LLMChain​\n\nThe above works for completion-style LLMs, but if you are using a chat model, you will likely get better performance using structured chat messages. Below is an example.\n\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.prompts import (\n    ChatPromptTemplate,\n    HumanMessagePromptTemplate,\n    MessagesPlaceholder,\n)\nfrom langchain.schema import SystemMessage\n\n\nWe will use the ChatPromptTemplate class to set up the chat prompt.\n\nThe from_messages method creates a ChatPromptTemplate from a list of messages (e.g., SystemMessage, HumanMessage, AIMessage, ChatMessage, etc.) or message templates, such as the MessagesPlaceholder below.\n\nThe configuration below makes it so the memory will be injected to the middle of the chat prompt, in the chat_history key, and the user's inputs will be added in a human/user message to the end of the chat prompt.\n\nprompt = ChatPromptTemplate.from_messages(\n    [\n        SystemMessage(\n            content=\"You are a chatbot having a conversation with a human.\"\n        ),  # The persistent system prompt\n        MessagesPlaceholder(\n            variable_name=\"chat_history\"\n        ),  # Where the memory will be stored.\n        HumanMessagePromptTemplate.from_template(\n            \"{human_input}\"\n        ),  # Where the human input will injected\n    ]\n)\n\nmemory = ConversationBufferMemory(memory_key=\"chat_history\", return_messages=True)\n\nllm = ChatOpenAI()\n\nchat_llm_chain = LLMChain(\n    llm=llm,\n    prompt=prompt,\n    verbose=True,\n    memory=memory,\n)\n\nchat_llm_chain.predict(human_input=\"Hi there my friend\")\n\n    \n    \n    > Entering new LLMChain chain...\n    Prompt after formatting:\n    System: You are a chatbot having a conversation with a human.\n    Human: Hi there my friend\n    \n    > Finished chain.\n\n\n\n\n\n    'Hello! How can I assist you today, my friend?'\n\nchat_llm_chain.predict(human_input=\"Not too bad - how are you?\")\n\n    \n    \n    > Entering new LLMChain chain...\n    Prompt after formatting:\n    System: You are a chatbot having a conversation with a human.\n    Human: Hi there my friend\n    AI: Hello! How can I assist you today, my friend?\n    Human: Not too bad - how are you?\n    \n    > Finished chain.\n\n\n\n\n\n    \"I'm an AI chatbot, so I don't have feelings, but I'm here to help and chat with you! Is there something specific you would like to talk about or any questions I can assist you with?\"\n\nPrevious\nMemory\nNext\nMemory in the Multi-Input Chain"
}