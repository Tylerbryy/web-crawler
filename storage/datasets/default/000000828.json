{
	"title": "Custom multi-action agent | 🦜️🔗 Langchain",
	"url": "https://python.langchain.com/docs/modules/agents/how_to/custom_multi_action_agent",
	"html": "ModulesAgentsHow-toCustom multi-action agent\nCustom multi-action agent\n\nThis notebook goes through how to create your own custom agent.\n\nAn agent consists of two parts:\n\nTools: The tools the agent has available to use.\nThe agent class itself: this decides which action to take.\n\nIn this notebook we walk through how to create a custom agent that predicts/takes multiple steps at a time.\n\nfrom langchain.agents import AgentExecutor, BaseMultiActionAgent, Tool\nfrom langchain.utilities import SerpAPIWrapper\n\ndef random_word(query: str) -> str:\n    print(\"\\nNow I'm doing this!\")\n    return \"foo\"\n\nsearch = SerpAPIWrapper()\ntools = [\n    Tool(\n        name=\"Search\",\n        func=search.run,\n        description=\"useful for when you need to answer questions about current events\",\n    ),\n    Tool(\n        name=\"RandomWord\",\n        func=random_word,\n        description=\"call this to get a random word.\",\n    ),\n]\n\nfrom typing import Any, List, Tuple, Union\n\nfrom langchain.schema import AgentAction, AgentFinish\n\n\nclass FakeAgent(BaseMultiActionAgent):\n    \"\"\"Fake Custom Agent.\"\"\"\n\n    @property\n    def input_keys(self):\n        return [\"input\"]\n\n    def plan(\n        self, intermediate_steps: List[Tuple[AgentAction, str]], **kwargs: Any\n    ) -> Union[List[AgentAction], AgentFinish]:\n        \"\"\"Given input, decided what to do.\n\n        Args:\n            intermediate_steps: Steps the LLM has taken to date,\n                along with observations\n            **kwargs: User inputs.\n\n        Returns:\n            Action specifying what tool to use.\n        \"\"\"\n        if len(intermediate_steps) == 0:\n            return [\n                AgentAction(tool=\"Search\", tool_input=kwargs[\"input\"], log=\"\"),\n                AgentAction(tool=\"RandomWord\", tool_input=kwargs[\"input\"], log=\"\"),\n            ]\n        else:\n            return AgentFinish(return_values={\"output\": \"bar\"}, log=\"\")\n\n    async def aplan(\n        self, intermediate_steps: List[Tuple[AgentAction, str]], **kwargs: Any\n    ) -> Union[List[AgentAction], AgentFinish]:\n        \"\"\"Given input, decided what to do.\n\n        Args:\n            intermediate_steps: Steps the LLM has taken to date,\n                along with observations\n            **kwargs: User inputs.\n\n        Returns:\n            Action specifying what tool to use.\n        \"\"\"\n        if len(intermediate_steps) == 0:\n            return [\n                AgentAction(tool=\"Search\", tool_input=kwargs[\"input\"], log=\"\"),\n                AgentAction(tool=\"RandomWord\", tool_input=kwargs[\"input\"], log=\"\"),\n            ]\n        else:\n            return AgentFinish(return_values={\"output\": \"bar\"}, log=\"\")\n\nagent = FakeAgent()\n\nagent_executor = AgentExecutor.from_agent_and_tools(\n    agent=agent, tools=tools, verbose=True\n)\n\nagent_executor.run(\"How many people live in canada as of 2023?\")\n\n    \n    \n    > Entering new AgentExecutor chain...\n    The current population of Canada is 38,669,152 as of Monday, April 24, 2023, based on Worldometer elaboration of the latest United Nations data.\n    Now I'm doing this!\n    foo\n    \n    > Finished chain.\n\n\n\n\n\n    'bar'\n\nPrevious\nCustom MRKL agent\nNext\nHandle parsing errors"
}