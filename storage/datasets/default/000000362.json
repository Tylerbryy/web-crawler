{
	"title": "Data anonymization with Microsoft Presidio | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/guides/privacy/presidio_data_anonymization/",
	"html": "PrivacyData anonymization with Microsoft Presidio\nData anonymization with Microsoft Presidio\n\nUse case‚Äã\n\nData anonymization is crucial before passing information to a language model like GPT-4 because it helps protect privacy and maintain confidentiality. If data is not anonymized, sensitive information such as names, addresses, contact numbers, or other identifiers linked to specific individuals could potentially be learned and misused. Hence, by obscuring or removing this personally identifiable information (PII), data can be used freely without compromising individuals' privacy rights or breaching data protection laws and regulations.\n\nOverview‚Äã\n\nAnonynization consists of two steps:\n\nIdentification: Identify all data fields that contain personally identifiable information (PII).\nReplacement: Replace all PIIs with pseudo values or codes that do not reveal any personal information about the individual but can be used for reference. We're not using regular encryption, because the language model won't be able to understand the meaning or context of the encrypted data.\n\nWe use Microsoft Presidio together with Faker framework for anonymization purposes because of the wide range of functionalities they provide. The full implementation is available in PresidioAnonymizer.\n\nQuickstart‚Äã\n\nBelow you will find the use case on how to leverage anonymization in LangChain.\n\n# Install necessary packages\n# ! pip install langchain langchain-experimental openai presidio-analyzer presidio-anonymizer spacy Faker\n# ! python -m spacy download en_core_web_lg\n\n\n\\ Let's see how PII anonymization works using a sample sentence:\n\nfrom langchain_experimental.data_anonymizer import PresidioAnonymizer\n\nanonymizer = PresidioAnonymizer()\n\nanonymizer.anonymize(\n    \"My name is Slim Shady, call me at 313-666-7440 or email me at real.slim.shady@gmail.com\"\n)\n\n    'My name is James Martinez, call me at (576)928-1972x679 or email me at lisa44@example.com'\n\nUsing with LangChain Expression Language‚Äã\n\nWith LCEL we can easily chain together anonymization with the rest of our application.\n\n# Set env var OPENAI_API_KEY or load from a .env file:\n# import dotenv\n\n# dotenv.load_dotenv()\n\ntext = \"\"\"Slim Shady recently lost his wallet. \nInside is some cash and his credit card with the number 4916 0387 9536 0861. \nIf you would find it, please call at 313-666-7440 or write an email here: real.slim.shady@gmail.com.\"\"\"\n\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.prompts.prompt import PromptTemplate\n\nanonymizer = PresidioAnonymizer()\n\ntemplate = \"\"\"Rewrite this text into an official, short email:\n\n{anonymized_text}\"\"\"\nprompt = PromptTemplate.from_template(template)\nllm = ChatOpenAI(temperature=0)\n\nchain = {\"anonymized_text\": anonymizer.anonymize} | prompt | llm\nresponse = chain.invoke(text)\nprint(response.content)\n\n    Dear Sir/Madam,\n    \n    We regret to inform you that Mr. Dennis Cooper has recently misplaced his wallet. The wallet contains a sum of cash and his credit card, bearing the number 3588895295514977. \n    \n    Should you happen to come across the aforementioned wallet, kindly contact us immediately at (428)451-3494x4110 or send an email to perryluke@example.com.\n    \n    Your prompt assistance in this matter would be greatly appreciated.\n    \n    Yours faithfully,\n    \n    [Your Name]\n\nCustomization‚Äã\n\nWe can specify analyzed_fields to only anonymize particular types of data.\n\nanonymizer = PresidioAnonymizer(analyzed_fields=[\"PERSON\"])\n\nanonymizer.anonymize(\n    \"My name is Slim Shady, call me at 313-666-7440 or email me at real.slim.shady@gmail.com\"\n)\n\n    'My name is Shannon Steele, call me at 313-666-7440 or email me at real.slim.shady@gmail.com'\n\n\nAs can be observed, the name was correctly identified and replaced with another. The analyzed_fields attribute is responsible for what values are to be detected and substituted. We can add PHONE_NUMBER to the list:\n\nanonymizer = PresidioAnonymizer(analyzed_fields=[\"PERSON\", \"PHONE_NUMBER\"])\nanonymizer.anonymize(\n    \"My name is Slim Shady, call me at 313-666-7440 or email me at real.slim.shady@gmail.com\"\n)\n\n    'My name is Wesley Flores, call me at (498)576-9526 or email me at real.slim.shady@gmail.com'\n\n\n\\ If no analyzed_fields are specified, by default the anonymizer will detect all supported formats. Below is the full list of them:\n\n['PERSON', 'EMAIL_ADDRESS', 'PHONE_NUMBER', 'IBAN_CODE', 'CREDIT_CARD', 'CRYPTO', 'IP_ADDRESS', 'LOCATION', 'DATE_TIME', 'NRP', 'MEDICAL_LICENSE', 'URL', 'US_BANK_NUMBER', 'US_DRIVER_LICENSE', 'US_ITIN', 'US_PASSPORT', 'US_SSN']\n\nDisclaimer: We suggest carefully defining the private data to be detected - Presidio doesn't work perfectly and it sometimes makes mistakes, so it's better to have more control over the data.\n\nanonymizer = PresidioAnonymizer()\nanonymizer.anonymize(\n    \"My name is Slim Shady, call me at 313-666-7440 or email me at real.slim.shady@gmail.com\"\n)\n\n    'My name is Carla Fisher, call me at 001-683-324-0721x0644 or email me at krausejeremy@example.com'\n\n\n\\ It may be that the above list of detected fields is not sufficient. For example, the already available PHONE_NUMBER field does not support polish phone numbers and confuses it with another field:\n\nanonymizer = PresidioAnonymizer()\nanonymizer.anonymize(\"My polish phone number is 666555444\")\n\n    'My polish phone number is QESQ21234635370499'\n\n\n\\ You can then write your own recognizers and add them to the pool of those present. How exactly to create recognizers is described in the Presidio documentation.\n\n# Define the regex pattern in a Presidio `Pattern` object:\nfrom presidio_analyzer import Pattern, PatternRecognizer\n\npolish_phone_numbers_pattern = Pattern(\n    name=\"polish_phone_numbers_pattern\",\n    regex=\"(?<!\\w)(\\(?(\\+|00)?48\\)?)?[ -]?\\d{3}[ -]?\\d{3}[ -]?\\d{3}(?!\\w)\",\n    score=1,\n)\n\n# Define the recognizer with one or more patterns\npolish_phone_numbers_recognizer = PatternRecognizer(\n    supported_entity=\"POLISH_PHONE_NUMBER\", patterns=[polish_phone_numbers_pattern]\n)\n\n\n\\ Now, we can add recognizer by calling add_recognizer method on the anonymizer:\n\nanonymizer.add_recognizer(polish_phone_numbers_recognizer)\n\n\n\\ And voil√†! With the added pattern-based recognizer, the anonymizer now handles polish phone numbers.\n\nprint(anonymizer.anonymize(\"My polish phone number is 666555444\"))\nprint(anonymizer.anonymize(\"My polish phone number is 666 555 444\"))\nprint(anonymizer.anonymize(\"My polish phone number is +48 666 555 444\"))\n\n    My polish phone number is <POLISH_PHONE_NUMBER>\n    My polish phone number is <POLISH_PHONE_NUMBER>\n    My polish phone number is <POLISH_PHONE_NUMBER>\n\n\n\\ The problem is - even though we recognize polish phone numbers now, we don't have a method (operator) that would tell how to substitute a given field - because of this, in the outpit we only provide string <POLISH_PHONE_NUMBER> We need to create a method to replace it correctly:\n\nfrom faker import Faker\n\nfake = Faker(locale=\"pl_PL\")\n\n\ndef fake_polish_phone_number(_=None):\n    return fake.phone_number()\n\n\nfake_polish_phone_number()\n\n    '665 631 080'\n\n\n\\ We used Faker to create pseudo data. Now we can create an operator and add it to the anonymizer. For complete information about operators and their creation, see the Presidio documentation for simple and custom anonymization.\n\nfrom presidio_anonymizer.entities import OperatorConfig\n\nnew_operators = {\n    \"POLISH_PHONE_NUMBER\": OperatorConfig(\n        \"custom\", {\"lambda\": fake_polish_phone_number}\n    )\n}\n\nanonymizer.add_operators(new_operators)\n\nanonymizer.anonymize(\"My polish phone number is 666555444\")\n\n    'My polish phone number is 538 521 657'\n\nImportant considerations‚Äã\nAnonymizer detection rates‚Äã\n\nThe level of anonymization and the precision of detection are just as good as the quality of the recognizers implemented.\n\nTexts from different sources and in different languages have varying characteristics, so it is necessary to test the detection precision and iteratively add recognizers and operators to achieve better and better results.\n\nMicrosoft Presidio gives a lot of freedom to refine anonymization. The library's author has provided his recommendations and a step-by-step guide for improving detection rates.\n\nInstance anonymization‚Äã\n\nPresidioAnonymizer has no built-in memory. Therefore, two occurrences of the entity in the subsequent texts will be replaced with two different fake values:\n\nprint(anonymizer.anonymize(\"My name is John Doe. Hi John Doe!\"))\nprint(anonymizer.anonymize(\"My name is John Doe. Hi John Doe!\"))\n\n    My name is Robert Morales. Hi Robert Morales!\n    My name is Kelly Mccoy. Hi Kelly Mccoy!\n\n\nTo preserve previous anonymization results, use PresidioReversibleAnonymizer, which has built-in memory:\n\nfrom langchain_experimental.data_anonymizer import PresidioReversibleAnonymizer\n\nanonymizer_with_memory = PresidioReversibleAnonymizer()\n\nprint(anonymizer_with_memory.anonymize(\"My name is John Doe. Hi John Doe!\"))\nprint(anonymizer_with_memory.anonymize(\"My name is John Doe. Hi John Doe!\"))\n\n    My name is Ashley Cervantes. Hi Ashley Cervantes!\n    My name is Ashley Cervantes. Hi Ashley Cervantes!\n\n\nYou can learn more about PresidioReversibleAnonymizer in the next section.\n\nPrevious\nModel comparison\nNext\nReversible anonymization"
}