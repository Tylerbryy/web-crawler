{
	"title": "Custom agent | 🦜️🔗 Langchain",
	"url": "https://python.langchain.com/docs/modules/agents/how_to/custom_agent",
	"html": "ModulesAgentsHow-toCustom agent\nCustom agent\n\nThis notebook goes through how to create your own custom agent.\n\nAn agent consists of two parts:\n\n- Tools: The tools the agent has available to use.\n- The agent class itself: this decides which action to take.\n    \n    \n\n\nIn this notebook we walk through how to create a custom agent.\n\nfrom langchain.agents import AgentExecutor, BaseSingleActionAgent, Tool\nfrom langchain.utilities import SerpAPIWrapper\n\nsearch = SerpAPIWrapper()\ntools = [\n    Tool(\n        name=\"Search\",\n        func=search.run,\n        description=\"useful for when you need to answer questions about current events\",\n        return_direct=True,\n    )\n]\n\nfrom typing import Any, List, Tuple, Union\n\nfrom langchain.schema import AgentAction, AgentFinish\n\n\nclass FakeAgent(BaseSingleActionAgent):\n    \"\"\"Fake Custom Agent.\"\"\"\n\n    @property\n    def input_keys(self):\n        return [\"input\"]\n\n    def plan(\n        self, intermediate_steps: List[Tuple[AgentAction, str]], **kwargs: Any\n    ) -> Union[AgentAction, AgentFinish]:\n        \"\"\"Given input, decided what to do.\n\n        Args:\n            intermediate_steps: Steps the LLM has taken to date,\n                along with observations\n            **kwargs: User inputs.\n\n        Returns:\n            Action specifying what tool to use.\n        \"\"\"\n        return AgentAction(tool=\"Search\", tool_input=kwargs[\"input\"], log=\"\")\n\n    async def aplan(\n        self, intermediate_steps: List[Tuple[AgentAction, str]], **kwargs: Any\n    ) -> Union[AgentAction, AgentFinish]:\n        \"\"\"Given input, decided what to do.\n\n        Args:\n            intermediate_steps: Steps the LLM has taken to date,\n                along with observations\n            **kwargs: User inputs.\n\n        Returns:\n            Action specifying what tool to use.\n        \"\"\"\n        return AgentAction(tool=\"Search\", tool_input=kwargs[\"input\"], log=\"\")\n\nagent = FakeAgent()\n\nagent_executor = AgentExecutor.from_agent_and_tools(\n    agent=agent, tools=tools, verbose=True\n)\n\nagent_executor.run(\"How many people live in canada as of 2023?\")\n\n    \n    \n    > Entering new AgentExecutor chain...\n    The current population of Canada is 38,669,152 as of Monday, April 24, 2023, based on Worldometer elaboration of the latest United Nations data.\n    \n    > Finished chain.\n\n\n\n\n\n    'The current population of Canada is 38,669,152 as of Monday, April 24, 2023, based on Worldometer elaboration of the latest United Nations data.'\n\nPrevious\nCustom functions with OpenAI Functions Agent\nNext\nCustom agent with tool retrieval"
}