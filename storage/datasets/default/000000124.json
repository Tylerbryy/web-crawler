{
	"title": "Stream custom generator functions | 🦜️🔗 Langchain",
	"url": "https://python.langchain.com/docs/expression_language/how_to/generators",
	"html": "LangChain Expression LanguageHow toStream custom generator functions\nStream custom generator functions\n\nYou can use generator functions (ie. functions that use the yield keyword, and behave like iterators) in a LCEL pipeline.\n\nThe signature of these generators should be Iterator[Input] -> Iterator[Output]. Or for async generators: AsyncIterator[Input] -> AsyncIterator[Output].\n\nThese are useful for:\n\nimplementing a custom output parser\nmodifying the output of a previous step, while preserving streaming capabilities\n\nLet's implement a custom output parser for comma-separated lists.\n\nfrom typing import Iterator, List\n\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.prompts.chat import ChatPromptTemplate\nfrom langchain.schema.output_parser import StrOutputParser\n\nprompt = ChatPromptTemplate.from_template(\n    \"Write a comma-separated list of 5 animals similar to: {animal}\"\n)\nmodel = ChatOpenAI(temperature=0.0)\n\nstr_chain = prompt | model | StrOutputParser()\n\nfor chunk in str_chain.stream({\"animal\": \"bear\"}):\n    print(chunk, end=\"\", flush=True)\n\n    lion, tiger, wolf, gorilla, panda\n\nstr_chain.invoke({\"animal\": \"bear\"})\n\n    'lion, tiger, wolf, gorilla, panda'\n\n# This is a custom parser that splits an iterator of llm tokens\n# into a list of strings separated by commas\ndef split_into_list(input: Iterator[str]) -> Iterator[List[str]]:\n    # hold partial input until we get a comma\n    buffer = \"\"\n    for chunk in input:\n        # add current chunk to buffer\n        buffer += chunk\n        # while there are commas in the buffer\n        while \",\" in buffer:\n            # split buffer on comma\n            comma_index = buffer.index(\",\")\n            # yield everything before the comma\n            yield [buffer[:comma_index].strip()]\n            # save the rest for the next iteration\n            buffer = buffer[comma_index + 1 :]\n    # yield the last chunk\n    yield [buffer.strip()]\n\nlist_chain = str_chain | split_into_list\n\nfor chunk in list_chain.stream({\"animal\": \"bear\"}):\n    print(chunk, flush=True)\n\n    ['lion']\n    ['tiger']\n    ['wolf']\n    ['gorilla']\n    ['panda']\n\nlist_chain.invoke({\"animal\": \"bear\"})\n\n    ['lion', 'tiger', 'wolf', 'gorilla', 'panda']\n\nPrevious\nRun custom functions\nNext\nParallelize steps"
}