{
	"title": "XML Agent | 🦜️🔗 Langchain",
	"url": "https://python.langchain.com/docs/modules/agents/agent_types/xml_agent",
	"html": "ModulesAgentsAgent TypesXML Agent\nXML Agent\n\nSome language models (like Anthropic's Claude) are particularly good at reasoning/writing XML. This goes over how to use an agent that uses XML when prompting.\n\nInitialize the tools​\n\nWe will initialize some fake tools for demo purposes\n\nfrom langchain.agents import tool\n\n\n@tool\ndef search(query: str) -> str:\n    \"\"\"Search things about current events.\"\"\"\n    return \"32 degrees\"\n\ntools = [search]\n\nfrom langchain.chat_models import ChatAnthropic\n\nmodel = ChatAnthropic(model=\"claude-2\")\n\nUse LangChain Expression Language​\n\nWe will first show how to create this agent using LangChain Expression Language\n\nfrom langchain import hub\nfrom langchain.agents.format_scratchpad import format_xml\nfrom langchain.agents.output_parsers import XMLAgentOutputParser\nfrom langchain.tools.render import render_text_description\n\nprompt = hub.pull(\"hwchase17/xml-agent\")\n\nprompt = prompt.partial(\n    tools=render_text_description(tools),\n    tool_names=\", \".join([t.name for t in tools]),\n)\n\nllm_with_stop = model.bind(stop=[\"</tool_input>\"])\n\nagent = (\n    {\n        \"question\": lambda x: x[\"question\"],\n        \"agent_scratchpad\": lambda x: format_xml(x[\"intermediate_steps\"]),\n    }\n    | prompt\n    | llm_with_stop\n    | XMLAgentOutputParser()\n)\n\nfrom langchain.agents import AgentExecutor\n\nagent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True)\n\nagent_executor.invoke({\"question\": \"whats the weather in New york?\"})\n\n    \n    \n    > Entering new AgentExecutor chain...\n     <tool>search</tool>\n    <tool_input>weather in new york32 degrees <tool>search</tool>\n    <tool_input>weather in new york32 degrees <final_answer>\n    The weather in New York is 32 degrees.\n    </final_answer>\n    \n    > Finished chain.\n\n\n\n\n\n    {'question': 'whats the weather in New york?',\n     'output': '\\nThe weather in New York is 32 degrees.\\n'}\n\nUse off-the-shelf agent​\nfrom langchain.agents import XMLAgent\nfrom langchain.chains import LLMChain\n\nchain = LLMChain(\n    llm=model,\n    prompt=XMLAgent.get_default_prompt(),\n    output_parser=XMLAgent.get_default_output_parser(),\n)\nagent = XMLAgent(tools=tools, llm_chain=chain)\n\nagent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True)\n\nagent_executor.invoke({\"input\": \"whats the weather in New york?\"})\n\n    \n    \n    > Entering new AgentExecutor chain...\n     <tool>search</tool>\n    <tool_input>weather in new york32 degrees\n    \n    <final_answer>The weather in New York is 32 degrees\n    \n    > Finished chain.\n\n\n\n\n\n    {'input': 'whats the weather in New york?',\n     'output': 'The weather in New York is 32 degrees'}\n\nPrevious\nStructured tool chat\nNext\nAdd Memory to OpenAI Functions Agent"
}