{
	"title": "Backed by a Vector Store | 🦜️🔗 Langchain",
	"url": "https://python.langchain.com/docs/modules/memory/types/vectorstore_retriever_memory",
	"html": "ModulesMoreMemoryMemory typesBacked by a Vector Store\nBacked by a Vector Store\n\nVectorStoreRetrieverMemory stores memories in a vector store and queries the top-K most \"salient\" docs every time it is called.\n\nThis differs from most of the other Memory classes in that it doesn't explicitly track the order of interactions.\n\nIn this case, the \"docs\" are previous conversation snippets. This can be useful to refer to relevant pieces of information that the AI was told earlier in the conversation.\n\nfrom datetime import datetime\nfrom langchain.embeddings.openai import OpenAIEmbeddings\nfrom langchain.llms import OpenAI\nfrom langchain.memory import VectorStoreRetrieverMemory\nfrom langchain.chains import ConversationChain\nfrom langchain.prompts import PromptTemplate\n\nInitialize your vector store​\n\nDepending on the store you choose, this step may look different. Consult the relevant vector store documentation for more details.\n\nimport faiss\n\nfrom langchain.docstore import InMemoryDocstore\nfrom langchain.vectorstores import FAISS\n\n\nembedding_size = 1536 # Dimensions of the OpenAIEmbeddings\nindex = faiss.IndexFlatL2(embedding_size)\nembedding_fn = OpenAIEmbeddings().embed_query\nvectorstore = FAISS(embedding_fn, index, InMemoryDocstore({}), {})\n\nCreate your VectorStoreRetrieverMemory​\n\nThe memory object is instantiated from any vector store retriever.\n\n# In actual usage, you would set `k` to be a higher value, but we use k=1 to show that\n# the vector lookup still returns the semantically relevant information\nretriever = vectorstore.as_retriever(search_kwargs=dict(k=1))\nmemory = VectorStoreRetrieverMemory(retriever=retriever)\n\n# When added to an agent, the memory object can save pertinent information from conversations or used tools\nmemory.save_context({\"input\": \"My favorite food is pizza\"}, {\"output\": \"that's good to know\"})\nmemory.save_context({\"input\": \"My favorite sport is soccer\"}, {\"output\": \"...\"})\nmemory.save_context({\"input\": \"I don't the Celtics\"}, {\"output\": \"ok\"}) #\n\n# Notice the first result returned is the memory pertaining to tax help, which the language model deems more semantically relevant\n# to a 1099 than the other documents, despite them both containing numbers.\nprint(memory.load_memory_variables({\"prompt\": \"what sport should i watch?\"})[\"history\"])\n\n    input: My favorite sport is soccer\n    output: ...\n\nUsing in a chain​\n\nLet's walk through an example, again setting verbose=True so we can see the prompt.\n\nllm = OpenAI(temperature=0) # Can be any valid LLM\n_DEFAULT_TEMPLATE = \"\"\"The following is a friendly conversation between a human and an AI. The AI is talkative and provides lots of specific details from its context. If the AI does not know the answer to a question, it truthfully says it does not know.\n\nRelevant pieces of previous conversation:\n{history}\n\n(You do not need to use these pieces of information if not relevant)\n\nCurrent conversation:\nHuman: {input}\nAI:\"\"\"\nPROMPT = PromptTemplate(\n    input_variables=[\"history\", \"input\"], template=_DEFAULT_TEMPLATE\n)\nconversation_with_summary = ConversationChain(\n    llm=llm,\n    prompt=PROMPT,\n    # We set a very low max_token_limit for the purposes of testing.\n    memory=memory,\n    verbose=True\n)\nconversation_with_summary.predict(input=\"Hi, my name is Perry, what's up?\")\n\n\n\n    > Entering new ConversationChain chain...\n    Prompt after formatting:\n    The following is a friendly conversation between a human and an AI. The AI is talkative and provides lots of specific details from its context. If the AI does not know the answer to a question, it truthfully says it does not know.\n\n    Relevant pieces of previous conversation:\n    input: My favorite food is pizza\n    output: that's good to know\n\n    (You do not need to use these pieces of information if not relevant)\n\n    Current conversation:\n    Human: Hi, my name is Perry, what's up?\n    AI:\n\n    > Finished chain.\n\n\n\n\n\n    \" Hi Perry, I'm doing well. How about you?\"\n\n# Here, the basketball related content is surfaced\nconversation_with_summary.predict(input=\"what's my favorite sport?\")\n\n\n\n    > Entering new ConversationChain chain...\n    Prompt after formatting:\n    The following is a friendly conversation between a human and an AI. The AI is talkative and provides lots of specific details from its context. If the AI does not know the answer to a question, it truthfully says it does not know.\n\n    Relevant pieces of previous conversation:\n    input: My favorite sport is soccer\n    output: ...\n\n    (You do not need to use these pieces of information if not relevant)\n\n    Current conversation:\n    Human: what's my favorite sport?\n    AI:\n\n    > Finished chain.\n\n\n\n\n\n    ' You told me earlier that your favorite sport is soccer.'\n\n# Even though the language model is stateless, since relevant memory is fetched, it can \"reason\" about the time.\n# Timestamping memories and data is useful in general to let the agent determine temporal relevance\nconversation_with_summary.predict(input=\"Whats my favorite food\")\n\n\n\n    > Entering new ConversationChain chain...\n    Prompt after formatting:\n    The following is a friendly conversation between a human and an AI. The AI is talkative and provides lots of specific details from its context. If the AI does not know the answer to a question, it truthfully says it does not know.\n\n    Relevant pieces of previous conversation:\n    input: My favorite food is pizza\n    output: that's good to know\n\n    (You do not need to use these pieces of information if not relevant)\n\n    Current conversation:\n    Human: Whats my favorite food\n    AI:\n\n    > Finished chain.\n\n\n\n\n\n    ' You said your favorite food is pizza.'\n\n# The memories from the conversation are automatically stored,\n# since this query best matches the introduction chat above,\n# the agent is able to 'remember' the user's name.\nconversation_with_summary.predict(input=\"What's my name?\")\n\n\n\n    > Entering new ConversationChain chain...\n    Prompt after formatting:\n    The following is a friendly conversation between a human and an AI. The AI is talkative and provides lots of specific details from its context. If the AI does not know the answer to a question, it truthfully says it does not know.\n\n    Relevant pieces of previous conversation:\n    input: Hi, my name is Perry, what's up?\n    response:  Hi Perry, I'm doing well. How about you?\n\n    (You do not need to use these pieces of information if not relevant)\n\n    Current conversation:\n    Human: What's my name?\n    AI:\n\n    > Finished chain.\n\n\n\n\n\n    ' Your name is Perry.'\n\nPrevious\nConversation Token Buffer\nNext\nMemory"
}