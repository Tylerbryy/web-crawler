{
	"title": "Configure chain internals at runtime | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/expression_language/how_to/configure",
	"html": "LangChain Expression LanguageHow toConfigure chain internals at runtime\nConfigure chain internals at runtime\n\nOftentimes you may want to experiment with, or even expose to the end user, multiple different ways of doing things. In order to make this experience as easy as possible, we have defined two methods.\n\nFirst, a configurable_fields method. This lets you configure particular fields of a runnable.\n\nSecond, a configurable_alternatives method. With this method, you can list out alternatives for any particular runnable that can be set during runtime.\n\nConfiguration Fields‚Äã\nWith LLMs‚Äã\n\nWith LLMs we can configure things like temperature\n\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.prompts import PromptTemplate\n\nmodel = ChatOpenAI(temperature=0).configurable_fields(\n    temperature=ConfigurableField(\n        id=\"llm_temperature\",\n        name=\"LLM Temperature\",\n        description=\"The temperature of the LLM\",\n    )\n)\n\nmodel.invoke(\"pick a random number\")\n\n    AIMessage(content='7')\n\nmodel.with_config(configurable={\"llm_temperature\": 0.9}).invoke(\"pick a random number\")\n\n    AIMessage(content='34')\n\n\nWe can also do this when its used as part of a chain\n\nprompt = PromptTemplate.from_template(\"Pick a random number above {x}\")\nchain = prompt | model\n\nchain.invoke({\"x\": 0})\n\n    AIMessage(content='57')\n\nchain.with_config(configurable={\"llm_temperature\": 0.9}).invoke({\"x\": 0})\n\n    AIMessage(content='6')\n\nWith HubRunnables‚Äã\n\nThis is useful to allow for switching of prompts\n\nfrom langchain.runnables.hub import HubRunnable\n\nprompt = HubRunnable(\"rlm/rag-prompt\").configurable_fields(\n    owner_repo_commit=ConfigurableField(\n        id=\"hub_commit\",\n        name=\"Hub Commit\",\n        description=\"The Hub commit to pull from\",\n    )\n)\n\nprompt.invoke({\"question\": \"foo\", \"context\": \"bar\"})\n\n    ChatPromptValue(messages=[HumanMessage(content=\"You are an assistant for question-answering tasks. Use the following pieces of retrieved context to answer the question. If you don't know the answer, just say that you don't know. Use three sentences maximum and keep the answer concise.\\nQuestion: foo \\nContext: bar \\nAnswer:\")])\n\nprompt.with_config(configurable={\"hub_commit\": \"rlm/rag-prompt-llama\"}).invoke(\n    {\"question\": \"foo\", \"context\": \"bar\"}\n)\n\n    ChatPromptValue(messages=[HumanMessage(content=\"[INST]<<SYS>> You are an assistant for question-answering tasks. Use the following pieces of retrieved context to answer the question. If you don't know the answer, just say that you don't know. Use three sentences maximum and keep the answer concise.<</SYS>> \\nQuestion: foo \\nContext: bar \\nAnswer: [/INST]\")])\n\nConfigurable Alternatives‚Äã\nWith LLMs‚Äã\n\nLet's take a look at doing this with LLMs\n\nfrom langchain.chat_models import ChatAnthropic, ChatOpenAI\nfrom langchain.prompts import PromptTemplate\nfrom langchain.schema.runnable import ConfigurableField\n\nllm = ChatAnthropic(temperature=0).configurable_alternatives(\n    # This gives this field an id\n    # When configuring the end runnable, we can then use this id to configure this field\n    ConfigurableField(id=\"llm\"),\n    # This sets a default_key.\n    # If we specify this key, the default LLM (ChatAnthropic initialized above) will be used\n    default_key=\"anthropic\",\n    # This adds a new option, with name `openai` that is equal to `ChatOpenAI()`\n    openai=ChatOpenAI(),\n    # This adds a new option, with name `gpt4` that is equal to `ChatOpenAI(model=\"gpt-4\")`\n    gpt4=ChatOpenAI(model=\"gpt-4\"),\n    # You can add more configuration options here\n)\nprompt = PromptTemplate.from_template(\"Tell me a joke about {topic}\")\nchain = prompt | llm\n\n# By default it will call Anthropic\nchain.invoke({\"topic\": \"bears\"})\n\n    AIMessage(content=\" Here's a silly joke about bears:\\n\\nWhat do you call a bear with no teeth?\\nA gummy bear!\")\n\n# We can use `.with_config(configurable={\"llm\": \"openai\"})` to specify an llm to use\nchain.with_config(configurable={\"llm\": \"openai\"}).invoke({\"topic\": \"bears\"})\n\n    AIMessage(content=\"Sure, here's a bear joke for you:\\n\\nWhy don't bears wear shoes?\\n\\nBecause they already have bear feet!\")\n\n# If we use the `default_key` then it uses the default\nchain.with_config(configurable={\"llm\": \"anthropic\"}).invoke({\"topic\": \"bears\"})\n\n    AIMessage(content=\" Here's a silly joke about bears:\\n\\nWhat do you call a bear with no teeth?\\nA gummy bear!\")\n\nWith Prompts‚Äã\n\nWe can do a similar thing, but alternate between prompts\n\nllm = ChatAnthropic(temperature=0)\nprompt = PromptTemplate.from_template(\n    \"Tell me a joke about {topic}\"\n).configurable_alternatives(\n    # This gives this field an id\n    # When configuring the end runnable, we can then use this id to configure this field\n    ConfigurableField(id=\"prompt\"),\n    # This sets a default_key.\n    # If we specify this key, the default LLM (ChatAnthropic initialized above) will be used\n    default_key=\"joke\",\n    # This adds a new option, with name `poem`\n    poem=PromptTemplate.from_template(\"Write a short poem about {topic}\"),\n    # You can add more configuration options here\n)\nchain = prompt | llm\n\n# By default it will write a joke\nchain.invoke({\"topic\": \"bears\"})\n\n    AIMessage(content=\" Here's a silly joke about bears:\\n\\nWhat do you call a bear with no teeth?\\nA gummy bear!\")\n\n# We can configure it write a poem\nchain.with_config(configurable={\"prompt\": \"poem\"}).invoke({\"topic\": \"bears\"})\n\n    AIMessage(content=' Here is a short poem about bears:\\n\\nThe bears awaken from their sleep\\nAnd lumber out into the deep\\nForests filled with trees so tall\\nForaging for food before nightfall \\nTheir furry coats and claws so sharp\\nSniffing for berries and fish to nab\\nLumbering about without a care\\nThe mighty grizzly and black bear\\nProud creatures, wild and free\\nRuling their domain majestically\\nWandering the woods they call their own\\nBefore returning to their dens alone')\n\nWith Prompts and LLMs‚Äã\n\nWe can also have multiple things configurable! Here's an example doing that with both prompts and LLMs.\n\nllm = ChatAnthropic(temperature=0).configurable_alternatives(\n    # This gives this field an id\n    # When configuring the end runnable, we can then use this id to configure this field\n    ConfigurableField(id=\"llm\"),\n    # This sets a default_key.\n    # If we specify this key, the default LLM (ChatAnthropic initialized above) will be used\n    default_key=\"anthropic\",\n    # This adds a new option, with name `openai` that is equal to `ChatOpenAI()`\n    openai=ChatOpenAI(),\n    # This adds a new option, with name `gpt4` that is equal to `ChatOpenAI(model=\"gpt-4\")`\n    gpt4=ChatOpenAI(model=\"gpt-4\"),\n    # You can add more configuration options here\n)\nprompt = PromptTemplate.from_template(\n    \"Tell me a joke about {topic}\"\n).configurable_alternatives(\n    # This gives this field an id\n    # When configuring the end runnable, we can then use this id to configure this field\n    ConfigurableField(id=\"prompt\"),\n    # This sets a default_key.\n    # If we specify this key, the default LLM (ChatAnthropic initialized above) will be used\n    default_key=\"joke\",\n    # This adds a new option, with name `poem`\n    poem=PromptTemplate.from_template(\"Write a short poem about {topic}\"),\n    # You can add more configuration options here\n)\nchain = prompt | llm\n\n# We can configure it write a poem with OpenAI\nchain.with_config(configurable={\"prompt\": \"poem\", \"llm\": \"openai\"}).invoke(\n    {\"topic\": \"bears\"}\n)\n\n    AIMessage(content=\"In the forest, where tall trees sway,\\nA creature roams, both fierce and gray.\\nWith mighty paws and piercing eyes,\\nThe bear, a symbol of strength, defies.\\n\\nThrough snow-kissed mountains, it does roam,\\nA guardian of its woodland home.\\nWith fur so thick, a shield of might,\\nIt braves the coldest winter night.\\n\\nA gentle giant, yet wild and free,\\nThe bear commands respect, you see.\\nWith every step, it leaves a trace,\\nOf untamed power and ancient grace.\\n\\nFrom honeyed feast to salmon's leap,\\nIt takes its place, in nature's keep.\\nA symbol of untamed delight,\\nThe bear, a wonder, day and night.\\n\\nSo let us honor this noble beast,\\nIn forests where its soul finds peace.\\nFor in its presence, we come to know,\\nThe untamed spirit that in us also flows.\")\n\n# We can always just configure only one if we want\nchain.with_config(configurable={\"llm\": \"openai\"}).invoke({\"topic\": \"bears\"})\n\n    AIMessage(content=\"Sure, here's a bear joke for you:\\n\\nWhy don't bears wear shoes?\\n\\nBecause they have bear feet!\")\n\nSaving configurations‚Äã\n\nWe can also easily save configured chains as their own objects\n\nopenai_poem = chain.with_config(configurable={\"llm\": \"openai\"})\n\nopenai_poem.invoke({\"topic\": \"bears\"})\n\n    AIMessage(content=\"Why don't bears wear shoes?\\n\\nBecause they have bear feet!\")\n\nPrevious\nBind runtime args\nNext\nAdd fallbacks"
}