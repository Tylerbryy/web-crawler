{
	"title": "ReAct | 🦜️🔗 Langchain",
	"url": "https://python.langchain.com/docs/modules/agents/agent_types/react",
	"html": "ModulesAgentsAgent TypesReAct\nReAct\n\nThis walkthrough showcases using an agent to implement the ReAct logic.\n\nfrom langchain.agents import AgentType, initialize_agent, load_tools\nfrom langchain.llms import OpenAI\n\n\nFirst, let's load the language model we're going to use to control the agent.\n\nllm = OpenAI(temperature=0)\n\n\nNext, let's load some tools to use. Note that the llm-math tool uses an LLM, so we need to pass that in.\n\ntools = load_tools([\"serpapi\", \"llm-math\"], llm=llm)\n\nUsing LCEL​\n\nWe will first show how to create the agent using LCEL\n\nfrom langchain import hub\nfrom langchain.agents.format_scratchpad import format_log_to_str\nfrom langchain.agents.output_parsers import ReActSingleInputOutputParser\nfrom langchain.tools.render import render_text_description\n\nprompt = hub.pull(\"hwchase17/react\")\nprompt = prompt.partial(\n    tools=render_text_description(tools),\n    tool_names=\", \".join([t.name for t in tools]),\n)\n\nllm_with_stop = llm.bind(stop=[\"\\nObservation\"])\n\nagent = (\n    {\n        \"input\": lambda x: x[\"input\"],\n        \"agent_scratchpad\": lambda x: format_log_to_str(x[\"intermediate_steps\"]),\n    }\n    | prompt\n    | llm_with_stop\n    | ReActSingleInputOutputParser()\n)\n\nfrom langchain.agents import AgentExecutor\n\nagent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True)\n\nagent_executor.invoke(\n    {\n        \"input\": \"Who is Leo DiCaprio's girlfriend? What is her current age raised to the 0.43 power?\"\n    }\n)\n\n    \n    \n    > Entering new AgentExecutor chain...\n     I need to find out who Leo DiCaprio's girlfriend is and then calculate her age raised to the 0.43 power.\n    Action: Search\n    Action Input: \"Leo DiCaprio girlfriend\"model Vittoria Ceretti I need to find out Vittoria Ceretti's age\n    Action: Search\n    Action Input: \"Vittoria Ceretti age\"25 years I need to calculate 25 raised to the 0.43 power\n    Action: Calculator\n    Action Input: 25^0.43Answer: 3.991298452658078 I now know the final answer\n    Final Answer: Leo DiCaprio's girlfriend is Vittoria Ceretti and her current age raised to the 0.43 power is 3.991298452658078.\n    \n    > Finished chain.\n\n\n\n\n\n    {'input': \"Who is Leo DiCaprio's girlfriend? What is her current age raised to the 0.43 power?\",\n     'output': \"Leo DiCaprio's girlfriend is Vittoria Ceretti and her current age raised to the 0.43 power is 3.991298452658078.\"}\n\nUsing ZeroShotReactAgent​\n\nWe will now show how to use the agent with an off-the-shelf agent implementation\n\nagent_executor = initialize_agent(\n    tools, llm, agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION, verbose=True\n)\n\nagent_executor.invoke(\n    {\n        \"input\": \"Who is Leo DiCaprio's girlfriend? What is her current age raised to the 0.43 power?\"\n    }\n)\n\n    \n    \n    > Entering new AgentExecutor chain...\n     I need to find out who Leo DiCaprio's girlfriend is and then calculate her age raised to the 0.43 power.\n    Action: Search\n    Action Input: \"Leo DiCaprio girlfriend\"\n    Observation: model Vittoria Ceretti\n    Thought: I need to find out Vittoria Ceretti's age\n    Action: Search\n    Action Input: \"Vittoria Ceretti age\"\n    Observation: 25 years\n    Thought: I need to calculate 25 raised to the 0.43 power\n    Action: Calculator\n    Action Input: 25^0.43\n    Observation: Answer: 3.991298452658078\n    Thought: I now know the final answer\n    Final Answer: Leo DiCaprio's girlfriend is Vittoria Ceretti and her current age raised to the 0.43 power is 3.991298452658078.\n    \n    > Finished chain.\n\n\n\n\n\n    {'input': \"Who is Leo DiCaprio's girlfriend? What is her current age raised to the 0.43 power?\",\n     'output': \"Leo DiCaprio's girlfriend is Vittoria Ceretti and her current age raised to the 0.43 power is 3.991298452658078.\"}\n\nUsing chat models​\n\nYou can also create ReAct agents that use chat models instead of LLMs as the agent driver.\n\nThe main difference here is a different prompt. We will use JSON to encode the agent's actions (chat models are a bit tougher to steet, so using JSON helps to enforce the output format).\n\nfrom langchain.chat_models import ChatOpenAI\n\nchat_model = ChatOpenAI(temperature=0)\n\nprompt = hub.pull(\"hwchase17/react-json\")\nprompt = prompt.partial(\n    tools=render_text_description(tools),\n    tool_names=\", \".join([t.name for t in tools]),\n)\n\nchat_model_with_stop = chat_model.bind(stop=[\"\\nObservation\"])\n\nfrom langchain.agents.output_parsers import ReActJsonSingleInputOutputParser\n\nagent = (\n    {\n        \"input\": lambda x: x[\"input\"],\n        \"agent_scratchpad\": lambda x: format_log_to_str(x[\"intermediate_steps\"]),\n    }\n    | prompt\n    | chat_model_with_stop\n    | ReActJsonSingleInputOutputParser()\n)\n\nagent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True)\n\nagent_executor.invoke(\n    {\n        \"input\": \"Who is Leo DiCaprio's girlfriend? What is her current age raised to the 0.43 power?\"\n    }\n)\n\n\nWe can also use an off-the-shelf agent class\n\nagent = initialize_agent(\n    tools, chat_model, agent=AgentType.CHAT_ZERO_SHOT_REACT_DESCRIPTION, verbose=True\n)\nagent.run(\n    \"Who is Leo DiCaprio's girlfriend? What is her current age raised to the 0.43 power?\"\n)\n\nPrevious\nOpenAI tools\nNext\nReAct document store"
}