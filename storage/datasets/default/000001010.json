{
	"title": "Memorize | 🦜️🔗 Langchain",
	"url": "https://python.langchain.com/docs/integrations/tools/memorize",
	"html": "ComponentsToolsMemorize\nMemorize\n\nFine-tuning LLM itself to memorize information using unsupervised learning.\n\nThis tool requires LLMs that support fine-tuning. Currently, only langchain.llms import GradientLLM is supported.\n\nImports​\nimport os\n\nfrom langchain.agents import AgentExecutor, AgentType, initialize_agent, load_tools\nfrom langchain.chains import LLMChain\nfrom langchain.llms import GradientLLM\nfrom langchain.memory import ConversationBufferMemory\n\nSet the Environment API Key​\n\nMake sure to get your API key from Gradient AI. You are given $10 in free credits to test and fine-tune different models.\n\nfrom getpass import getpass\n\nif not os.environ.get(\"GRADIENT_ACCESS_TOKEN\", None):\n    # Access token under https://auth.gradient.ai/select-workspace\n    os.environ[\"GRADIENT_ACCESS_TOKEN\"] = getpass(\"gradient.ai access token:\")\nif not os.environ.get(\"GRADIENT_WORKSPACE_ID\", None):\n    # `ID` listed in `$ gradient workspace list`\n    # also displayed after login at at https://auth.gradient.ai/select-workspace\n    os.environ[\"GRADIENT_WORKSPACE_ID\"] = getpass(\"gradient.ai workspace id:\")\nif not os.environ.get(\"GRADIENT_MODEL_ADAPTER_ID\", None):\n    # `ID` listed in `$ gradient model list --workspace-id \"$GRADIENT_WORKSPACE_ID\"`\n    os.environ[\"GRADIENT_MODEL_ID\"] = getpass(\"gradient.ai model id:\")\n\n\nOptional: Validate your Environment variables GRADIENT_ACCESS_TOKEN and GRADIENT_WORKSPACE_ID to get currently deployed models.\n\nCreate the GradientLLM instance​\n\nYou can specify different parameters such as the model name, max tokens generated, temperature, etc.\n\nllm = GradientLLM(\n    model_id=os.environ[\"GRADIENT_MODEL_ID\"],\n    # # optional: set new credentials, they default to environment variables\n    # gradient_workspace_id=os.environ[\"GRADIENT_WORKSPACE_ID\"],\n    # gradient_access_token=os.environ[\"GRADIENT_ACCESS_TOKEN\"],\n)\n\nLoad tools​\ntools = load_tools([\"memorize\"], llm=llm)\n\nInitiate the Agent​\nagent = initialize_agent(\n    tools,\n    llm,\n    agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,\n    verbose=True,\n    # memory=ConversationBufferMemory(memory_key=\"chat_history\", return_messages=True),\n)\n\nRun the agent​\n\nAsk the agent to memorize a piece of text.\n\nagent.run(\n    \"Please remember the fact in detail:\\nWith astonishing dexterity, Zara Tubikova set a world record by solving a 4x4 Rubik's Cube variation blindfolded in under 20 seconds, employing only their feet.\"\n)\n\n    \n    \n    > Entering new AgentExecutor chain...\n    I should memorize this fact.\n    Action: Memorize\n    Action Input: Zara T\n    Observation: Train complete. Loss: 1.6853971333333335\n    Thought:I now know the final answer.\n    Final Answer: Zara Tubikova set a world\n    \n    > Finished chain.\n\n\n\n\n\n    'Zara Tubikova set a world'\n\nPrevious\nLemon Agent\nNext\nMetaphor Search"
}