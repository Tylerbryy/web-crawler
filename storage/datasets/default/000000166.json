{
	"title": "MultiVector Retriever | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/modules/data_connection/retrievers/multi_vector",
	"html": "ModulesRetrievalRetrieversMultiVector Retriever\nMultiVector Retriever\n\nIt can often be beneficial to store multiple vectors per document. There are multiple use cases where this is beneficial. LangChain has a base MultiVectorRetriever which makes querying this type of setup easy. A lot of the complexity lies in how to create the multiple vectors per document. This notebook covers some of the common ways to create those vectors and use the MultiVectorRetriever.\n\nThe methods to create multiple vectors per document include:\n\nSmaller chunks: split a document into smaller chunks, and embed those (this is ParentDocumentRetriever).\nSummary: create a summary for each document, embed that along with (or instead of) the document.\nHypothetical questions: create hypothetical questions that each document would be appropriate to answer, embed those along with (or instead of) the document.\n\nNote that this also enables another method of adding embeddings - manually. This is great because you can explicitly add questions or queries that should lead to a document being recovered, giving you more control.\n\nfrom langchain.retrievers.multi_vector import MultiVectorRetriever\n\nfrom langchain.document_loaders import TextLoader\nfrom langchain.embeddings import OpenAIEmbeddings\nfrom langchain.storage import InMemoryStore\nfrom langchain.text_splitter import RecursiveCharacterTextSplitter\nfrom langchain.vectorstores import Chroma\n\nloaders = [\n    TextLoader(\"../../paul_graham_essay.txt\"),\n    TextLoader(\"../../state_of_the_union.txt\"),\n]\ndocs = []\nfor l in loaders:\n    docs.extend(l.load())\ntext_splitter = RecursiveCharacterTextSplitter(chunk_size=10000)\ndocs = text_splitter.split_documents(docs)\n\nSmaller chunks‚Äã\n\nOften times it can be useful to retrieve larger chunks of information, but embed smaller chunks. This allows for embeddings to capture the semantic meaning as closely as possible, but for as much context as possible to be passed downstream. Note that this is what the ParentDocumentRetriever does. Here we show what is going on under the hood.\n\n# The vectorstore to use to index the child chunks\nvectorstore = Chroma(\n    collection_name=\"full_documents\", embedding_function=OpenAIEmbeddings()\n)\n# The storage layer for the parent documents\nstore = InMemoryStore()\nid_key = \"doc_id\"\n# The retriever (empty to start)\nretriever = MultiVectorRetriever(\n    vectorstore=vectorstore,\n    docstore=store,\n    id_key=id_key,\n)\nimport uuid\n\ndoc_ids = [str(uuid.uuid4()) for _ in docs]\n\n# The splitter to use to create smaller chunks\nchild_text_splitter = RecursiveCharacterTextSplitter(chunk_size=400)\n\nsub_docs = []\nfor i, doc in enumerate(docs):\n    _id = doc_ids[i]\n    _sub_docs = child_text_splitter.split_documents([doc])\n    for _doc in _sub_docs:\n        _doc.metadata[id_key] = _id\n    sub_docs.extend(_sub_docs)\n\nretriever.vectorstore.add_documents(sub_docs)\nretriever.docstore.mset(list(zip(doc_ids, docs)))\n\n# Vectorstore alone retrieves the small chunks\nretriever.vectorstore.similarity_search(\"justice breyer\")[0]\n\n    Document(page_content='Tonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service. \\n\\nOne of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court.', metadata={'doc_id': '10e9cbc0-4ba5-4d79-a09b-c033d1ba7b01', 'source': '../../state_of_the_union.txt'})\n\n# Retriever returns larger chunks\nlen(retriever.get_relevant_documents(\"justice breyer\")[0].page_content)\n\n    9874\n\nSummary‚Äã\n\nOftentimes a summary may be able to distill more accurately what a chunk is about, leading to better retrieval. Here we show how to create summaries, and then embed those.\n\nimport uuid\n\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.prompts import ChatPromptTemplate\nfrom langchain.schema.document import Document\nfrom langchain.schema.output_parser import StrOutputParser\n\nchain = (\n    {\"doc\": lambda x: x.page_content}\n    | ChatPromptTemplate.from_template(\"Summarize the following document:\\n\\n{doc}\")\n    | ChatOpenAI(max_retries=0)\n    | StrOutputParser()\n)\n\nsummaries = chain.batch(docs, {\"max_concurrency\": 5})\n\n# The vectorstore to use to index the child chunks\nvectorstore = Chroma(collection_name=\"summaries\", embedding_function=OpenAIEmbeddings())\n# The storage layer for the parent documents\nstore = InMemoryStore()\nid_key = \"doc_id\"\n# The retriever (empty to start)\nretriever = MultiVectorRetriever(\n    vectorstore=vectorstore,\n    docstore=store,\n    id_key=id_key,\n)\ndoc_ids = [str(uuid.uuid4()) for _ in docs]\n\nsummary_docs = [\n    Document(page_content=s, metadata={id_key: doc_ids[i]})\n    for i, s in enumerate(summaries)\n]\n\nretriever.vectorstore.add_documents(summary_docs)\nretriever.docstore.mset(list(zip(doc_ids, docs)))\n\n# # We can also add the original chunks to the vectorstore if we so want\n# for i, doc in enumerate(docs):\n#     doc.metadata[id_key] = doc_ids[i]\n# retriever.vectorstore.add_documents(docs)\n\nsub_docs = vectorstore.similarity_search(\"justice breyer\")\n\nsub_docs[0]\n\n    Document(page_content=\"The document is a transcript of a speech given by the President of the United States. The President discusses several important issues and initiatives, including the nomination of a Supreme Court Justice, border security and immigration reform, protecting women's rights, advancing LGBTQ+ equality, bipartisan legislation, addressing the opioid epidemic and mental health, supporting veterans, investigating the health effects of burn pits on military personnel, ending cancer, and the strength and resilience of the American people.\", metadata={'doc_id': '79fa2e9f-28d9-4372-8af3-2caf4f1de312'})\n\nretrieved_docs = retriever.get_relevant_documents(\"justice breyer\")\n\nlen(retrieved_docs[0].page_content)\n\n    9194\n\nHypothetical Queries‚Äã\n\nAn LLM can also be used to generate a list of hypothetical questions that could be asked of a particular document. These questions can then be embedded\n\nfunctions = [\n    {\n        \"name\": \"hypothetical_questions\",\n        \"description\": \"Generate hypothetical questions\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"questions\": {\n                    \"type\": \"array\",\n                    \"items\": {\"type\": \"string\"},\n                },\n            },\n            \"required\": [\"questions\"],\n        },\n    }\n]\n\nfrom langchain.output_parsers.openai_functions import JsonKeyOutputFunctionsParser\n\nchain = (\n    {\"doc\": lambda x: x.page_content}\n    # Only asking for 3 hypothetical questions, but this could be adjusted\n    | ChatPromptTemplate.from_template(\n        \"Generate a list of 3 hypothetical questions that the below document could be used to answer:\\n\\n{doc}\"\n    )\n    | ChatOpenAI(max_retries=0, model=\"gpt-4\").bind(\n        functions=functions, function_call={\"name\": \"hypothetical_questions\"}\n    )\n    | JsonKeyOutputFunctionsParser(key_name=\"questions\")\n)\n\nchain.invoke(docs[0])\n\n    [\"What was the author's initial impression of philosophy as a field of study, and how did it change when they got to college?\",\n     'Why did the author decide to switch their focus to Artificial Intelligence (AI)?',\n     \"What led to the author's disillusionment with the field of AI as it was practiced at the time?\"]\n\nhypothetical_questions = chain.batch(docs, {\"max_concurrency\": 5})\n\n# The vectorstore to use to index the child chunks\nvectorstore = Chroma(\n    collection_name=\"hypo-questions\", embedding_function=OpenAIEmbeddings()\n)\n# The storage layer for the parent documents\nstore = InMemoryStore()\nid_key = \"doc_id\"\n# The retriever (empty to start)\nretriever = MultiVectorRetriever(\n    vectorstore=vectorstore,\n    docstore=store,\n    id_key=id_key,\n)\ndoc_ids = [str(uuid.uuid4()) for _ in docs]\n\nquestion_docs = []\nfor i, question_list in enumerate(hypothetical_questions):\n    question_docs.extend(\n        [Document(page_content=s, metadata={id_key: doc_ids[i]}) for s in question_list]\n    )\n\nretriever.vectorstore.add_documents(question_docs)\nretriever.docstore.mset(list(zip(doc_ids, docs)))\n\nsub_docs = vectorstore.similarity_search(\"justice breyer\")\n\nsub_docs\n\n    [Document(page_content=\"What is the President's stance on immigration reform?\", metadata={'doc_id': '505d73e3-8350-46ec-a58e-3af032f04ab3'}),\n     Document(page_content=\"What is the President's stance on immigration reform?\", metadata={'doc_id': '1c9618f0-7660-4b4f-a37c-509cbbbf6dba'}),\n     Document(page_content=\"What is the President's stance on immigration reform?\", metadata={'doc_id': '82c08209-b904-46a8-9532-edd2380950b7'}),\n     Document(page_content='What measures is the President proposing to protect the rights of LGBTQ+ Americans?', metadata={'doc_id': '82c08209-b904-46a8-9532-edd2380950b7'})]\n\nretrieved_docs = retriever.get_relevant_documents(\"justice breyer\")\n\nlen(retrieved_docs[0].page_content)\n\n    9194\n\nPrevious\nEnsemble Retriever\nNext\nParent Document Retriever"
}