{
	"title": "Baidu Cloud ElasticSearch VectorSearch | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/integrations/vectorstores/baiducloud_vector_search",
	"html": "ComponentsVector storesBaidu Cloud ElasticSearch VectorSearch\nBaidu Cloud ElasticSearch VectorSearch\n\nBaidu Cloud VectorSearch is a fully managed, enterprise-level distributed search and analysis service which is 100% compatible to open source. Baidu Cloud VectorSearch provides low-cost, high-performance, and reliable retrieval and analysis platform level product services for structured/unstructured data. As a vector database , it supports multiple index types and similarity distance methods.\n\nBaidu Cloud ElasticSearch provides a privilege management mechanism, for you to configure the cluster privileges freely, so as to further ensure data security.\n\nThis notebook shows how to use functionality related to the Baidu Cloud ElasticSearch VectorStore. To run, you should have an Baidu Cloud ElasticSearch instance up and running:\n\nRead the help document to quickly familiarize and configure Baidu Cloud ElasticSearch instance.\n\nAfter the instance is up and running, follow these steps to split documents, get embeddings, connect to the baidu cloud elasticsearch instance, index documents, and perform vector retrieval.\n\nWe need to install the following Python packages first.\n\n#!pip install elasticsearch == 7.11.0\n\n\nFirst, we want to use QianfanEmbeddings so we have to get the Qianfan AK and SK. Details for QianFan is related to Baidu Qianfan Workshop\n\nimport getpass\nimport os\n\nos.environ[\"QIANFAN_AK\"] = getpass.getpass(\"Your Qianfan AK:\")\nos.environ[\"QIANFAN_SK\"] = getpass.getpass(\"Your Qianfan SK:\")\n\n\nSecondly, split documents and get embeddings.\n\nfrom langchain.document_loaders import TextLoader\n\nloader = TextLoader(\"../../../state_of_the_union.txt\")\ndocuments = loader.load()\ntext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)\ndocs = text_splitter.split_documents(documents)\n\nfrom langchain.embeddings import QianfanEmbeddingsEndpoint\n\nembeddings = QianfanEmbeddingsEndpoint()\n\n\nThen, create a Baidu ElasticeSearch accessable instance.\n\n# Create a bes instance and index docs.\nfrom langchain.vectorstores import BESVectorStore\n\nbes = BESVectorStore.from_documents(\n    documents=docs,\n    embedding=embeddings,\n    bes_url=\"your bes cluster url\",\n    index_name=\"your vector index\",\n)\nbes.client.indices.refresh(index=\"your vector index\")\n\n\nFinally, Query and retrive data\n\nquery = \"What did the president say about Ketanji Brown Jackson\"\ndocs = bes.similarity_search(query)\nprint(docs[0].page_content)\n\n\nPlease feel free to contact liuboyao@baidu.com or chenweixu01@baidu.com if you encounter any problems during use, and we will do our best to support you.\n\nPrevious\nBagelDB\nNext\nChroma"
}