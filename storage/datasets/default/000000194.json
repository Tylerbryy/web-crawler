{
	"title": "Airbyte Gong | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/integrations/document_loaders/airbyte_gong",
	"html": "ComponentsDocument loadersAirbyte Gong\nAirbyte Gong\n\nAirbyte is a data integration platform for ELT pipelines from APIs, databases & files to warehouses & lakes. It has the largest catalog of ELT connectors to data warehouses and databases.\n\nThis loader exposes the Gong connector as a document loader, allowing you to load various Gong objects as documents.\n\nInstallation‚Äã\n\nFirst, you need to install the airbyte-source-gong python package.\n\n#!pip install airbyte-source-gong\n\nExample‚Äã\n\nCheck out the Airbyte documentation page for details about how to configure the reader. The JSON schema the config object should adhere to can be found on Github: https://github.com/airbytehq/airbyte/blob/master/airbyte-integrations/connectors/source-gong/source_gong/spec.yaml.\n\nThe general shape looks like this:\n\n{\n  \"access_key\": \"<access key name>\",\n  \"access_key_secret\": \"<access key secret>\",\n  \"start_date\": \"<date from which to start retrieving records from in ISO format, e.g. 2020-10-20T00:00:00Z>\",\n}\n\n\nBy default all fields are stored as metadata in the documents and the text is set to an empty string. Construct the text of the document by transforming the documents returned by the reader.\n\nfrom langchain.document_loaders.airbyte import AirbyteGongLoader\n\nconfig = {\n    # your gong configuration\n}\n\nloader = AirbyteGongLoader(\n    config=config, stream_name=\"calls\"\n)  # check the documentation linked above for a list of all streams\n\n\nNow you can load documents the usual way\n\ndocs = loader.load()\n\n\nAs load returns a list, it will block until all documents are loaded. To have better control over this process, you can also you the lazy_load method which returns an iterator instead:\n\ndocs_iterator = loader.lazy_load()\n\n\nKeep in mind that by default the page content is empty and the metadata object contains all the information from the record. To process documents, create a class inheriting from the base loader and implement the _handle_records method yourself:\n\nfrom langchain.docstore.document import Document\n\n\ndef handle_record(record, id):\n    return Document(page_content=record.data[\"title\"], metadata=record.data)\n\n\nloader = AirbyteGongLoader(\n    config=config, record_handler=handle_record, stream_name=\"calls\"\n)\ndocs = loader.load()\n\nIncremental loads‚Äã\n\nSome streams allow incremental loading, this means the source keeps track of synced records and won't load them again. This is useful for sources that have a high volume of data and are updated frequently.\n\nTo take advantage of this, store the last_state property of the loader and pass it in when creating the loader again. This will ensure that only new records are loaded.\n\nlast_state = loader.last_state  # store safely\n\nincremental_loader = AirbyteGongLoader(\n    config=config, stream_name=\"calls\", state=last_state\n)\n\nnew_docs = incremental_loader.load()\n\nPrevious\nAirbyte CDK\nNext\nAirbyte Hubspot"
}