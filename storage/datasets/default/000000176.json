{
	"title": "Diffbot Graph Transformer | 🦜️🔗 Langchain",
	"url": "https://python.langchain.com/docs/use_cases/graph/diffbot_graphtransformer",
	"html": "Graph queryingDiffbot Graph Transformer\nDiffbot Graph Transformer\n\nUse case​\n\nText data often contain rich relationships and insights that can be useful for various analytics, recommendation engines, or knowledge management applications.\n\nDiffbot's NLP API allows for the extraction of entities, relationships, and semantic meaning from unstructured text data.\n\nBy coupling Diffbot's NLP API with Neo4j, a graph database, you can create powerful, dynamic graph structures based on the information extracted from text. These graph structures are fully queryable and can be integrated into various applications.\n\nThis combination allows for use cases such as:\n\nBuilding knowledge graphs from textual documents, websites, or social media feeds.\nGenerating recommendations based on semantic relationships in the data.\nCreating advanced search features that understand the relationships between entities.\nBuilding analytics dashboards that allow users to explore the hidden relationships in data.\nOverview​\n\nLangChain provides tools to interact with Graph Databases:\n\nConstruct knowledge graphs from text using graph transformer and store integrations\nQuery a graph database using chains for query creation and execution\nInteract with a graph database using agents for robust and flexible querying\nQuickstart​\n\nFirst, get required packages and set environment variables:\n\npip install langchain langchain-experimental openai neo4j wikipedia\n\nDiffbot NLP Service​\n\nDiffbot's NLP service is a tool for extracting entities, relationships, and semantic context from unstructured text data. This extracted information can be used to construct a knowledge graph. To use their service, you'll need to obtain an API key from Diffbot.\n\nfrom langchain_experimental.graph_transformers.diffbot import DiffbotGraphTransformer\n\ndiffbot_api_key = \"DIFFBOT_API_KEY\"\ndiffbot_nlp = DiffbotGraphTransformer(diffbot_api_key=diffbot_api_key)\n\n\nThis code fetches Wikipedia articles about \"Warren Buffett\" and then uses DiffbotGraphTransformer to extract entities and relationships. The DiffbotGraphTransformer outputs a structured data GraphDocument, which can be used to populate a graph database. Note that text chunking is avoided due to Diffbot's character limit per API request.\n\nfrom langchain.document_loaders import WikipediaLoader\n\nquery = \"Warren Buffett\"\nraw_documents = WikipediaLoader(query=query).load()\ngraph_documents = diffbot_nlp.convert_to_graph_documents(raw_documents)\n\nLoading the data into a knowledge graph​\n\nYou will need to have a running Neo4j instance. One option is to create a free Neo4j database instance in their Aura cloud service. You can also run the database locally using the Neo4j Desktop application, or running a docker container. You can run a local docker container by running the executing the following script:\n\ndocker run \\\n    --name neo4j \\\n    -p 7474:7474 -p 7687:7687 \\\n    -d \\\n    -e NEO4J_AUTH=neo4j/pleaseletmein \\\n    -e NEO4J_PLUGINS=\\[\\\"apoc\\\"\\]  \\\n    neo4j:latest\n\n\nIf you are using the docker container, you need to wait a couple of second for the database to start.\n\nfrom langchain.graphs import Neo4jGraph\n\nurl = \"bolt://localhost:7687\"\nusername = \"neo4j\"\npassword = \"pleaseletmein\"\n\ngraph = Neo4jGraph(url=url, username=username, password=password)\n\n\nThe GraphDocuments can be loaded into a knowledge graph using the add_graph_documents method.\n\ngraph.add_graph_documents(graph_documents)\n\nRefresh graph schema information​\n\nIf the schema of database changes, you can refresh the schema information needed to generate Cypher statements\n\ngraph.refresh_schema()\n\nQuerying the graph​\n\nWe can now use the graph cypher QA chain to ask question of the graph. It is advisable to use gpt-4 to construct Cypher queries to get the best experience.\n\nfrom langchain.chains import GraphCypherQAChain\nfrom langchain.chat_models import ChatOpenAI\n\nchain = GraphCypherQAChain.from_llm(\n    cypher_llm=ChatOpenAI(temperature=0, model_name=\"gpt-4\"),\n    qa_llm=ChatOpenAI(temperature=0, model_name=\"gpt-3.5-turbo\"),\n    graph=graph,\n    verbose=True,\n)\n\nchain.run(\"Which university did Warren Buffett attend?\")\n\n    \n    \n    > Entering new GraphCypherQAChain chain...\n    Generated Cypher:\n    MATCH (p:Person {name: \"Warren Buffett\"})-[:EDUCATED_AT]->(o:Organization)\n    RETURN o.name\n    Full Context:\n    [{'o.name': 'New York Institute of Finance'}, {'o.name': 'Alice Deal Junior High School'}, {'o.name': 'Woodrow Wilson High School'}, {'o.name': 'University of Nebraska'}]\n    \n    > Finished chain.\n\n\n\n\n\n    'Warren Buffett attended the University of Nebraska.'\n\nchain.run(\"Who is or was working at Berkshire Hathaway?\")\n\n    \n    \n    > Entering new GraphCypherQAChain chain...\n    Generated Cypher:\n    MATCH (p:Person)-[r:EMPLOYEE_OR_MEMBER_OF]->(o:Organization) WHERE o.name = 'Berkshire Hathaway' RETURN p.name\n    Full Context:\n    [{'p.name': 'Charlie Munger'}, {'p.name': 'Oliver Chace'}, {'p.name': 'Howard Buffett'}, {'p.name': 'Howard'}, {'p.name': 'Susan Buffett'}, {'p.name': 'Warren Buffett'}]\n    \n    > Finished chain.\n\n\n\n\n\n    'Charlie Munger, Oliver Chace, Howard Buffett, Susan Buffett, and Warren Buffett are or were working at Berkshire Hathaway.'\n\nPrevious\nGraph querying\nNext\nArangoDB QA chain"
}