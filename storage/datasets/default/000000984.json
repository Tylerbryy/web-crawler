{
	"title": "SQL (SQLAlchemy) | 🦜️🔗 Langchain",
	"url": "https://python.langchain.com/docs/integrations/memory/sql_chat_message_history",
	"html": "ComponentsMemorySQL (SQLAlchemy)\nSQL (SQLAlchemy)\n\nStructured Query Language (SQL) is a domain-specific language used in programming and designed for managing data held in a relational database management system (RDBMS), or for stream processing in a relational data stream management system (RDSMS). It is particularly useful in handling structured data, i.e., data incorporating relations among entities and variables.\n\nSQLAlchemy is an open-source SQL toolkit and object-relational mapper (ORM) for the Python programming language released under the MIT License.\n\nThis notebook goes over a SQLChatMessageHistory class that allows to store chat history in any database supported by SQLAlchemy.\n\nPlease note that to use it with databases other than SQLite, you will need to install the corresponding database driver.\n\nBasic Usage​\n\nTo use the storage you need to provide only 2 things:\n\nSession Id - a unique identifier of the session, like user name, email, chat id etc.\nConnection string - a string that specifies the database connection. It will be passed to SQLAlchemy create_engine function.\nInstall SQLAlchemy python package.\npip install SQLAlchemy\n\nfrom langchain.memory.chat_message_histories import SQLChatMessageHistory\n\nchat_message_history = SQLChatMessageHistory(\n    session_id=\"test_session\", connection_string=\"sqlite:///sqlite.db\"\n)\n\nchat_message_history.add_user_message(\"Hello\")\nchat_message_history.add_ai_message(\"Hi\")\n\nchat_message_history.messages\n\n    [HumanMessage(content='Hello', additional_kwargs={}, example=False),\n     AIMessage(content='Hi', additional_kwargs={}, example=False)]\n\nCustom Storage Format​\n\nBy default, only the session id and message dictionary are stored in the table.\n\nHowever, sometimes you might want to store some additional information, like message date, author, language etc.\n\nTo do that, you can create a custom message converter, by implementing BaseMessageConverter interface.\n\nfrom datetime import datetime\nfrom typing import Any\n\nfrom langchain.memory.chat_message_histories.sql import BaseMessageConverter\nfrom langchain.schema import AIMessage, BaseMessage, HumanMessage, SystemMessage\nfrom sqlalchemy import Column, DateTime, Integer, Text\nfrom sqlalchemy.orm import declarative_base\n\nBase = declarative_base()\n\n\nclass CustomMessage(Base):\n    __tablename__ = \"custom_message_store\"\n\n    id = Column(Integer, primary_key=True)\n    session_id = Column(Text)\n    type = Column(Text)\n    content = Column(Text)\n    created_at = Column(DateTime)\n    author_email = Column(Text)\n\n\nclass CustomMessageConverter(BaseMessageConverter):\n    def __init__(self, author_email: str):\n        self.author_email = author_email\n\n    def from_sql_model(self, sql_message: Any) -> BaseMessage:\n        if sql_message.type == \"human\":\n            return HumanMessage(\n                content=sql_message.content,\n            )\n        elif sql_message.type == \"ai\":\n            return AIMessage(\n                content=sql_message.content,\n            )\n        elif sql_message.type == \"system\":\n            return SystemMessage(\n                content=sql_message.content,\n            )\n        else:\n            raise ValueError(f\"Unknown message type: {sql_message.type}\")\n\n    def to_sql_model(self, message: BaseMessage, session_id: str) -> Any:\n        now = datetime.now()\n        return CustomMessage(\n            session_id=session_id,\n            type=message.type,\n            content=message.content,\n            created_at=now,\n            author_email=self.author_email,\n        )\n\n    def get_sql_model_class(self) -> Any:\n        return CustomMessage\n\n\nchat_message_history = SQLChatMessageHistory(\n    session_id=\"test_session\",\n    connection_string=\"sqlite:///sqlite.db\",\n    custom_message_converter=CustomMessageConverter(author_email=\"test@example.com\"),\n)\n\nchat_message_history.add_user_message(\"Hello\")\nchat_message_history.add_ai_message(\"Hi\")\n\nchat_message_history.messages\n\n    [HumanMessage(content='Hello', additional_kwargs={}, example=False),\n     AIMessage(content='Hi', additional_kwargs={}, example=False)]\n\n\nYou also might want to change the name of session_id column. In this case you'll need to specify session_id_field_name parameter.\n\nPrevious\nSingleStoreDB\nNext\nSQLite"
}