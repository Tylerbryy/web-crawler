{
	"title": "Pandas Dataframe | 🦜️🔗 Langchain",
	"url": "https://python.langchain.com/docs/integrations/toolkits/pandas",
	"html": "ComponentsAgents and toolkitsPandas Dataframe\nPandas Dataframe\n\nThis notebook shows how to use agents to interact with a Pandas DataFrame. It is mostly optimized for question answering.\n\nNOTE: this agent calls the Python agent under the hood, which executes LLM generated Python code - this can be bad if the LLM generated Python code is harmful. Use cautiously.\n\nfrom langchain.agents.agent_types import AgentType\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain_experimental.agents.agent_toolkits import create_pandas_dataframe_agent\n\nimport pandas as pd\nfrom langchain.llms import OpenAI\n\ndf = pd.read_csv(\"titanic.csv\")\n\nUsing ZERO_SHOT_REACT_DESCRIPTION​\n\nThis shows how to initialize the agent using the ZERO_SHOT_REACT_DESCRIPTION agent type. Note that this is an alternative to the above.\n\nagent = create_pandas_dataframe_agent(OpenAI(temperature=0), df, verbose=True)\n\nUsing OpenAI Functions​\n\nThis shows how to initialize the agent using the OPENAI_FUNCTIONS agent type. Note that this is an alternative to the above.\n\nagent = create_pandas_dataframe_agent(\n    ChatOpenAI(temperature=0, model=\"gpt-3.5-turbo-0613\"),\n    df,\n    verbose=True,\n    agent_type=AgentType.OPENAI_FUNCTIONS,\n)\n\nagent.run(\"how many rows are there?\")\n\n    \n    \n    > Entering new  chain...\n    \n    Invoking: `python_repl_ast` with `df.shape[0]`\n    \n    \n    891There are 891 rows in the dataframe.\n    \n    > Finished chain.\n\n\n\n\n\n    'There are 891 rows in the dataframe.'\n\nagent.run(\"how many people have more than 3 siblings\")\n\n    \n    \n    > Entering new AgentExecutor chain...\n    Thought: I need to count the number of people with more than 3 siblings\n    Action: python_repl_ast\n    Action Input: df[df['SibSp'] > 3].shape[0]\n    Observation: 30\n    Thought: I now know the final answer\n    Final Answer: 30 people have more than 3 siblings.\n    \n    > Finished chain.\n\n\n\n\n\n    '30 people have more than 3 siblings.'\n\nagent.run(\"whats the square root of the average age?\")\n\n    \n    \n    > Entering new AgentExecutor chain...\n    Thought: I need to calculate the average age first\n    Action: python_repl_ast\n    Action Input: df['Age'].mean()\n    Observation: 29.69911764705882\n    Thought: I now need to calculate the square root of the average age\n    Action: python_repl_ast\n    Action Input: math.sqrt(df['Age'].mean())\n    Observation: NameError(\"name 'math' is not defined\")\n    Thought: I need to import the math library\n    Action: python_repl_ast\n    Action Input: import math\n    Observation: \n    Thought: I now need to calculate the square root of the average age\n    Action: python_repl_ast\n    Action Input: math.sqrt(df['Age'].mean())\n    Observation: 5.449689683556195\n    Thought: I now know the final answer\n    Final Answer: The square root of the average age is 5.449689683556195.\n    \n    > Finished chain.\n\n\n\n\n\n    'The square root of the average age is 5.449689683556195.'\n\nMulti DataFrame Example​\n\nThis next part shows how the agent can interact with multiple dataframes passed in as a list.\n\ndf1 = df.copy()\ndf1[\"Age\"] = df1[\"Age\"].fillna(df1[\"Age\"].mean())\n\nagent = create_pandas_dataframe_agent(OpenAI(temperature=0), [df, df1], verbose=True)\nagent.run(\"how many rows in the age column are different?\")\n\n    \n    \n    > Entering new AgentExecutor chain...\n    Thought: I need to compare the age columns in both dataframes\n    Action: python_repl_ast\n    Action Input: len(df1[df1['Age'] != df2['Age']])\n    Observation: 177\n    Thought: I now know the final answer\n    Final Answer: 177 rows in the age column are different.\n    \n    > Finished chain.\n\n\n\n\n\n    '177 rows in the age column are different.'\n\nPrevious\nNatural Language APIs\nNext\nPlayWright Browser"
}