{
	"title": "HugeGraph QA Chain | 🦜️🔗 Langchain",
	"url": "https://python.langchain.com/docs/use_cases/graph/graph_hugegraph_qa",
	"html": "Graph queryingHugeGraph QA Chain\nHugeGraph QA Chain\n\nThis notebook shows how to use LLMs to provide a natural language interface to HugeGraph database.\n\nYou will need to have a running HugeGraph instance. You can run a local docker container by running the executing the following script:\n\ndocker run \\\n    --name=graph \\\n    -itd \\\n    -p 8080:8080 \\\n    hugegraph/hugegraph\n\n\nIf we want to connect HugeGraph in the application, we need to install python sdk:\n\npip3 install hugegraph-python\n\n\nIf you are using the docker container, you need to wait a couple of second for the database to start, and then we need create schema and write graph data for the database.\n\nfrom hugegraph.connection import PyHugeGraph\n\nclient = PyHugeGraph(\"localhost\", \"8080\", user=\"admin\", pwd=\"admin\", graph=\"hugegraph\")\n\n\nFirst, we create the schema for a simple movie database:\n\n\"\"\"schema\"\"\"\nschema = client.schema()\nschema.propertyKey(\"name\").asText().ifNotExist().create()\nschema.propertyKey(\"birthDate\").asText().ifNotExist().create()\nschema.vertexLabel(\"Person\").properties(\n    \"name\", \"birthDate\"\n).usePrimaryKeyId().primaryKeys(\"name\").ifNotExist().create()\nschema.vertexLabel(\"Movie\").properties(\"name\").usePrimaryKeyId().primaryKeys(\n    \"name\"\n).ifNotExist().create()\nschema.edgeLabel(\"ActedIn\").sourceLabel(\"Person\").targetLabel(\n    \"Movie\"\n).ifNotExist().create()\n\n    'create EdgeLabel success, Detail: \"b\\'{\"id\":1,\"name\":\"ActedIn\",\"source_label\":\"Person\",\"target_label\":\"Movie\",\"frequency\":\"SINGLE\",\"sort_keys\":[],\"nullable_keys\":[],\"index_labels\":[],\"properties\":[],\"status\":\"CREATED\",\"ttl\":0,\"enable_label_index\":true,\"user_data\":{\"~create_time\":\"2023-07-04 10:48:47.908\"}}\\'\"'\n\n\nThen we can insert some data.\n\n\"\"\"graph\"\"\"\ng = client.graph()\ng.addVertex(\"Person\", {\"name\": \"Al Pacino\", \"birthDate\": \"1940-04-25\"})\ng.addVertex(\"Person\", {\"name\": \"Robert De Niro\", \"birthDate\": \"1943-08-17\"})\ng.addVertex(\"Movie\", {\"name\": \"The Godfather\"})\ng.addVertex(\"Movie\", {\"name\": \"The Godfather Part II\"})\ng.addVertex(\"Movie\", {\"name\": \"The Godfather Coda The Death of Michael Corleone\"})\n\ng.addEdge(\"ActedIn\", \"1:Al Pacino\", \"2:The Godfather\", {})\ng.addEdge(\"ActedIn\", \"1:Al Pacino\", \"2:The Godfather Part II\", {})\ng.addEdge(\n    \"ActedIn\", \"1:Al Pacino\", \"2:The Godfather Coda The Death of Michael Corleone\", {}\n)\ng.addEdge(\"ActedIn\", \"1:Robert De Niro\", \"2:The Godfather Part II\", {})\n\n    1:Robert De Niro--ActedIn-->2:The Godfather Part II\n\nCreating HugeGraphQAChain​\n\nWe can now create the HugeGraph and HugeGraphQAChain. To create the HugeGraph we simply need to pass the database object to the HugeGraph constructor.\n\nfrom langchain.chains import HugeGraphQAChain\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.graphs import HugeGraph\n\ngraph = HugeGraph(\n    username=\"admin\",\n    password=\"admin\",\n    address=\"localhost\",\n    port=8080,\n    graph=\"hugegraph\",\n)\n\nRefresh graph schema information​\n\nIf the schema of database changes, you can refresh the schema information needed to generate Gremlin statements.\n\n# graph.refresh_schema()\n\nprint(graph.get_schema)\n\n    Node properties: [name: Person, primary_keys: ['name'], properties: ['name', 'birthDate'], name: Movie, primary_keys: ['name'], properties: ['name']]\n    Edge properties: [name: ActedIn, properties: []]\n    Relationships: ['Person--ActedIn-->Movie']\n    \n\nQuerying the graph​\n\nWe can now use the graph Gremlin QA chain to ask question of the graph\n\nchain = HugeGraphQAChain.from_llm(ChatOpenAI(temperature=0), graph=graph, verbose=True)\n\nchain.run(\"Who played in The Godfather?\")\n\n    \n    \n    > Entering new  chain...\n    Generated gremlin:\n    g.V().has('Movie', 'name', 'The Godfather').in('ActedIn').valueMap(true)\n    Full Context:\n    [{'id': '1:Al Pacino', 'label': 'Person', 'name': ['Al Pacino'], 'birthDate': ['1940-04-25']}]\n    \n    > Finished chain.\n\n\n\n\n\n    'Al Pacino played in The Godfather.'\n\nPrevious\nFalkorDBQAChain\nNext\nKuzuQAChain"
}