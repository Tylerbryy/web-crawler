{
	"title": "Source Code | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/integrations/document_loaders/source_code",
	"html": "ComponentsDocument loadersSource Code\nSource Code\n\nThis notebook covers how to load source code files using a special approach with language parsing: each top-level function and class in the code is loaded into separate documents. Any remaining code top-level code outside the already loaded functions and classes will be loaded into a separate document.\n\nThis approach can potentially improve the accuracy of QA models over source code. Currently, the supported languages for code parsing are Python and JavaScript. The language used for parsing can be configured, along with the minimum number of lines required to activate the splitting based on syntax.\n\npip install esprima\n\nimport warnings\n\nwarnings.filterwarnings(\"ignore\")\nfrom pprint import pprint\n\nfrom langchain.document_loaders.generic import GenericLoader\nfrom langchain.document_loaders.parsers import LanguageParser\nfrom langchain.text_splitter import Language\n\nloader = GenericLoader.from_filesystem(\n    \"./example_data/source_code\",\n    glob=\"*\",\n    suffixes=[\".py\", \".js\"],\n    parser=LanguageParser(),\n)\ndocs = loader.load()\n\nlen(docs)\n\n    6\n\nfor document in docs:\n    pprint(document.metadata)\n\n    {'content_type': 'functions_classes',\n     'language': <Language.PYTHON: 'python'>,\n     'source': 'example_data/source_code/example.py'}\n    {'content_type': 'functions_classes',\n     'language': <Language.PYTHON: 'python'>,\n     'source': 'example_data/source_code/example.py'}\n    {'content_type': 'simplified_code',\n     'language': <Language.PYTHON: 'python'>,\n     'source': 'example_data/source_code/example.py'}\n    {'content_type': 'functions_classes',\n     'language': <Language.JS: 'js'>,\n     'source': 'example_data/source_code/example.js'}\n    {'content_type': 'functions_classes',\n     'language': <Language.JS: 'js'>,\n     'source': 'example_data/source_code/example.js'}\n    {'content_type': 'simplified_code',\n     'language': <Language.JS: 'js'>,\n     'source': 'example_data/source_code/example.js'}\n\nprint(\"\\n\\n--8<--\\n\\n\".join([document.page_content for document in docs]))\n\n    class MyClass:\n        def __init__(self, name):\n            self.name = name\n    \n        def greet(self):\n            print(f\"Hello, {self.name}!\")\n    \n    --8<--\n    \n    def main():\n        name = input(\"Enter your name: \")\n        obj = MyClass(name)\n        obj.greet()\n    \n    --8<--\n    \n    # Code for: class MyClass:\n    \n    \n    # Code for: def main():\n    \n    \n    if __name__ == \"__main__\":\n        main()\n    \n    --8<--\n    \n    class MyClass {\n      constructor(name) {\n        this.name = name;\n      }\n    \n      greet() {\n        console.log(`Hello, ${this.name}!`);\n      }\n    }\n    \n    --8<--\n    \n    function main() {\n      const name = prompt(\"Enter your name:\");\n      const obj = new MyClass(name);\n      obj.greet();\n    }\n    \n    --8<--\n    \n    // Code for: class MyClass {\n    \n    // Code for: function main() {\n    \n    main();\n\n\nThe parser can be disabled for small files.\n\nThe parameter parser_threshold indicates the minimum number of lines that the source code file must have to be segmented using the parser.\n\nloader = GenericLoader.from_filesystem(\n    \"./example_data/source_code\",\n    glob=\"*\",\n    suffixes=[\".py\"],\n    parser=LanguageParser(language=Language.PYTHON, parser_threshold=1000),\n)\ndocs = loader.load()\n\nlen(docs)\n\n    1\n\nprint(docs[0].page_content)\n\n    class MyClass:\n        def __init__(self, name):\n            self.name = name\n    \n        def greet(self):\n            print(f\"Hello, {self.name}!\")\n    \n    \n    def main():\n        name = input(\"Enter your name: \")\n        obj = MyClass(name)\n        obj.greet()\n    \n    \n    if __name__ == \"__main__\":\n        main()\n    \n\nSplitting‚Äã\n\nAdditional splitting could be needed for those functions, classes, or scripts that are too big.\n\nloader = GenericLoader.from_filesystem(\n    \"./example_data/source_code\",\n    glob=\"*\",\n    suffixes=[\".js\"],\n    parser=LanguageParser(language=Language.JS),\n)\ndocs = loader.load()\n\nfrom langchain.text_splitter import (\n    Language,\n    RecursiveCharacterTextSplitter,\n)\n\njs_splitter = RecursiveCharacterTextSplitter.from_language(\n    language=Language.JS, chunk_size=60, chunk_overlap=0\n)\n\nresult = js_splitter.split_documents(docs)\n\nlen(result)\n\n    7\n\nprint(\"\\n\\n--8<--\\n\\n\".join([document.page_content for document in result]))\n\n    class MyClass {\n      constructor(name) {\n        this.name = name;\n    \n    --8<--\n    \n    }\n    \n    --8<--\n    \n    greet() {\n        console.log(`Hello, ${this.name}!`);\n      }\n    }\n    \n    --8<--\n    \n    function main() {\n      const name = prompt(\"Enter your name:\");\n    \n    --8<--\n    \n    const obj = new MyClass(name);\n      obj.greet();\n    }\n    \n    --8<--\n    \n    // Code for: class MyClass {\n    \n    // Code for: function main() {\n    \n    --8<--\n    \n    main();\n\nPrevious\nSnowflake\nNext\nSpreedly"
}