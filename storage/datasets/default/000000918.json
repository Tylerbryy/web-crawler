{
	"title": "TileDB | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/integrations/vectorstores/tiledb",
	"html": "ComponentsVector storesTileDB\nTileDB\n\nTileDB is a powerful engine for indexing and querying dense and sparse multi-dimensional arrays.\n\nTileDB offers ANN search capabilities using the TileDB-Vector-Search module. It provides serverless execution of ANN queries and storage of vector indexes both on local disk and cloud object stores (i.e. AWS S3).\n\nMore details in:\n\nWhy TileDB as a Vector Database\nTileDB 101: Vector Search\n\nThis notebook shows how to use the TileDB vector database.\n\npip install tiledb-vector-search\n\nBasic Example‚Äã\nfrom langchain.document_loaders import TextLoader\nfrom langchain.embeddings import HuggingFaceEmbeddings\nfrom langchain.text_splitter import CharacterTextSplitter\nfrom langchain.vectorstores import TileDB\n\nraw_documents = TextLoader(\"../../modules/state_of_the_union.txt\").load()\ntext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)\ndocuments = text_splitter.split_documents(raw_documents)\nembeddings = HuggingFaceEmbeddings()\ndb = TileDB.from_documents(\n    documents, embeddings, index_uri=\"/tmp/tiledb_index\", index_type=\"FLAT\"\n)\n\nquery = \"What did the president say about Ketanji Brown Jackson\"\ndocs = db.similarity_search(query)\ndocs[0].page_content\n\nSimilarity search by vector‚Äã\nembedding_vector = embeddings.embed_query(query)\ndocs = db.similarity_search_by_vector(embedding_vector)\ndocs[0].page_content\n\nSimilarity search with score‚Äã\ndocs_and_scores = db.similarity_search_with_score(query)\ndocs_and_scores[0]\n\nMaximal Marginal Relevance Search (MMR)‚Äã\n\nIn addition to using similarity search in the retriever object, you can also use mmr as retriever.\n\nretriever = db.as_retriever(search_type=\"mmr\")\nretriever.get_relevant_documents(query)\n\n\nOr use max_marginal_relevance_search directly:\n\ndb.max_marginal_relevance_search(query, k=2, fetch_k=10)\n\nPrevious\nTigris\nNext\nTimescale Vector (Postgres)"
}