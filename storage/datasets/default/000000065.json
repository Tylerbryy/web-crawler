{
	"title": "neo4j-vector-memory | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/templates/neo4j-vector-memory",
	"html": "Templatesneo4j-vector-memory\nneo4j-vector-memory\n\nThis template allows you to integrate an LLM with a vector-based retrieval system using Neo4j as the vector store. Additionally, it uses the graph capabilities of the Neo4j database to store and retrieve the dialogue history of a specific user's session. Having the dialogue history stored as a graph allows for seamless conversational flows but also gives you the ability to analyze user behavior and text chunk retrieval through graph analytics.\n\nEnvironment Setup‚Äã\n\nYou need to define the following environment variables\n\nOPENAI_API_KEY=<YOUR_OPENAI_API_KEY>\nNEO4J_URI=<YOUR_NEO4J_URI>\nNEO4J_USERNAME=<YOUR_NEO4J_USERNAME>\nNEO4J_PASSWORD=<YOUR_NEO4J_PASSWORD>\n\nPopulating with data‚Äã\n\nIf you want to populate the DB with some example data, you can run python ingest.py. The script process and stores sections of the text from the file dune.txt into a Neo4j graph database. Additionally, a vector index named dune is created for efficient querying of these embeddings.\n\nUsage‚Äã\n\nTo use this package, you should first have the LangChain CLI installed:\n\npip install -U langchain-cli\n\n\nTo create a new LangChain project and install this as the only package, you can do:\n\nlangchain app new my-app --package neo4j-vector-memory\n\n\nIf you want to add this to an existing project, you can just run:\n\nlangchain app add neo4j-vector-memory\n\n\nAnd add the following code to your server.py file:\n\nfrom neo4j_vector_memory import chain as neo4j_vector_memory_chain\n\nadd_routes(app, neo4j_vector_memory_chain, path=\"/neo4j-vector-memory\")\n\n\n(Optional) Let's now configure LangSmith. LangSmith will help us trace, monitor and debug LangChain applications. LangSmith is currently in private beta, you can sign up here. If you don't have access, you can skip this section\n\nexport LANGCHAIN_TRACING_V2=true\nexport LANGCHAIN_API_KEY=<your-api-key>\nexport LANGCHAIN_PROJECT=<your-project>  # if not specified, defaults to \"default\"\n\n\nIf you are inside this directory, then you can spin up a LangServe instance directly by:\n\nlangchain serve\n\n\nThis will start the FastAPI app with a server is running locally at http://localhost:8000\n\nWe can see all templates at http://127.0.0.1:8000/docs We can access the playground at http://127.0.0.1:8000/neo4j-vector-memory/playground\n\nWe can access the template from code with:\n\nfrom langserve.client import RemoteRunnable\n\nrunnable = RemoteRunnable(\"http://localhost:8000/neo4j-vector-memory\")\n\nPrevious\nneo4j-parent\nNext\nopenai-functions-agent"
}