{
	"title": "Anthropic | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/integrations/chat/anthropic",
	"html": "ComponentsChat modelsAnthropic\nAnthropic\n\nThis notebook covers how to get started with Anthropic chat models.\n\nfrom langchain.chat_models import ChatAnthropic\nfrom langchain.schema import HumanMessage\n\nchat = ChatAnthropic()\n\nmessages = [\n    HumanMessage(\n        content=\"Translate this sentence from English to French. I love programming.\"\n    )\n]\nchat(messages)\n\n    AIMessage(content=\" J'aime la programmation.\", additional_kwargs={}, example=False)\n\nChatAnthropic also supports async and streaming functionality:‚Äã\nfrom langchain.callbacks.manager import CallbackManager\nfrom langchain.callbacks.streaming_stdout import StreamingStdOutCallbackHandler\n\nawait chat.agenerate([messages])\n\n    LLMResult(generations=[[ChatGeneration(text=\" J'aime programmer.\", generation_info=None, message=AIMessage(content=\" J'aime programmer.\", additional_kwargs={}, example=False))]], llm_output={}, run=[RunInfo(run_id=UUID('8cc8fb68-1c35-439c-96a0-695036a93652'))])\n\nchat = ChatAnthropic(\n    streaming=True,\n    verbose=True,\n    callback_manager=CallbackManager([StreamingStdOutCallbackHandler()]),\n)\nchat(messages)\n\n     J'aime la programmation.\n\n\n\n\n    AIMessage(content=\" J'aime la programmation.\", additional_kwargs={}, example=False)\n\nPrevious\nChat models\nNext\nAnthropic Functions"
}