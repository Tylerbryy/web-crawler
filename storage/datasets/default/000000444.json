{
	"title": "Google Vertex AI Search | 🦜️🔗 Langchain",
	"url": "https://python.langchain.com/docs/integrations/retrievers/google_vertex_ai_search",
	"html": "ComponentsRetrieversGoogle Vertex AI Search\nGoogle Vertex AI Search\n\nVertex AI Search (formerly known as Enterprise Search on Generative AI App Builder) is a part of the Vertex AI machine learning platform offered by Google Cloud.\n\nVertex AI Search lets organizations quickly build generative AI powered search engines for customers and employees. It's underpinned by a variety of Google Search technologies, including semantic search, which helps deliver more relevant results than traditional keyword-based search techniques by using natural language processing and machine learning techniques to infer relationships within the content and intent from the user’s query input. Vertex AI Search also benefits from Google’s expertise in understanding how users search and factors in content relevance to order displayed results.\n\nVertex AI Search is available in the Google Cloud Console and via an API for enterprise workflow integration.\n\nThis notebook demonstrates how to configure Vertex AI Search and use the Vertex AI Search retriever. The Vertex AI Search retriever encapsulates the Python client library and uses it to access the Search Service API.\n\nInstall pre-requisites​\n\nYou need to install the google-cloud-discoveryengine package to use the Vertex AI Search retriever.\n\npip install google-cloud-discoveryengine\n\nConfigure access to Google Cloud and Vertex AI Search​\n\nVertex AI Search is generally available without allowlist as of August 2023.\n\nBefore you can use the retriever, you need to complete the following steps:\n\nCreate a search engine and populate an unstructured data store​\nFollow the instructions in the Vertex AI Search Getting Started guide to set up a Google Cloud project and Vertex AI Search.\nUse the Google Cloud Console to create an unstructured data store\nPopulate it with the example PDF documents from the gs://cloud-samples-data/gen-app-builder/search/alphabet-investor-pdfs Cloud Storage folder.\nMake sure to use the Cloud Storage (without metadata) option.\nSet credentials to access Vertex AI Search API​\n\nThe Vertex AI Search client libraries used by the Vertex AI Search retriever provide high-level language support for authenticating to Google Cloud programmatically. Client libraries support Application Default Credentials (ADC); the libraries look for credentials in a set of defined locations and use those credentials to authenticate requests to the API. With ADC, you can make credentials available to your application in a variety of environments, such as local development or production, without needing to modify your application code.\n\nIf running in Google Colab authenticate with google.colab.google.auth otherwise follow one of the supported methods to make sure that you Application Default Credentials are properly set.\n\nimport sys\n\nif \"google.colab\" in sys.modules:\n    from google.colab import auth as google_auth\n\n    google_auth.authenticate_user()\n\nConfigure and use the Vertex AI Search retriever​\n\nThe Vertex AI Search retriever is implemented in the langchain.retriever.GoogleVertexAISearchRetriever class. The get_relevant_documents method returns a list of langchain.schema.Document documents where the page_content field of each document is populated the document content. Depending on the data type used in Vertex AI Search (website, structured or unstructured) the page_content field is populated as follows:\n\nWebsite with advanced indexing: an extractive answer that matches a query. The metadata field is populated with metadata (if any) of the document from which the segments or answers were extracted.\nUnstructured data source: either an extractive segment or an extractive answer that matches a query. The metadata field is populated with metadata (if any) of the document from which the segments or answers were extracted.\nStructured data source: a string json containing all the fields returned from the structured data source. The metadata field is populated with metadata (if any) of the document\nExtractive answers & extractive segments​\n\nAn extractive answer is verbatim text that is returned with each search result. It is extracted directly from the original document. Extractive answers are typically displayed near the top of web pages to provide an end user with a brief answer that is contextually relevant to their query. Extractive answers are available for website and unstructured search.\n\nAn extractive segment is verbatim text that is returned with each search result. An extractive segment is usually more verbose than an extractive answer. Extractive segments can be displayed as an answer to a query, and can be used to perform post-processing tasks and as input for large language models to generate answers or new text. Extractive segments are available for unstructured search.\n\nFor more information about extractive segments and extractive answers refer to product documentation.\n\nNOTE: Extractive segments require the Enterprise edition features to be enabled.\n\nWhen creating an instance of the retriever you can specify a number of parameters that control which data store to access and how a natural language query is processed, including configurations for extractive answers and segments.\n\nThe mandatory parameters are:​\nproject_id - Your Google Cloud Project ID.\nlocation_id - The location of the data store.\nglobal (default)\nus\neu\ndata_store_id - The ID of the data store you want to use.\nNote: This was called search_engine_id in previous versions of the retriever.\n\nThe project_id and data_store_id parameters can be provided explicitly in the retriever's constructor or through the environment variables - PROJECT_ID and DATA_STORE_ID.\n\nYou can also configure a number of optional parameters, including:\n\nmax_documents - The maximum number of documents used to provide extractive segments or extractive answers\nget_extractive_answers - By default, the retriever is configured to return extractive segments.\nSet this field to True to return extractive answers. This is used only when engine_data_type set to 0 (unstructured)\nmax_extractive_answer_count - The maximum number of extractive answers returned in each search result.\nAt most 5 answers will be returned. This is used only when engine_data_type set to 0 (unstructured).\nmax_extractive_segment_count - The maximum number of extractive segments returned in each search result.\nCurrently one segment will be returned. This is used only when engine_data_type set to 0 (unstructured).\nfilter - The filter expression for the search results based on the metadata associated with the documents in the data store.\nquery_expansion_condition - Specification to determine under which conditions query expansion should occur.\n0 - Unspecified query expansion condition. In this case, server behavior defaults to disabled.\n1 - Disabled query expansion. Only the exact search query is used, even if SearchResponse.total_size is zero.\n2 - Automatic query expansion built by the Search API.\nengine_data_type - Defines the Vertex AI Search data type\n0 - Unstructured data\n1 - Structured data\n2 - Website data with Advanced Website Indexing\nMigration guide for GoogleCloudEnterpriseSearchRetriever​\n\nIn previous versions, this retriever was called GoogleCloudEnterpriseSearchRetriever. Some backwards-incompatible changes had to be made to the retriever after the General Availability launch due to changes in the product behavior.\n\nTo update to the new retriever, make the following changes:\n\nChange the import from: from langchain.retrievers import GoogleCloudEnterpriseSearchRetriever -> from langchain.retrievers import GoogleVertexAISearchRetriever.\nChange all class references from GoogleCloudEnterpriseSearchRetriever -> GoogleVertexAISearchRetriever.\nUpon class initialization, change the search_engine_id parameter name to data_store_id.\nConfigure and use the retriever for unstructured data with extractive segments​\nfrom langchain.retrievers import (\n    GoogleVertexAIMultiTurnSearchRetriever,\n    GoogleVertexAISearchRetriever,\n)\n\nPROJECT_ID = \"<YOUR PROJECT ID>\"  # Set to your Project ID\nLOCATION_ID = \"<YOUR LOCATION>\"  # Set to your data store location\nDATA_STORE_ID = \"<YOUR DATA STORE ID>\"  # Set to your data store ID\n\nretriever = GoogleVertexAISearchRetriever(\n    project_id=PROJECT_ID,\n    location_id=LOCATION_ID,\n    data_store_id=DATA_STORE_ID,\n    max_documents=3,\n)\n\nquery = \"What are Alphabet's Other Bets?\"\n\nresult = retriever.get_relevant_documents(query)\nfor doc in result:\n    print(doc)\n\nConfigure and use the retriever for unstructured data with extractive answers​\nretriever = GoogleVertexAISearchRetriever(\n    project_id=PROJECT_ID,\n    location_id=LOCATION_ID,\n    data_store_id=DATA_STORE_ID,\n    max_documents=3,\n    max_extractive_answer_count=3,\n    get_extractive_answers=True,\n)\n\nresult = retriever.get_relevant_documents(query)\nfor doc in result:\n    print(doc)\n\nConfigure and use the retriever for structured data​\nretriever = GoogleVertexAISearchRetriever(\n    project_id=PROJECT_ID,\n    location_id=LOCATION_ID,\n    data_store_id=DATA_STORE_ID,\n    max_documents=3,\n    engine_data_type=1,\n)\n\nresult = retriever.get_relevant_documents(query)\nfor doc in result:\n    print(doc)\n\nConfigure and use the retriever for website data with Advanced Website Indexing​\nretriever = GoogleVertexAISearchRetriever(\n    project_id=PROJECT_ID,\n    location_id=LOCATION_ID,\n    data_store_id=DATA_STORE_ID,\n    max_documents=3,\n    max_extractive_answer_count=3,\n    get_extractive_answers=True,\n    engine_data_type=2,\n)\n\nresult = retriever.get_relevant_documents(query)\nfor doc in result:\n    print(doc)\n\nConfigure and use the retriever for multi-turn search​\n\nSearch with follow-ups is based on generative AI models and it is different from the regular unstructured data search.\n\nretriever = GoogleVertexAIMultiTurnSearchRetriever(\n    project_id=PROJECT_ID, location_id=LOCATION_ID, data_store_id=DATA_STORE_ID\n)\n\nresult = retriever.get_relevant_documents(query)\nfor doc in result:\n    print(doc)\n\nPrevious\nGoogle Drive\nNext\nKay.ai"
}