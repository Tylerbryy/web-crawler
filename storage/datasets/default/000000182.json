{
	"title": "NebulaGraphQAChain | 🦜️🔗 Langchain",
	"url": "https://python.langchain.com/docs/use_cases/graph/graph_nebula_qa",
	"html": "Graph queryingNebulaGraphQAChain\nNebulaGraphQAChain\n\nThis notebook shows how to use LLMs to provide a natural language interface to NebulaGraph database.\n\nYou will need to have a running NebulaGraph cluster, for which you can run a containerized cluster by running the following script:\n\ncurl -fsSL nebula-up.siwei.io/install.sh | bash\n\n\nOther options are:\n\nInstall as a Docker Desktop Extension. See here\nNebulaGraph Cloud Service. See here\nDeploy from package, source code, or via Kubernetes. See here\n\nOnce the cluster is running, we could create the SPACE and SCHEMA for the database.\n\n# connect ngql jupyter extension to nebulagraph\n# create a new space\n%ngql CREATE SPACE IF NOT EXISTS langchain(partition_num=1, replica_factor=1, vid_type=fixed_string(128));\n\n# Wait for a few seconds for the space to be created.\n%ngql USE langchain;\n\n\nCreate the schema, for full dataset, refer here.\n\nCREATE TAG IF NOT EXISTS movie(name string);\nCREATE TAG IF NOT EXISTS person(name string, birthdate string);\nCREATE EDGE IF NOT EXISTS acted_in();\nCREATE TAG INDEX IF NOT EXISTS person_index ON person(name(128));\nCREATE TAG INDEX IF NOT EXISTS movie_index ON movie(name(128));\n\n\nWait for schema creation to complete, then we can insert some data.\n\nINSERT VERTEX person(name, birthdate) VALUES \"Al Pacino\":(\"Al Pacino\", \"1940-04-25\");\nINSERT VERTEX movie(name) VALUES \"The Godfather II\":(\"The Godfather II\");\nINSERT VERTEX movie(name) VALUES \"The Godfather Coda: The Death of Michael Corleone\":(\"The Godfather Coda: The Death of Michael Corleone\");\nINSERT EDGE acted_in() VALUES \"Al Pacino\"->\"The Godfather II\":();\nINSERT EDGE acted_in() VALUES \"Al Pacino\"->\"The Godfather Coda: The Death of Michael Corleone\":();\n\n    UsageError: Cell magic `%%ngql` not found.\n\nfrom langchain.chains import NebulaGraphQAChain\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.graphs import NebulaGraph\n\ngraph = NebulaGraph(\n    space=\"langchain\",\n    username=\"root\",\n    password=\"nebula\",\n    address=\"127.0.0.1\",\n    port=9669,\n    session_pool_size=30,\n)\n\nRefresh graph schema information​\n\nIf the schema of database changes, you can refresh the schema information needed to generate nGQL statements.\n\n# graph.refresh_schema()\n\nprint(graph.get_schema)\n\n    Node properties: [{'tag': 'movie', 'properties': [('name', 'string')]}, {'tag': 'person', 'properties': [('name', 'string'), ('birthdate', 'string')]}]\n    Edge properties: [{'edge': 'acted_in', 'properties': []}]\n    Relationships: ['(:person)-[:acted_in]->(:movie)']\n    \n\nQuerying the graph​\n\nWe can now use the graph cypher QA chain to ask question of the graph\n\nchain = NebulaGraphQAChain.from_llm(\n    ChatOpenAI(temperature=0), graph=graph, verbose=True\n)\n\nchain.run(\"Who played in The Godfather II?\")\n\n    \n    \n    > Entering new NebulaGraphQAChain chain...\n    Generated nGQL:\n    MATCH (p:`person`)-[:acted_in]->(m:`movie`) WHERE m.`movie`.`name` == 'The Godfather II'\n    RETURN p.`person`.`name`\n    Full Context:\n    {'p.person.name': ['Al Pacino']}\n    \n    > Finished chain.\n\n\n\n\n\n    'Al Pacino played in The Godfather II.'\n\nPrevious\nMemgraph QA chain\nNext\nNetworkX Graph QA"
}