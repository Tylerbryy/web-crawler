{
	"title": "Tigris | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/integrations/vectorstores/tigris",
	"html": "ComponentsVector storesTigris\nTigris\n\nTigris is an open-source Serverless NoSQL Database and Search Platform designed to simplify building high-performance vector search applications. Tigris eliminates the infrastructure complexity of managing, operating, and synchronizing multiple tools, allowing you to focus on building great applications instead.\n\nThis notebook guides you how to use Tigris as your VectorStore\n\nPre requisites\n\nAn OpenAI account. You can sign up for an account here\nSign up for a free Tigris account. Once you have signed up for the Tigris account, create a new project called vectordemo. Next, make a note of the Uri for the region you've created your project in, the clientId and clientSecret. You can get all this information from the Application Keys section of the project.\n\nLet's first install our dependencies:\n\npip install tigrisdb openapi-schema-pydantic openai tiktoken\n\n\nWe will load the OpenAI api key and Tigris credentials in our environment\n\nimport getpass\nimport os\n\nos.environ[\"OPENAI_API_KEY\"] = getpass.getpass(\"OpenAI API Key:\")\nos.environ[\"TIGRIS_PROJECT\"] = getpass.getpass(\"Tigris Project Name:\")\nos.environ[\"TIGRIS_CLIENT_ID\"] = getpass.getpass(\"Tigris Client Id:\")\nos.environ[\"TIGRIS_CLIENT_SECRET\"] = getpass.getpass(\"Tigris Client Secret:\")\n\nfrom langchain.document_loaders import TextLoader\nfrom langchain.embeddings.openai import OpenAIEmbeddings\nfrom langchain.text_splitter import CharacterTextSplitter\nfrom langchain.vectorstores import Tigris\n\nInitialize Tigris vector store‚Äã\n\nLet's import our test dataset:\n\nloader = TextLoader(\"../../../state_of_the_union.txt\")\ndocuments = loader.load()\ntext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)\ndocs = text_splitter.split_documents(documents)\n\nembeddings = OpenAIEmbeddings()\n\nvector_store = Tigris.from_documents(docs, embeddings, index_name=\"my_embeddings\")\n\nSimilarity Search‚Äã\nquery = \"What did the president say about Ketanji Brown Jackson\"\nfound_docs = vector_store.similarity_search(query)\nprint(found_docs)\n\nSimilarity Search with score (vector distance)‚Äã\nquery = \"What did the president say about Ketanji Brown Jackson\"\nresult = vector_store.similarity_search_with_score(query)\nfor doc, score in result:\n    print(f\"document={doc}, score={score}\")\n\nPrevious\nTencent Cloud VectorDB\nNext\nTileDB"
}