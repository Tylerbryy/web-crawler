{
	"title": "Label Studio | 🦜️🔗 Langchain",
	"url": "https://python.langchain.com/docs/integrations/callbacks/labelstudio",
	"html": "ComponentsCallbacksLabel Studio\nLabel Studio\n\nLabel Studio is an open-source data labeling platform that provides LangChain with flexibility when it comes to labeling data for fine-tuning large language models (LLMs). It also enables the preparation of custom training data and the collection and evaluation of responses through human feedback.\n\nIn this guide, you will learn how to connect a LangChain pipeline to Label Studio to:\n\nAggregate all input prompts, conversations, and responses in a single LabelStudio project. This consolidates all the data in one place for easier labeling and analysis.\nRefine prompts and responses to create a dataset for supervised fine-tuning (SFT) and reinforcement learning with human feedback (RLHF) scenarios. The labeled data can be used to further train the LLM to improve its performance.\nEvaluate model responses through human feedback. LabelStudio provides an interface for humans to review and provide feedback on model responses, allowing evaluation and iteration.\nInstallation and setup​\n\nFirst install latest versions of Label Studio and Label Studio API client:\n\npip install -U label-studio label-studio-sdk openai\n\n\nNext, run label-studio on the command line to start the local LabelStudio instance at http://localhost:8080. See the Label Studio installation guide for more options.\n\nYou'll need a token to make API calls.\n\nOpen your LabelStudio instance in your browser, go to Account & Settings > Access Token and copy the key.\n\nSet environment variables with your LabelStudio URL, API key and OpenAI API key:\n\nimport os\n\nos.environ[\"LABEL_STUDIO_URL\"] = \"<YOUR-LABEL-STUDIO-URL>\"  # e.g. http://localhost:8080\nos.environ[\"LABEL_STUDIO_API_KEY\"] = \"<YOUR-LABEL-STUDIO-API-KEY>\"\nos.environ[\"OPENAI_API_KEY\"] = \"<YOUR-OPENAI-API-KEY>\"\n\nCollecting LLMs prompts and responses​\n\nThe data used for labeling is stored in projects within Label Studio. Every project is identified by an XML configuration that details the specifications for input and output data.\n\nCreate a project that takes human input in text format and outputs an editable LLM response in a text area:\n\n<View>\n<Style>\n    .prompt-box {\n        background-color: white;\n        border-radius: 10px;\n        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);\n        padding: 20px;\n    }\n</Style>\n<View className=\"root\">\n    <View className=\"prompt-box\">\n        <Text name=\"prompt\" value=\"$prompt\"/>\n    </View>\n    <TextArea name=\"response\" toName=\"prompt\"\n              maxSubmissions=\"1\" editable=\"true\"\n              required=\"true\"/>\n</View>\n<Header value=\"Rate the response:\"/>\n<Rating name=\"rating\" toName=\"prompt\"/>\n</View>\n\nTo create a project in Label Studio, click on the \"Create\" button.\nEnter a name for your project in the \"Project Name\" field, such as My Project.\nNavigate to Labeling Setup > Custom Template and paste the XML configuration provided above.\n\nYou can collect input LLM prompts and output responses in a LabelStudio project, connecting it via LabelStudioCallbackHandler:\n\nfrom langchain.callbacks import LabelStudioCallbackHandler\nfrom langchain.llms import OpenAI\n\nllm = OpenAI(\n    temperature=0, callbacks=[LabelStudioCallbackHandler(project_name=\"My Project\")]\n)\nprint(llm(\"Tell me a joke\"))\n\n\nIn the Label Studio, open My Project. You will see the prompts, responses, and metadata like the model name.\n\nCollecting Chat model Dialogues​\n\nYou can also track and display full chat dialogues in LabelStudio, with the ability to rate and modify the last response:\n\nOpen Label Studio and click on the \"Create\" button.\nEnter a name for your project in the \"Project Name\" field, such as New Project with Chat.\nNavigate to Labeling Setup > Custom Template and paste the following XML configuration:\n<View>\n<View className=\"root\">\n     <Paragraphs name=\"dialogue\"\n               value=\"$prompt\"\n               layout=\"dialogue\"\n               textKey=\"content\"\n               nameKey=\"role\"\n               granularity=\"sentence\"/>\n  <Header value=\"Final response:\"/>\n    <TextArea name=\"response\" toName=\"dialogue\"\n              maxSubmissions=\"1\" editable=\"true\"\n              required=\"true\"/>\n</View>\n<Header value=\"Rate the response:\"/>\n<Rating name=\"rating\" toName=\"dialogue\"/>\n</View>\n\nfrom langchain.callbacks import LabelStudioCallbackHandler\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.schema import HumanMessage, SystemMessage\n\nchat_llm = ChatOpenAI(\n    callbacks=[\n        LabelStudioCallbackHandler(\n            mode=\"chat\",\n            project_name=\"New Project with Chat\",\n        )\n    ]\n)\nllm_results = chat_llm(\n    [\n        SystemMessage(content=\"Always use a lot of emojis\"),\n        HumanMessage(content=\"Tell me a joke\"),\n    ]\n)\n\n\nIn Label Studio, open \"New Project with Chat\". Click on a created task to view dialog history and edit/annotate responses.\n\nCustom Labeling Configuration​\n\nYou can modify the default labeling configuration in LabelStudio to add more target labels like response sentiment, relevance, and many other types annotator's feedback.\n\nNew labeling configuration can be added from UI: go to Settings > Labeling Interface and set up a custom configuration with additional tags like Choices for sentiment or Rating for relevance. Keep in mind that TextArea tag should be presented in any configuration to display the LLM responses.\n\nAlternatively, you can specify the labeling configuration on the initial call before project creation:\n\nls = LabelStudioCallbackHandler(\n    project_config=\"\"\"\n<View>\n<Text name=\"prompt\" value=\"$prompt\"/>\n<TextArea name=\"response\" toName=\"prompt\"/>\n<TextArea name=\"user_feedback\" toName=\"prompt\"/>\n<Rating name=\"rating\" toName=\"prompt\"/>\n<Choices name=\"sentiment\" toName=\"prompt\">\n    <Choice value=\"Positive\"/>\n    <Choice value=\"Negative\"/>\n</Choices>\n</View>\n\"\"\"\n)\n\n\nNote that if the project doesn't exist, it will be created with the specified labeling configuration.\n\nOther parameters​\n\nThe LabelStudioCallbackHandler accepts several optional parameters:\n\napi_key - Label Studio API key. Overrides environmental variable LABEL_STUDIO_API_KEY.\nurl - Label Studio URL. Overrides LABEL_STUDIO_URL, default http://localhost:8080.\nproject_id - Existing Label Studio project ID. Overrides LABEL_STUDIO_PROJECT_ID. Stores data in this project.\nproject_name - Project name if project ID not specified. Creates a new project. Default is \"LangChain-%Y-%m-%d\" formatted with the current date.\nproject_config - custom labeling configuration\nmode: use this shortcut to create target configuration from scratch:\n\"prompt\" - Single prompt, single response. Default.\n\"chat\" - Multi-turn chat mode.\nPrevious\nInfino\nNext\nLLMonitor"
}