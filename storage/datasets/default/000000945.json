{
	"title": "Prompt pipelining | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/prompts_pipelining",
	"html": "ModulesModel I/OPromptsPrompt templatesPrompt pipelining\nPrompt pipelining\n\nThe idea behind prompt pipelining is to provide a user friendly interface for composing different parts of prompts together. You can do this with either string prompts or chat prompts. Constructing prompts this way allows for easy reuse of components.\n\nString prompt pipelining‚Äã\n\nWhen working with string prompts, each template is joined together. You can work with either prompts directly or strings (the first element in the list needs to be a prompt).\n\nfrom langchain.prompts import PromptTemplate\n\nprompt = (\n    PromptTemplate.from_template(\"Tell me a joke about {topic}\")\n    + \", make it funny\"\n    + \"\\n\\nand in {language}\"\n)\n\nprompt\n\n    PromptTemplate(input_variables=['language', 'topic'], output_parser=None, partial_variables={}, template='Tell me a joke about {topic}, make it funny\\n\\nand in {language}', template_format='f-string', validate_template=True)\n\nprompt.format(topic=\"sports\", language=\"spanish\")\n\n    'Tell me a joke about sports, make it funny\\n\\nand in spanish'\n\n\nYou can also use it in an LLMChain, just like before.\n\nfrom langchain.chains import LLMChain\nfrom langchain.chat_models import ChatOpenAI\n\nmodel = ChatOpenAI()\n\nchain = LLMChain(llm=model, prompt=prompt)\n\nchain.run(topic=\"sports\", language=\"spanish\")\n\n    '¬øPor qu√© el futbolista llevaba un paraguas al partido?\\n\\nPorque pronosticaban lluvia de goles.'\n\nChat prompt pipelining‚Äã\n\nA chat prompt is made up a of a list of messages. Purely for developer experience, we've added a convinient way to create these prompts. In this pipeline, each new element is a new message in the final prompt.\n\nfrom langchain.schema import AIMessage, HumanMessage, SystemMessage\n\n\nFirst, let's initialize the base ChatPromptTemplate with a system message. It doesn't have to start with a system, but it's often good practice\n\nprompt = SystemMessage(content=\"You are a nice pirate\")\n\n\nYou can then easily create a pipeline combining it with other messages or message templates. Use a Message when there is no variables to be formatted, use a MessageTemplate when there are variables to be formatted. You can also use just a string (note: this will automatically get inferred as a HumanMessagePromptTemplate.)\n\nnew_prompt = (\n    prompt + HumanMessage(content=\"hi\") + AIMessage(content=\"what?\") + \"{input}\"\n)\n\n\nUnder the hood, this creates an instance of the ChatPromptTemplate class, so you can use it just as you did before!\n\nnew_prompt.format_messages(input=\"i said hi\")\n\n    [SystemMessage(content='You are a nice pirate', additional_kwargs={}),\n     HumanMessage(content='hi', additional_kwargs={}, example=False),\n     AIMessage(content='what?', additional_kwargs={}, example=False),\n     HumanMessage(content='i said hi', additional_kwargs={}, example=False)]\n\n\nYou can also use it in an LLMChain, just like before.\n\nfrom langchain.chains import LLMChain\nfrom langchain.chat_models import ChatOpenAI\n\nmodel = ChatOpenAI()\n\nchain = LLMChain(llm=model, prompt=new_prompt)\n\nchain.run(\"i said hi\")\n\n    'Oh, hello! How can I assist you today?'\n\nPrevious\nSerialization\nNext\nValidate template"
}