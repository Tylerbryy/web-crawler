{
	"title": "SageMaker | 🦜️🔗 Langchain",
	"url": "https://python.langchain.com/docs/integrations/text_embedding/sagemaker-endpoint",
	"html": "ComponentsText embedding modelsSageMaker\nSageMaker\n\nLet's load the SageMaker Endpoints Embeddings class. The class can be used if you host, e.g. your own Hugging Face model on SageMaker.\n\nFor instructions on how to do this, please see here.\n\nNote: In order to handle batched requests, you will need to adjust the return line in the predict_fn() function within the custom inference.py script:\n\nChange from\n\nreturn {\"vectors\": sentence_embeddings[0].tolist()}\n\nto:\n\nreturn {\"vectors\": sentence_embeddings.tolist()}.\n\npip3 install langchain boto3\n\nimport json\nfrom typing import Dict, List\n\nfrom langchain.embeddings import SagemakerEndpointEmbeddings\nfrom langchain.embeddings.sagemaker_endpoint import EmbeddingsContentHandler\n\n\nclass ContentHandler(EmbeddingsContentHandler):\n    content_type = \"application/json\"\n    accepts = \"application/json\"\n\n    def transform_input(self, inputs: list[str], model_kwargs: Dict) -> bytes:\n        \"\"\"\n        Transforms the input into bytes that can be consumed by SageMaker endpoint.\n        Args:\n            inputs: List of input strings.\n            model_kwargs: Additional keyword arguments to be passed to the endpoint.\n        Returns:\n            The transformed bytes input.\n        \"\"\"\n        # Example: inference.py expects a JSON string with a \"inputs\" key:\n        input_str = json.dumps({\"inputs\": inputs, **model_kwargs})\n        return input_str.encode(\"utf-8\")\n\n    def transform_output(self, output: bytes) -> List[List[float]]:\n        \"\"\"\n        Transforms the bytes output from the endpoint into a list of embeddings.\n        Args:\n            output: The bytes output from SageMaker endpoint.\n        Returns:\n            The transformed output - list of embeddings\n        Note:\n            The length of the outer list is the number of input strings.\n            The length of the inner lists is the embedding dimension.\n        \"\"\"\n        # Example: inference.py returns a JSON string with the list of\n        # embeddings in a \"vectors\" key:\n        response_json = json.loads(output.read().decode(\"utf-8\"))\n        return response_json[\"vectors\"]\n\n\ncontent_handler = ContentHandler()\n\n\nembeddings = SagemakerEndpointEmbeddings(\n    # credentials_profile_name=\"credentials-profile-name\",\n    endpoint_name=\"huggingface-pytorch-inference-2023-03-21-16-14-03-834\",\n    region_name=\"us-east-1\",\n    content_handler=content_handler,\n)\n\n\n# client = boto3.client(\n#     \"sagemaker-runtime\",\n#     region_name=\"us-west-2\"\n# )\n# embeddings = SagemakerEndpointEmbeddings(\n#     endpoint_name=\"huggingface-pytorch-inference-2023-03-21-16-14-03-834\",\n#     client=client\n#     content_handler=content_handler,\n# )\n\nquery_result = embeddings.embed_query(\"foo\")\n\ndoc_results = embeddings.embed_documents([\"foo\"])\n\ndoc_results\n\nPrevious\nOpenAI\nNext\nSelf Hosted"
}