{
	"title": "Templates | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/templates/",
	"html": "Templates\nTemplates\n\nHighlighting a few different categories of templates\n\n‚≠ê Popular‚Äã\n\nThese are some of the more popular templates to get started with.\n\nRetrieval Augmented Generation Chatbot: Build a chatbot over your data. Defaults to OpenAI and Pinecone.\nExtraction with OpenAI Functions: Do extraction of structured data from unstructured data. Uses OpenAI function calling.\nLocal Retrieval Augmented Generation: Build a chatbot over your data. Uses only local tooling: Ollama, GPT4all, Chroma.\nOpenAI Functions Agent: Build a chatbot that can take actions. Uses OpenAI function calling and Tavily.\nXML Agent: Build a chatbot that can take actions. Uses Anthropic and You.com.\nüì• Advanced Retrieval‚Äã\n\nThese templates cover advanced retrieval techniques, which can be used for chat and QA over databases or documents.\n\nReranking: This retrieval technique uses Cohere's reranking endpoint to rerank documents from an initial retrieval step.\nAnthropic Iterative Search: This retrieval technique uses iterative prompting to determine what to retrieve and whether the retriever documents are good enough.\nParent Document Retrieval using Neo4j or MongoDB: This retrieval technique stores embeddings for smaller chunks, but then returns larger chunks to pass to the model for generation.\nSemi-Structured RAG: The template shows how to do retrieval over semi-structured data (e.g. data that involves both text and tables).\nTemporal RAG: The template shows how to do hybrid search over data with a time-based component using Timescale Vector.\nüîçAdvanced Retrieval - Query Transformation‚Äã\n\nA selection of advanced retrieval methods that involve transforming the original user query, which can improve retrieval quality.\n\nHypothetical Document Embeddings: A retrieval technique that generates a hypothetical document for a given query, and then uses the embedding of that document to do semantic search. Paper.\nRewrite-Retrieve-Read: A retrieval technique that rewrites a given query before passing it to a search engine. Paper.\nStep-back QA Prompting: A retrieval technique that generates a \"step-back\" question and then retrieves documents relevant to both that question and the original question. Paper.\nRAG-Fusion: A retrieval technique that generates multiple queries and then reranks the retrieved documents using reciprocal rank fusion. Article.\nMulti-Query Retriever: This retrieval technique uses an LLM to generate multiple queries and then fetches documents for all queries.\nüß†Advanced Retrieval - Query Construction‚Äã\n\nA selection of advanced retrieval methods that involve constructing a query in a separate DSL from natural language, which enable natural languge chat over various structured databases.\n\nElastic Query Generator: Generate elastic search queries from natural language.\nNeo4j Cypher Generation: Generate cypher statements from natural language. Available with a \"full text\" option as well.\nSupabase Self Query: Parse a natural language query into a semantic query as well as a metadata filter for Supabase.\nü¶ô OSS Models‚Äã\n\nThese templates use OSS models, which enable privacy for sensitive data.\n\nLocal Retrieval Augmented Generation: Build a chatbot over your data. Uses only local tooling: Ollama, GPT4all, Chroma.\nSQL Question Answering (Replicate): Question answering over a SQL database, using Llama2 hosted on Replicate.\nSQL Question Answering (LlamaCpp): Question answering over a SQL database, using Llama2 through LlamaCpp.\nSQL Question Answering (Ollama): Question answering over a SQL database, using Llama2 through Ollama.\n‚õèÔ∏è Extraction‚Äã\n\nThese templates extract data in a structured format based upon a user-specified schema.\n\nExtraction Using OpenAI Functions: Extract information from text using OpenAI Function Calling.\nExtraction Using Anthropic Functions: Extract information from text using a LangChain wrapper around the Anthropic endpoints intended to simulate function calling.\nExtract BioTech Plate Data: Extract microplate data from messy Excel spreadsheets into a more normalized format.\n‚õèÔ∏èSummarization and tagging‚Äã\n\nThese templates summarize or categorize documents and text.\n\nSummarization using Anthropic: Uses Anthropic's Claude2 to summarize long documents.\nü§ñ Agents‚Äã\n\nThese templates build chatbots that can take actions, helping to automate tasks.\n\nOpenAI Functions Agent: Build a chatbot that can take actions. Uses OpenAI function calling and Tavily.\nXML Agent: Build a chatbot that can take actions. Uses Anthropic and You.com.\nüö® Safety and evaluation‚Äã\n\nThese templates enable moderation or evaluation of LLM outputs.\n\nGuardrails Output Parser: Use guardrails-ai to validate LLM output.\nChatbot Feedback: Use LangSmith to evaluate chatbot responses.\nNext\nanthropic-iterative-search"
}