{
	"title": "Neo4j Vector Index | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/integrations/vectorstores/neo4jvector",
	"html": "ComponentsVector storesNeo4j Vector Index\nNeo4j Vector Index\n\nNeo4j is an open-source graph database with integrated support for vector similarity search\n\nIt supports:\n\napproximate nearest neighbor search\nEuclidean similarity and cosine similarity\nHybrid search combining vector and keyword searches\n\nThis notebook shows how to use the Neo4j vector index (Neo4jVector).\n\nSee the installation instruction.\n\n# Pip install necessary package\npip install neo4j\npip install openai\npip install tiktoken\n\n\nWe want to use OpenAIEmbeddings so we have to get the OpenAI API Key.\n\nimport getpass\nimport os\n\nos.environ[\"OPENAI_API_KEY\"] = getpass.getpass(\"OpenAI API Key:\")\n\n    OpenAI API Key: ¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑\n\nfrom langchain.docstore.document import Document\nfrom langchain.document_loaders import TextLoader\nfrom langchain.embeddings.openai import OpenAIEmbeddings\nfrom langchain.text_splitter import CharacterTextSplitter\nfrom langchain.vectorstores import Neo4jVector\n\nloader = TextLoader(\"../../modules/state_of_the_union.txt\")\n\ndocuments = loader.load()\ntext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)\ndocs = text_splitter.split_documents(documents)\n\nembeddings = OpenAIEmbeddings()\n\n# Neo4jVector requires the Neo4j database credentials\n\nurl = \"bolt://localhost:7687\"\nusername = \"neo4j\"\npassword = \"pleaseletmein\"\n\n# You can also use environment variables instead of directly passing named parameters\n# os.environ[\"NEO4J_URI\"] = \"bolt://localhost:7687\"\n# os.environ[\"NEO4J_USERNAME\"] = \"neo4j\"\n# os.environ[\"NEO4J_PASSWORD\"] = \"pleaseletmein\"\n\nSimilarity Search with Cosine Distance (Default)‚Äã\n# The Neo4jVector Module will connect to Neo4j and create a vector index if needed.\n\ndb = Neo4jVector.from_documents(\n    docs, OpenAIEmbeddings(), url=url, username=username, password=password\n)\n\n    /home/tomaz/neo4j/langchain/libs/langchain/langchain/vectorstores/neo4j_vector.py:165: ExperimentalWarning: The configuration may change in the future.\n      self._driver.verify_connectivity()\n\nquery = \"What did the president say about Ketanji Brown Jackson\"\ndocs_with_score = db.similarity_search_with_score(query, k=2)\n\nfor doc, score in docs_with_score:\n    print(\"-\" * 80)\n    print(\"Score: \", score)\n    print(doc.page_content)\n    print(\"-\" * 80)\n\n    --------------------------------------------------------------------------------\n    Score:  0.9099836349487305\n    Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections. \n    \n    Tonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service. \n    \n    One of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court. \n    \n    And I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.\n    --------------------------------------------------------------------------------\n    --------------------------------------------------------------------------------\n    Score:  0.9099686145782471\n    Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections. \n    \n    Tonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service. \n    \n    One of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court. \n    \n    And I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.\n    --------------------------------------------------------------------------------\n\nWorking with vectorstore‚Äã\n\nAbove, we created a vectorstore from scratch. However, often times we want to work with an existing vectorstore. In order to do that, we can initialize it directly.\n\nindex_name = \"vector\"  # default index name\n\nstore = Neo4jVector.from_existing_index(\n    OpenAIEmbeddings(),\n    url=url,\n    username=username,\n    password=password,\n    index_name=index_name,\n)\n\n    /home/tomaz/neo4j/langchain/libs/langchain/langchain/vectorstores/neo4j_vector.py:165: ExperimentalWarning: The configuration may change in the future.\n      self._driver.verify_connectivity()\n\n\nWe can also initialize a vectorstore from existing graph using the from_existing_graph method. This method pulls relevant text information from the database, and calculates and stores the text embeddings back to the database.\n\n# First we create sample data in graph\nstore.query(\"CREATE (p:Person {name: 'Tomaz', location:'Slovenia', hobby:'Bicycle'})\")\n\n    []\n\n# Now we initialize from existing graph\nexisting_graph = Neo4jVector.from_existing_graph(\n    embedding=OpenAIEmbeddings(),\n    url=url,\n    username=username,\n    password=password,\n    index_name=\"person_index\",\n    node_label=\"Person\",\n    text_node_properties=[\"name\", \"location\"],\n    embedding_node_property=\"embedding\",\n)\nresult = existing_graph.similarity_search(\"Slovenia\", k=1)\n\n    /home/tomaz/neo4j/langchain/libs/langchain/langchain/vectorstores/neo4j_vector.py:165: ExperimentalWarning: The configuration may change in the future.\n      self._driver.verify_connectivity()\n\nresult[0]\n\n    Document(page_content='\\nname: Tomaz\\nlocation: Slovenia', metadata={'hobby': 'Bicycle'})\n\nAdd documents‚Äã\n\nWe can add documents to the existing vectorstore.\n\nstore.add_documents([Document(page_content=\"foo\")])\n\n    ['187fc53a-5dde-11ee-ad78-1f6b05bf8513']\n\ndocs_with_score = store.similarity_search_with_score(\"foo\")\n\ndocs_with_score[0]\n\n    (Document(page_content='foo', metadata={}), 1.0)\n\nHybrid search (vector + keyword)‚Äã\n\nNeo4j integrates both vector and keyword indexes, which allows you to use a hybrid search approach\n\n# The Neo4jVector Module will connect to Neo4j and create a vector and keyword indices if needed.\nhybrid_db = Neo4jVector.from_documents(\n    docs,\n    OpenAIEmbeddings(),\n    url=url,\n    username=username,\n    password=password,\n    search_type=\"hybrid\",\n)\n\n    /home/tomaz/neo4j/langchain/libs/langchain/langchain/vectorstores/neo4j_vector.py:165: ExperimentalWarning: The configuration may change in the future.\n      self._driver.verify_connectivity()\n\n\nTo load the hybrid search from existing indexes, you have to provide both the vector and keyword indices\n\nindex_name = \"vector\"  # default index name\nkeyword_index_name = \"keyword\"  # default keyword index name\n\nstore = Neo4jVector.from_existing_index(\n    OpenAIEmbeddings(),\n    url=url,\n    username=username,\n    password=password,\n    index_name=index_name,\n    keyword_index_name=keyword_index_name,\n    search_type=\"hybrid\",\n)\n\n    /home/tomaz/neo4j/langchain/libs/langchain/langchain/vectorstores/neo4j_vector.py:165: ExperimentalWarning: The configuration may change in the future.\n      self._driver.verify_connectivity()\n\nRetriever options‚Äã\n\nThis section shows how to use Neo4jVector as a retriever.\n\nretriever = store.as_retriever()\nretriever.get_relevant_documents(query)[0]\n\n    Document(page_content='Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections. \\n\\nTonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service. \\n\\nOne of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court. \\n\\nAnd I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.', metadata={'source': '../../modules/state_of_the_union.txt'})\n\nQuestion Answering with Sources‚Äã\n\nThis section goes over how to do question-answering with sources over an Index. It does this by using the RetrievalQAWithSourcesChain, which does the lookup of the documents from an Index.\n\nfrom langchain.chains import RetrievalQAWithSourcesChain\nfrom langchain.chat_models import ChatOpenAI\n\nchain = RetrievalQAWithSourcesChain.from_chain_type(\n    ChatOpenAI(temperature=0), chain_type=\"stuff\", retriever=retriever\n)\n\nchain(\n    {\"question\": \"What did the president say about Justice Breyer\"},\n    return_only_outputs=True,\n)\n\n    {'answer': \"The president honored Justice Stephen Breyer, who is retiring from the United States Supreme Court. He thanked him for his service and mentioned that he nominated Circuit Court of Appeals Judge Ketanji Brown Jackson to continue Justice Breyer's legacy of excellence. \\n\",\n     'sources': '../../modules/state_of_the_union.txt'}\n\nPrevious\nMyScale\nNext\nNucliaDB"
}