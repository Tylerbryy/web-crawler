{
	"title": "sql-pgvector | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/templates/sql-pgvector",
	"html": "Templatessql-pgvector\nsql-pgvector\n\nThis template enables user to use pgvector for combining postgreSQL with semantic search / RAG.\n\nIt uses PGVector extension as shown in the RAG empowered SQL cookbook\n\nEnvironment Setup‚Äã\n\nIf you are using ChatOpenAI as your LLM, make sure the OPENAI_API_KEY is set in your environment. You can change both the LLM and embeddings model inside chain.py\n\nAnd you can configure configure the following environment variables for use by the template (defaults are in parentheses)\n\nPOSTGRES_USER (postgres)\nPOSTGRES_PASSWORD (test)\nPOSTGRES_DB (vectordb)\nPOSTGRES_HOST (localhost)\nPOSTGRES_PORT (5432)\n\nIf you don't have a postgres instance, you can run one locally in docker:\n\ndocker run \\\n  --name some-postgres \\\n  -e POSTGRES_PASSWORD=test \\\n  -e POSTGRES_USER=postgres \\\n  -e POSTGRES_DB=vectordb \\\n  -p 5432:5432 \\\n  postgres:16\n\n\nAnd to start again later, use the --name defined above:\n\ndocker start some-postgres\n\nPostgreSQL Database setup‚Äã\n\nApart from having pgvector extension enabled, you will need to do some setup before being able to run semantic search within your SQL queries.\n\nIn order to run RAG over your postgreSQL database you will need to generate the embeddings for the specific columns you want.\n\nThis process is covered in the RAG empowered SQL cookbook, but the overall approach consist of:\n\nQuerying for unique values in the column\nGenerating embeddings for those values\nStore the embeddings in a separate column or in an auxiliary table.\nUsage‚Äã\n\nTo use this package, you should first have the LangChain CLI installed:\n\npip install -U langchain-cli\n\n\nTo create a new LangChain project and install this as the only package, you can do:\n\nlangchain app new my-app --package sql-pgvector\n\n\nIf you want to add this to an existing project, you can just run:\n\nlangchain app add sql-pgvector\n\n\nAnd add the following code to your server.py file:\n\nfrom sql_pgvector import chain as sql_pgvector_chain\n\nadd_routes(app, sql_pgvector_chain, path=\"/sql-pgvector\")\n\n\n(Optional) Let's now configure LangSmith. LangSmith will help us trace, monitor and debug LangChain applications. LangSmith is currently in private beta, you can sign up here. If you don't have access, you can skip this section\n\nexport LANGCHAIN_TRACING_V2=true\nexport LANGCHAIN_API_KEY=<your-api-key>\nexport LANGCHAIN_PROJECT=<your-project>  # if not specified, defaults to \"default\"\n\n\nIf you are inside this directory, then you can spin up a LangServe instance directly by:\n\nlangchain serve\n\n\nThis will start the FastAPI app with a server is running locally at http://localhost:8000\n\nWe can see all templates at http://127.0.0.1:8000/docs We can access the playground at http://127.0.0.1:8000/sql-pgvector/playground\n\nWe can access the template from code with:\n\nfrom langserve.client import RemoteRunnable\n\nrunnable = RemoteRunnable(\"http://localhost:8000/sql-pgvector\")\n\nPrevious\nsql-ollama\nNext\nstepback-qa-prompting"
}