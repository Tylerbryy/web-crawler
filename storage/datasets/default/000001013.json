{
	"title": "Nuclia Understanding | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/integrations/tools/nuclia",
	"html": "ComponentsToolsNuclia Understanding\nNuclia Understanding\n\nNuclia automatically indexes your unstructured data from any internal and external source, providing optimized search results and generative answers. It can handle video and audio transcription, image content extraction, and document parsing.\n\nThe Nuclia Understanding API supports the processing of unstructured data, including text, web pages, documents, and audio/video contents. It extracts all texts wherever it is (using speech-to-text or OCR when needed), it identifies entities, it aslo extracts metadata, embedded files (like images in a PDF), and web links. It also provides a summary of the content.\n\nTo use the Nuclia Understanding API, you need to have a Nuclia account. You can create one for free at https://nuclia.cloud, and then create a NUA key.\n\n#!pip install --upgrade protobuf\n#!pip install nucliadb-protos\n\nimport os\n\nos.environ[\"NUCLIA_ZONE\"] = \"<YOUR_ZONE>\"  # e.g. europe-1\nos.environ[\"NUCLIA_NUA_KEY\"] = \"<YOUR_API_KEY>\"\n\nfrom langchain.tools.nuclia import NucliaUnderstandingAPI\n\nnua = NucliaUnderstandingAPI(enable_ml=False)\n\n\nYou can push files to the Nuclia Understanding API using the push action. As the processing is done asynchronously, the results might be returned in a different order than the files were pushed. That is why you need to provide an id to match the results with the corresponding file.\n\nnua.run({\"action\": \"push\", \"id\": \"1\", \"path\": \"./report.docx\"})\nnua.run({\"action\": \"push\", \"id\": \"2\", \"path\": \"./interview.mp4\"})\n\n\nYou can now call the pull action in a loop until you get the JSON-formatted result.\n\nimport time\n\npending = True\ndata = None\nwhile pending:\n    time.sleep(15)\n    data = nua.run({\"action\": \"pull\", \"id\": \"1\", \"path\": None})\n    if data:\n        print(data)\n        pending = False\n    else:\n        print(\"waiting...\")\n\n\nYou can also do it in one step in async mode, you only need to do a push, and it will wait until the results are pulled:\n\nimport asyncio\n\n\nasync def process():\n    data = await nua.arun(\n        {\"action\": \"push\", \"id\": \"1\", \"path\": \"./talk.mp4\", \"text\": None}\n    )\n    print(data)\n\n\nasyncio.run(process())\n\nRetrieved information‚Äã\n\nNuclia returns the following information:\n\nfile metadata\nextracted text\nnested text (like text in an embedded image)\na summary (only when enable_ml is set to True)\nparagraphs and sentences splitting (defined by the position of their first and last characters, plus start time and end time for a video or audio file)\nnamed entities: people, dates, places, organizations, etc. (only when enable_ml is set to True)\nlinks\na thumbnail\nembedded files\nthe vector representations of the text (only when enable_ml is set to True)\n\nNote:\n\nGenerated files (thumbnail, extracted embedded files, etc.) are provided as a token. You can download them with the /processing/download endpoint.\n\nAlso at any level, if an attribute exceeds a certain size, it will be put in a downloadable file and will be replaced in the document by a file pointer. This will consist of {\"file\": {\"uri\": \"JWT_TOKEN\"}}. The rule is that if the size of the message is greater than 1000000 characters, the biggest parts will be moved to downloadable files. First, the compression process will target vectors. If that is not enough, it will target large field metadata, and finally it will target extracted text.\n\nPrevious\nMetaphor Search\nNext\nOpenWeatherMap"
}