{
	"title": "Google Cloud Vertex AI | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/integrations/chat/google_vertex_ai_palm",
	"html": "ComponentsChat modelsGoogle Cloud Vertex AI\nGoogle Cloud Vertex AI\n\nNote: This is separate from the Google PaLM integration. Google has chosen to offer an enterprise version of PaLM through GCP, and this supports the models made available through there.\n\nBy default, Google Cloud does not use customer data to train its foundation models as part of Google Cloud`s AI/ML Privacy Commitment. More details about how Google processes data can also be found in Google's Customer Data Processing Addendum (CDPA).\n\nTo use Google Cloud Vertex AI PaLM you must have the google-cloud-aiplatform Python package installed and either:\n\nHave credentials configured for your environment (gcloud, workload identity, etc...)\nStore the path to a service account JSON file as the GOOGLE_APPLICATION_CREDENTIALS environment variable\n\nThis codebase uses the google.auth library which first looks for the application credentials variable mentioned above, and then looks for system-level auth.\n\nFor more information, see:\n\nhttps://cloud.google.com/docs/authentication/application-default-credentials#GAC\nhttps://googleapis.dev/python/google-auth/latest/reference/google.auth.html#module-google.auth\n#!pip install langchain google-cloud-aiplatform\n\nfrom langchain.chat_models import ChatVertexAI\nfrom langchain.prompts import ChatPromptTemplate\n\nchat = ChatVertexAI()\n\nsystem = \"You are a helpful assistant who translate English to French\"\nhuman = \"Translate this sentence from English to French. I love programming.\"\nprompt = ChatPromptTemplate.from_messages([(\"system\", system), (\"human\", human)])\nmessages = prompt.format_messages()\n\nchat(messages)\n\n    AIMessage(content=\" J'aime la programmation.\", additional_kwargs={}, example=False)\n\n\nIf we want to construct a simple chain that takes user specified parameters:\n\nsystem = (\n    \"You are a helpful assistant that translates {input_language} to {output_language}.\"\n)\nhuman = \"{text}\"\nprompt = ChatPromptTemplate.from_messages([(\"system\", system), (\"human\", human)])\n\nchain = prompt | chat\nchain.invoke(\n    {\n        \"input_language\": \"English\",\n        \"output_language\": \"Japanese\",\n        \"text\": \"I love programming\",\n    }\n)\n\n    AIMessage(content=' ÁßÅ„ÅØ„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞„ÅåÂ§ßÂ•Ω„Åç„Åß„Åô„ÄÇ', additional_kwargs={}, example=False)\n\nCode generation chat models‚Äã\n\nYou can now leverage the Codey API for code chat within Vertex AI. The model name is:\n\ncodechat-bison: for code assistance\nchat = ChatVertexAI(\n    model_name=\"codechat-bison\", max_output_tokens=1000, temperature=0.5\n)\n\n# For simple string in string out usage, we can use the `predict` method:\nprint(chat.predict(\"Write a Python function to identify all prime numbers\"))\n\n     ```python\n    def is_prime(x): \n        if (x <= 1): \n            return False\n        for i in range(2, x): \n            if (x % i == 0): \n                return False\n        return True\n    ```\n\nAsynchronous calls‚Äã\n\nWe can make asynchronous calls via the agenerate and ainvoke methods.\n\nimport asyncio\n\n# import nest_asyncio\n# nest_asyncio.apply()\n\nchat = ChatVertexAI(\n    model_name=\"chat-bison\",\n    max_output_tokens=1000,\n    temperature=0.7,\n    top_p=0.95,\n    top_k=40,\n)\n\nasyncio.run(chat.agenerate([messages]))\n\n    LLMResult(generations=[[ChatGeneration(text=\" J'aime la programmation.\", generation_info=None, message=AIMessage(content=\" J'aime la programmation.\", additional_kwargs={}, example=False))]], llm_output={}, run=[RunInfo(run_id=UUID('223599ef-38f8-4c79-ac6d-a5013060eb9d'))])\n\nasyncio.run(\n    chain.ainvoke(\n        {\n            \"input_language\": \"English\",\n            \"output_language\": \"Sanskrit\",\n            \"text\": \"I love programming\",\n        }\n    )\n)\n\n    AIMessage(content=' ‡§Ö‡§π‡§Ç ‡§™‡•ç‡§∞‡•ã‡§ó‡•ç‡§∞‡§æ‡§Æ‡§ø‡§Ç‡§ó ‡§™‡•ç‡§∞‡•á‡§Æ‡§æ‡§Æ‡§ø', additional_kwargs={}, example=False)\n\nStreaming calls‚Äã\n\nWe can also stream outputs via the stream method:\n\nimport sys\n\nprompt = ChatPromptTemplate.from_messages(\n    [(\"human\", \"List out the 15 most populous countries in the world\")]\n)\nmessages = prompt.format_messages()\nfor chunk in chat.stream(messages):\n    sys.stdout.write(chunk.content)\n    sys.stdout.flush()\n\n     1. China (1,444,216,107)\n    2. India (1,393,409,038)\n    3. United States (332,403,650)\n    4. Indonesia (273,523,615)\n    5. Pakistan (220,892,340)\n    6. Brazil (212,559,409)\n    7. Nigeria (206,139,589)\n    8. Bangladesh (164,689,383)\n    9. Russia (145,934,462)\n    10. Mexico (128,932,488)\n    11. Japan (126,476,461)\n    12. Ethiopia (115,063,982)\n    13. Philippines (109,581,078)\n    14. Egypt (102,334,404)\n    15. Vietnam (97,338,589)\n\nPrevious\nGigaChat\nNext\nTencent Hunyuan"
}