{
	"title": "CnosDB | 🦜️🔗 Langchain",
	"url": "https://python.langchain.com/docs/integrations/providers/cnosdb",
	"html": "ProvidersMoreCnosDB\nCnosDB\n\nCnosDB is an open-source distributed time series database with high performance, high compression rate and high ease of use.\n\nInstallation and Setup​\npip install cnos-connector\n\nConnecting to CnosDB​\n\nYou can connect to CnosDB using the SQLDatabase.from_cnosdb() method.\n\nSyntax​\ndef SQLDatabase.from_cnosdb(url: str = \"127.0.0.1:8902\",\n                              user: str = \"root\",\n                              password: str = \"\",\n                              tenant: str = \"cnosdb\",\n                              database: str = \"public\")\n\n\nArgs:\n\nurl (str): The HTTP connection host name and port number of the CnosDB service, excluding \"http://\" or \"https://\", with a default value of \"127.0.0.1:8902\".\nuser (str): The username used to connect to the CnosDB service, with a default value of \"root\".\npassword (str): The password of the user connecting to the CnosDB service, with a default value of \"\".\ntenant (str): The name of the tenant used to connect to the CnosDB service, with a default value of \"cnosdb\".\ndatabase (str): The name of the database in the CnosDB tenant.\nExamples​\n# Connecting to CnosDB with SQLDatabase Wrapper\nfrom langchain.utilities import SQLDatabase\n\ndb = SQLDatabase.from_cnosdb()\n\n# Creating a OpenAI Chat LLM Wrapper\nfrom langchain.chat_models import ChatOpenAI\n\nllm = ChatOpenAI(temperature=0, model_name=\"gpt-3.5-turbo\")\n\nSQL Database Chain​\n\nThis example demonstrates the use of the SQL Chain for answering a question over a CnosDB.\n\nfrom langchain.utilities import SQLDatabaseChain\n\ndb_chain = SQLDatabaseChain.from_llm(llm, db, verbose=True)\n\ndb_chain.run(\n    \"What is the average temperature of air at station XiaoMaiDao between October 19, 2022 and Occtober 20, 2022?\"\n)\n\n> Entering new  chain...\nWhat is the average temperature of air at station XiaoMaiDao between October 19, 2022 and Occtober 20, 2022?\nSQLQuery:SELECT AVG(temperature) FROM air WHERE station = 'XiaoMaiDao' AND time >= '2022-10-19' AND time < '2022-10-20'\nSQLResult: [(68.0,)]\nAnswer:The average temperature of air at station XiaoMaiDao between October 19, 2022 and October 20, 2022 is 68.0.\n> Finished chain.\n\nSQL Database Agent​\n\nThis example demonstrates the use of the SQL Database Agent for answering questions over a CnosDB.\n\nfrom langchain.agents import create_sql_agent\nfrom langchain.agents.agent_toolkits import SQLDatabaseToolkit\n\ntoolkit = SQLDatabaseToolkit(db=db, llm=llm)\nagent = create_sql_agent(llm=llm, toolkit=toolkit, verbose=True)\n\nagent.run(\n    \"What is the average temperature of air at station XiaoMaiDao between October 19, 2022 and Occtober 20, 2022?\"\n)\n\n> Entering new  chain...\nAction: sql_db_list_tables\nAction Input: \"\"\nObservation: air\nThought:The \"air\" table seems relevant to the question. I should query the schema of the \"air\" table to see what columns are available.\nAction: sql_db_schema\nAction Input: \"air\"\nObservation:\nCREATE TABLE air (\n    pressure FLOAT,\n    station STRING,\n    temperature FLOAT,\n    time TIMESTAMP,\n    visibility FLOAT\n)\n\n/*\n3 rows from air table:\npressure    station temperature time    visibility\n75.0    XiaoMaiDao  67.0    2022-10-19T03:40:00 54.0\n77.0    XiaoMaiDao  69.0    2022-10-19T04:40:00 56.0\n76.0    XiaoMaiDao  68.0    2022-10-19T05:40:00 55.0\n*/\nThought:The \"temperature\" column in the \"air\" table is relevant to the question. I can query the average temperature between the specified dates.\nAction: sql_db_query\nAction Input: \"SELECT AVG(temperature) FROM air WHERE station = 'XiaoMaiDao' AND time >= '2022-10-19' AND time <= '2022-10-20'\"\nObservation: [(68.0,)]\nThought:The average temperature of air at station XiaoMaiDao between October 19, 2022 and October 20, 2022 is 68.0.\nFinal Answer: 68.0\n\n> Finished chain.\n\nPrevious\nClickHouse\nNext\nCohere"
}