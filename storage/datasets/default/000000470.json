{
	"title": "Vespa | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/integrations/retrievers/vespa",
	"html": "ComponentsRetrieversVespa\nVespa\n\nVespa is a fully featured search engine and vector database. It supports vector search (ANN), lexical search, and search in structured data, all in the same query.\n\nThis notebook shows how to use Vespa.ai as a LangChain retriever.\n\nIn order to create a retriever, we use pyvespa to create a connection a Vespa service.\n\n#!pip install pyvespa\n\nfrom vespa.application import Vespa\n\nvespa_app = Vespa(url=\"https://doc-search.vespa.oath.cloud\")\n\n\nThis creates a connection to a Vespa service, here the Vespa documentation search service. Using pyvespa package, you can also connect to a Vespa Cloud instance or a local Docker instance.\n\nAfter connecting to the service, you can set up the retriever:\n\nfrom langchain.retrievers.vespa_retriever import VespaRetriever\n\nvespa_query_body = {\n    \"yql\": \"select content from paragraph where userQuery()\",\n    \"hits\": 5,\n    \"ranking\": \"documentation\",\n    \"locale\": \"en-us\",\n}\nvespa_content_field = \"content\"\nretriever = VespaRetriever(vespa_app, vespa_query_body, vespa_content_field)\n\n\nThis sets up a LangChain retriever that fetches documents from the Vespa application. Here, up to 5 results are retrieved from the content field in the paragraph document type, using doumentation as the ranking method. The userQuery() is replaced with the actual query passed from LangChain.\n\nPlease refer to the pyvespa documentation for more information.\n\nNow you can return the results and continue using the results in LangChain.\n\nretriever.get_relevant_documents(\"what is vespa?\")\n\nPrevious\nTF-IDF\nNext\nWeaviate Hybrid Search"
}