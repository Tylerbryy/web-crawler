{
	"title": "Faiss (Async) | 🦜️🔗 Langchain",
	"url": "https://python.langchain.com/docs/integrations/vectorstores/faiss_async",
	"html": "ComponentsVector storesFaiss (Async)\nFaiss (Async)\n\nFacebook AI Similarity Search (Faiss) is a library for efficient similarity search and clustering of dense vectors. It contains algorithms that search in sets of vectors of any size, up to ones that possibly do not fit in RAM. It also contains supporting code for evaluation and parameter tuning.\n\nFaiss documentation.\n\nThis notebook shows how to use functionality related to the FAISS vector database using asyncio. LangChain implemented the synchronous and asynchronous vector store functions.\n\nSee synchronous version here.\n\npip install faiss-gpu # For CUDA 7.5+ Supported GPU's.\n# OR\npip install faiss-cpu # For CPU Installation\n\n\nWe want to use OpenAIEmbeddings so we have to get the OpenAI API Key.\n\nimport getpass\nimport os\n\nos.environ[\"OPENAI_API_KEY\"] = getpass.getpass(\"OpenAI API Key:\")\n\n# Uncomment the following line if you need to initialize FAISS with no AVX2 optimization\n# os.environ['FAISS_NO_AVX2'] = '1'\n\nfrom langchain.document_loaders import TextLoader\nfrom langchain.embeddings.openai import OpenAIEmbeddings\nfrom langchain.text_splitter import CharacterTextSplitter\nfrom langchain.vectorstores import FAISS\n\nloader = TextLoader(\"../../../extras/modules/state_of_the_union.txt\")\ndocuments = loader.load()\ntext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)\ndocs = text_splitter.split_documents(documents)\n\nembeddings = OpenAIEmbeddings()\n\ndb = await FAISS.afrom_documents(docs, embeddings)\n\nquery = \"What did the president say about Ketanji Brown Jackson\"\ndocs = await db.asimilarity_search(query)\n\nprint(docs[0].page_content)\n\nSimilarity Search with score​\n\nThere are some FAISS specific methods. One of them is similarity_search_with_score, which allows you to return not only the documents but also the distance score of the query to them. The returned distance score is L2 distance. Therefore, a lower score is better.\n\ndocs_and_scores = await db.asimilarity_search_with_score(query)\n\ndocs_and_scores[0]\n\n\nIt is also possible to do a search for documents similar to a given embedding vector using similarity_search_by_vector which accepts an embedding vector as a parameter instead of a string.\n\nembedding_vector = await embeddings.aembed_query(query)\ndocs_and_scores = await db.asimilarity_search_by_vector(embedding_vector)\n\nSaving and loading​\n\nYou can also save and load a FAISS index. This is useful so you don't have to recreate it everytime you use it.\n\ndb.save_local(\"faiss_index\")\n\nnew_db = FAISS.load_local(\"faiss_index\", embeddings, asynchronous=True)\n\ndocs = await new_db.asimilarity_search(query)\n\ndocs[0]\n\nSerializing and De-Serializing to bytes\n\nyou can pickle the FAISS Index by these functions. If you use embeddings model which is of 90 mb (sentence-transformers/all-MiniLM-L6-v2 or any other model), the resultant pickle size would be more than 90 mb. the size of the model is also included in the overall size. To overcome this, use the below functions. These functions only serializes FAISS index and size would be much lesser. this can be helpful if you wish to store the index in database like sql.\n\nfrom langchain.embeddings.huggingface import HuggingFaceEmbeddings\n\npkl = db.serialize_to_bytes()  # serializes the faiss index\nembeddings = HuggingFaceEmbeddings(model_name=\"all-MiniLM-L6-v2\")\ndb = FAISS.deserialize_from_bytes(\n    embeddings=embeddings, serialized=pkl, asynchronous=True\n)  # Load the index\n\nMerging​\n\nYou can also merge two FAISS vectorstores\n\ndb1 = await FAISS.afrom_texts([\"foo\"], embeddings)\ndb2 = await FAISS.afrom_texts([\"bar\"], embeddings)\n\ndb1.docstore._dict\n\n    {'8164a453-9643-4959-87f7-9ba79f9e8fb0': Document(page_content='foo')}\n\ndb2.docstore._dict\n\n    {'4fbcf8a2-e80f-4f65-9308-2f4cb27cb6e7': Document(page_content='bar')}\n\ndb1.merge_from(db2)\n\ndb1.docstore._dict\n\n    {'8164a453-9643-4959-87f7-9ba79f9e8fb0': Document(page_content='foo'),\n     '4fbcf8a2-e80f-4f65-9308-2f4cb27cb6e7': Document(page_content='bar')}\n\nSimilarity Search with filtering​\n\nFAISS vectorstore can also support filtering, since the FAISS does not natively support filtering we have to do it manually. This is done by first fetching more results than k and then filtering them. You can filter the documents based on metadata. You can also set the fetch_k parameter when calling any search method to set how many documents you want to fetch before filtering. Here is a small example:\n\nfrom langchain.schema import Document\n\nlist_of_documents = [\n    Document(page_content=\"foo\", metadata=dict(page=1)),\n    Document(page_content=\"bar\", metadata=dict(page=1)),\n    Document(page_content=\"foo\", metadata=dict(page=2)),\n    Document(page_content=\"barbar\", metadata=dict(page=2)),\n    Document(page_content=\"foo\", metadata=dict(page=3)),\n    Document(page_content=\"bar burr\", metadata=dict(page=3)),\n    Document(page_content=\"foo\", metadata=dict(page=4)),\n    Document(page_content=\"bar bruh\", metadata=dict(page=4)),\n]\ndb = FAISS.from_documents(list_of_documents, embeddings)\nresults_with_scores = db.similarity_search_with_score(\"foo\")\nfor doc, score in results_with_scores:\n    print(f\"Content: {doc.page_content}, Metadata: {doc.metadata}, Score: {score}\")\n\n    Content: foo, Metadata: {'page': 1}, Score: 5.159960813797904e-15\n    Content: foo, Metadata: {'page': 2}, Score: 5.159960813797904e-15\n    Content: foo, Metadata: {'page': 3}, Score: 5.159960813797904e-15\n    Content: foo, Metadata: {'page': 4}, Score: 5.159960813797904e-15\n\n\nNow we make the same query call but we filter for only page = 1\n\nresults_with_scores = await db.asimilarity_search_with_score(\"foo\", filter=dict(page=1))\nfor doc, score in results_with_scores:\n    print(f\"Content: {doc.page_content}, Metadata: {doc.metadata}, Score: {score}\")\n\n    Content: foo, Metadata: {'page': 1}, Score: 5.159960813797904e-15\n    Content: bar, Metadata: {'page': 1}, Score: 0.3131446838378906\n\n\nSame thing can be done with the max_marginal_relevance_search as well.\n\nresults = await db.amax_marginal_relevance_search(\"foo\", filter=dict(page=1))\nfor doc in results:\n    print(f\"Content: {doc.page_content}, Metadata: {doc.metadata}\")\n\n    Content: foo, Metadata: {'page': 1}\n    Content: bar, Metadata: {'page': 1}\n\n\nHere is an example of how to set fetch_k parameter when calling similarity_search. Usually you would want the fetch_k parameter >> k parameter. This is because the fetch_k parameter is the number of documents that will be fetched before filtering. If you set fetch_k to a low number, you might not get enough documents to filter from.\n\nresults = await db.asimilarity_search(\"foo\", filter=dict(page=1), k=1, fetch_k=4)\nfor doc in results:\n    print(f\"Content: {doc.page_content}, Metadata: {doc.metadata}\")\n\n    Content: foo, Metadata: {'page': 1}\n\nDelete​\n\nYou can also delete ids. Note that the ids to delete should be the ids in the docstore.\n\ndb.delete([db.index_to_docstore_id[0]])\n\n    True\n\n# Is now missing\n0 in db.index_to_docstore_id\n\n    False\n\nPrevious\nFaiss\nNext\nHippo"
}