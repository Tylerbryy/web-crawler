{
	"title": "RAG with Timescale Vector using hybrid search | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/templates/rag-timescale-hybrid-search-time",
	"html": "TemplatesRAG with Timescale Vector using hybrid search\nRAG with Timescale Vector using hybrid search\n\nThis template shows how to use timescale-vector with the self-query retriver to perform hybrid search on similarity and time. This is useful any time your data has a strong time-based component. Some examples of such data are:\n\nNews articles (politics, business, etc)\nBlog posts, documentation or other published material (public or private).\nSocial media posts\nChangelogs of any kind\nMessages\n\nSuch items are often searched by both similarity and time. For example: Show me all news about Toyota trucks from 2022.\n\nTimescale Vector provides superior performance when searching for embeddings within a particular timeframe by leveraging automatic table partitioning to isolate data for particular time-ranges.\n\nLangchain's self-query retriever allows deducing time-ranges (as well as other search criteria) from the text of user queries.\n\nWhat is Timescale Vector?‚Äã\n\nTimescale Vector is PostgreSQL++ for AI applications.\n\nTimescale Vector enables you to efficiently store and query billions of vector embeddings in PostgreSQL.\n\nEnhances pgvector with faster and more accurate similarity search on 1B+ vectors via DiskANN inspired indexing algorithm.\nEnables fast time-based vector search via automatic time-based partitioning and indexing.\nProvides a familiar SQL interface for querying vector embeddings and relational data.\n\nTimescale Vector is cloud PostgreSQL for AI that scales with you from POC to production:\n\nSimplifies operations by enabling you to store relational metadata, vector embeddings, and time-series data in a single database.\nBenefits from rock-solid PostgreSQL foundation with enterprise-grade feature liked streaming backups and replication, high-availability and row-level security.\nEnables a worry-free experience with enterprise-grade security and compliance.\nHow to access Timescale Vector‚Äã\n\nTimescale Vector is available on Timescale, the cloud PostgreSQL platform. (There is no self-hosted version at this time.)\n\nLangChain users get a 90-day free trial for Timescale Vector.\nTo get started, signup to Timescale, create a new database and follow this notebook!\nSee the installation instructions for more details on using Timescale Vector in python.\nEnvironment Setup‚Äã\n\nThis template uses Timescale Vector as a vectorstore and requires that TIMESCALES_SERVICE_URL. Signup for a 90-day trial here if you don't yet have an account.\n\nTo load the sample dataset, set LOAD_SAMPLE_DATA=1. To load your own dataset see the section below.\n\nSet the OPENAI_API_KEY environment variable to access the OpenAI models.\n\nUsage‚Äã\n\nTo use this package, you should first have the LangChain CLI installed:\n\npip install -U langchain-cli\n\n\nTo create a new LangChain project and install this as the only package, you can do:\n\nlangchain app new my-app --package rag-timescale-hybrid-search-time\n\n\nIf you want to add this to an existing project, you can just run:\n\nlangchain app add rag-timescale-hybrid-search-time\n\n\nAnd add the following code to your server.py file:\n\nfrom rag_timescale_hybrid_search.chain import chain as rag_timescale_hybrid_search_chain\n\nadd_routes(app, rag_timescale_hybrid_search_chain, path=\"/rag-timescale-hybrid-search\")\n\n\n(Optional) Let's now configure LangSmith. LangSmith will help us trace, monitor and debug LangChain applications. LangSmith is currently in private beta, you can sign up here. If you don't have access, you can skip this section\n\nexport LANGCHAIN_TRACING_V2=true\nexport LANGCHAIN_API_KEY=<your-api-key>\nexport LANGCHAIN_PROJECT=<your-project>  # if not specified, defaults to \"default\"\n\n\nIf you are inside this directory, then you can spin up a LangServe instance directly by:\n\nlangchain serve\n\n\nThis will start the FastAPI app with a server is running locally at http://localhost:8000\n\nWe can see all templates at http://127.0.0.1:8000/docs We can access the playground at http://127.0.0.1:8000/rag-timescale-hybrid-search/playground\n\nWe can access the template from code with:\n\nfrom langserve.client import RemoteRunnable\n\nrunnable = RemoteRunnable(\"http://localhost:8000/rag-timescale-hybrid-search\")\n\nLoading your own dataset‚Äã\n\nTo load your own dataset you will have to modify the code in the DATASET SPECIFIC CODE section of chain.py. This code defines the name of the collection, how to load the data, and the human-language description of both the contents of the collection and all of the metadata. The human-language descriptions are used by the self-query retriever to help the LLM convert the question into filters on the metadata when searching the data in Timescale-vector.\n\nPrevious\nrag-timescale-conversation\nNext\nrag-vectara-multiquery"
}