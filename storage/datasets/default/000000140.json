{
	"title": "Memory | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/modules/memory/",
	"html": "ModulesMoreMemory\nMemory\n\nMost LLM applications have a conversational interface. An essential component of a conversation is being able to refer to information introduced earlier in the conversation. At bare minimum, a conversational system should be able to access some window of past messages directly. A more complex system will need to have a world model that it is constantly updating, which allows it to do things like maintain information about entities and their relationships.\n\nWe call this ability to store information about past interactions \"memory\". LangChain provides a lot of utilities for adding memory to a system. These utilities can be used by themselves or incorporated seamlessly into a chain.\n\nA memory system needs to support two basic actions: reading and writing. Recall that every chain defines some core execution logic that expects certain inputs. Some of these inputs come directly from the user, but some of these inputs can come from memory. A chain will interact with its memory system twice in a given run.\n\nAFTER receiving the initial user inputs but BEFORE executing the core logic, a chain will READ from its memory system and augment the user inputs.\nAFTER executing the core logic but BEFORE returning the answer, a chain will WRITE the inputs and outputs of the current run to memory, so that they can be referred to in future runs.\n\nBuilding memory into a system‚Äã\n\nThe two core design decisions in any memory system are:\n\nHow state is stored\nHow state is queried\nStoring: List of chat messages‚Äã\n\nUnderlying any memory is a history of all chat interactions. Even if these are not all used directly, they need to be stored in some form. One of the key parts of the LangChain memory module is a series of integrations for storing these chat messages, from in-memory lists to persistent databases.\n\nChat message storage: How to work with Chat Messages, and the various integrations offered.\nQuerying: Data structures and algorithms on top of chat messages‚Äã\n\nKeeping a list of chat messages is fairly straight-forward. What is less straight-forward are the data structures and algorithms built on top of chat messages that serve a view of those messages that is most useful.\n\nA very simply memory system might just return the most recent messages each run. A slightly more complex memory system might return a succinct summary of the past K messages. An even more sophisticated system might extract entities from stored messages and only return information about entities referenced in the current run.\n\nEach application can have different requirements for how memory is queried. The memory module should make it easy to both get started with simple memory systems and write your own custom systems if needed.\n\nMemory types: The various data structures and algorithms that make up the memory types LangChain supports\nGet started‚Äã\n\nLet's take a look at what Memory actually looks like in LangChain. Here we'll cover the basics of interacting with an arbitrary memory class.\n\nLet's take a look at how to use ConversationBufferMemory in chains. ConversationBufferMemory is an extremely simple form of memory that just keeps a list of chat messages in a buffer and passes those into the prompt template.\n\nfrom langchain.memory import ConversationBufferMemory\n\nmemory = ConversationBufferMemory()\nmemory.chat_memory.add_user_message(\"hi!\")\nmemory.chat_memory.add_ai_message(\"what's up?\")\n\n\nWhen using memory in a chain, there are a few key concepts to understand. Note that here we cover general concepts that are useful for most types of memory. Each individual memory type may very well have its own parameters and concepts that are necessary to understand.\n\nWhat variables get returned from memory‚Äã\n\nBefore going into the chain, various variables are read from memory. These have specific names which need to align with the variables the chain expects. You can see what these variables are by calling memory.load_memory_variables({}). Note that the empty dictionary that we pass in is just a placeholder for real variables. If the memory type you are using is dependent upon the input variables, you may need to pass some in.\n\nmemory.load_memory_variables({})\n\n    {'history': \"Human: hi!\\nAI: what's up?\"}\n\n\nIn this case, you can see that load_memory_variables returns a single key, history. This means that your chain (and likely your prompt) should expect an input named history. You can usually control this variable through parameters on the memory class. For example, if you want the memory variables to be returned in the key chat_history you can do:\n\nmemory = ConversationBufferMemory(memory_key=\"chat_history\")\nmemory.chat_memory.add_user_message(\"hi!\")\nmemory.chat_memory.add_ai_message(\"what's up?\")\n\n    {'chat_history': \"Human: hi!\\nAI: what's up?\"}\n\n\nThe parameter name to control these keys may vary per memory type, but it's important to understand that (1) this is controllable, and (2) how to control it.\n\nWhether memory is a string or a list of messages‚Äã\n\nOne of the most common types of memory involves returning a list of chat messages. These can either be returned as a single string, all concatenated together (useful when they will be passed into LLMs) or a list of ChatMessages (useful when passed into ChatModels).\n\nBy default, they are returned as a single string. In order to return as a list of messages, you can set return_messages=True\n\nmemory = ConversationBufferMemory(return_messages=True)\nmemory.chat_memory.add_user_message(\"hi!\")\nmemory.chat_memory.add_ai_message(\"what's up?\")\n\n    {'history': [HumanMessage(content='hi!', additional_kwargs={}, example=False),\n  AIMessage(content='what's up?', additional_kwargs={}, example=False)]}\n\nWhat keys are saved to memory‚Äã\n\nOften times chains take in or return multiple input/output keys. In these cases, how can we know which keys we want to save to the chat message history? This is generally controllable by input_key and output_key parameters on the memory types. These default to None - and if there is only one input/output key it is known to just use that. However, if there are multiple input/output keys then you MUST specify the name of which one to use.\n\nEnd to end example‚Äã\n\nFinally, let's take a look at using this in a chain. We'll use an LLMChain, and show working with both an LLM and a ChatModel.\n\nUsing an LLM‚Äã\nfrom langchain.llms import OpenAI\nfrom langchain.prompts import PromptTemplate\nfrom langchain.chains import LLMChain\nfrom langchain.memory import ConversationBufferMemory\n\n\nllm = OpenAI(temperature=0)\n# Notice that \"chat_history\" is present in the prompt template\ntemplate = \"\"\"You are a nice chatbot having a conversation with a human.\n\nPrevious conversation:\n{chat_history}\n\nNew human question: {question}\nResponse:\"\"\"\nprompt = PromptTemplate.from_template(template)\n# Notice that we need to align the `memory_key`\nmemory = ConversationBufferMemory(memory_key=\"chat_history\")\nconversation = LLMChain(\n    llm=llm,\n    prompt=prompt,\n    verbose=True,\n    memory=memory\n)\n\n# Notice that we just pass in the `question` variables - `chat_history` gets populated by memory\nconversation({\"question\": \"hi\"})\n\nUsing a ChatModel‚Äã\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.prompts import (\n    ChatPromptTemplate,\n    MessagesPlaceholder,\n    SystemMessagePromptTemplate,\n    HumanMessagePromptTemplate,\n)\nfrom langchain.chains import LLMChain\nfrom langchain.memory import ConversationBufferMemory\n\n\nllm = ChatOpenAI()\nprompt = ChatPromptTemplate(\n    messages=[\n        SystemMessagePromptTemplate.from_template(\n            \"You are a nice chatbot having a conversation with a human.\"\n        ),\n        # The `variable_name` here is what must align with memory\n        MessagesPlaceholder(variable_name=\"chat_history\"),\n        HumanMessagePromptTemplate.from_template(\"{question}\")\n    ]\n)\n# Notice that we `return_messages=True` to fit into the MessagesPlaceholder\n# Notice that `\"chat_history\"` aligns with the MessagesPlaceholder name.\nmemory = ConversationBufferMemory(memory_key=\"chat_history\", return_messages=True)\nconversation = LLMChain(\n    llm=llm,\n    prompt=prompt,\n    verbose=True,\n    memory=memory\n)\n\n# Notice that we just pass in the `question` variables - `chat_history` gets populated by memory\nconversation({\"question\": \"hi\"})\n\nNext steps‚Äã\n\nAnd that's it for getting started! Please see the other sections for walkthroughs of more advanced topics, like custom memory, multiple memories, and more.\n\nPrevious\nChains\nNext\nChat Messages"
}