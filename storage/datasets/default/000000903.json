{
	"title": "Postgres Embedding | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/integrations/vectorstores/pgembedding",
	"html": "ComponentsVector storesPostgres Embedding\nPostgres Embedding\n\nPostgres Embedding is an open-source vector similarity search for Postgres that uses Hierarchical Navigable Small Worlds (HNSW) for approximate nearest neighbor search.\n\nIt supports:\n\nexact and approximate nearest neighbor search using HNSW\nL2 distance\n\nThis notebook shows how to use the Postgres vector database (PGEmbedding).\n\nThe PGEmbedding integration creates the pg_embedding extension for you, but you run the following Postgres query to add it:\n\nCREATE EXTENSION embedding;\n\n# Pip install necessary package\npip install openai\npip install psycopg2-binary\npip install tiktoken\n\n\nAdd the OpenAI API Key to the environment variables to use OpenAIEmbeddings.\n\nimport getpass\nimport os\n\nos.environ[\"OPENAI_API_KEY\"] = getpass.getpass(\"OpenAI API Key:\")\n\n    OpenAI API Key:¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑\n\n## Loading Environment Variables\nfrom typing import List, Tuple\n\nfrom langchain.docstore.document import Document\nfrom langchain.document_loaders import TextLoader\nfrom langchain.embeddings.openai import OpenAIEmbeddings\nfrom langchain.text_splitter import CharacterTextSplitter\nfrom langchain.vectorstores import PGEmbedding\n\nos.environ[\"DATABASE_URL\"] = getpass.getpass(\"Database Url:\")\n\n    Database Url:¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑\n\nloader = TextLoader(\"state_of_the_union.txt\")\ndocuments = loader.load()\ntext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)\ndocs = text_splitter.split_documents(documents)\n\nembeddings = OpenAIEmbeddings()\nconnection_string = os.environ.get(\"DATABASE_URL\")\ncollection_name = \"state_of_the_union\"\n\ndb = PGEmbedding.from_documents(\n    embedding=embeddings,\n    documents=docs,\n    collection_name=collection_name,\n    connection_string=connection_string,\n)\n\nquery = \"What did the president say about Ketanji Brown Jackson\"\ndocs_with_score: List[Tuple[Document, float]] = db.similarity_search_with_score(query)\n\nfor doc, score in docs_with_score:\n    print(\"-\" * 80)\n    print(\"Score: \", score)\n    print(doc.page_content)\n    print(\"-\" * 80)\n\nWorking with vectorstore in Postgres‚Äã\nUploading a vectorstore in PG‚Äã\ndb = PGEmbedding.from_documents(\n    embedding=embeddings,\n    documents=docs,\n    collection_name=collection_name,\n    connection_string=connection_string,\n    pre_delete_collection=False,\n)\n\nCreate HNSW Index‚Äã\n\nBy default, the extension performs a sequential scan search, with 100% recall. You might consider creating an HNSW index for approximate nearest neighbor (ANN) search to speed up similarity_search_with_score execution time. To create the HNSW index on your vector column, use a create_hnsw_index function:\n\nPGEmbedding.create_hnsw_index(\n    max_elements=10000, dims=1536, m=8, ef_construction=16, ef_search=16\n)\n\n\nThe function above is equivalent to running the below SQL query:\n\nCREATE INDEX ON vectors USING hnsw(vec) WITH (maxelements=10000, dims=1536, m=3, efconstruction=16, efsearch=16);\n\n\nThe HNSW index options used in the statement above include:\n\nmaxelements: Defines the maximum number of elements indexed. This is a required parameter. The example shown above has a value of 3. A real-world example would have a much large value, such as 1000000. An \"element\" refers to a data point (a vector) in the dataset, which is represented as a node in the HNSW graph. Typically, you would set this option to a value able to accommodate the number of rows in your in your dataset.\n\ndims: Defines the number of dimensions in your vector data. This is a required parameter. A small value is used in the example above. If you are storing data generated using OpenAI's text-embedding-ada-002 model, which supports 1536 dimensions, you would define a value of 1536, for example.\n\nm: Defines the maximum number of bi-directional links (also referred to as \"edges\") created for each node during graph construction. The following additional index options are supported:\n\nefConstruction: Defines the number of nearest neighbors considered during index construction. The default value is 32.\n\nefsearch: Defines the number of nearest neighbors considered during index search. The default value is 32. For information about how you can configure these options to influence the HNSW algorithm, refer to Tuning the HNSW algorithm.\n\nRetrieving a vectorstore in PG‚Äã\nstore = PGEmbedding(\n    connection_string=connection_string,\n    embedding_function=embeddings,\n    collection_name=collection_name,\n)\n\nretriever = store.as_retriever()\n\nretriever\n\n    VectorStoreRetriever(vectorstore=<langchain.vectorstores.pghnsw.HNSWVectoreStore object at 0x121d3c8b0>, search_type='similarity', search_kwargs={})\n\ndb1 = PGEmbedding.from_existing_index(\n    embedding=embeddings,\n    collection_name=collection_name,\n    pre_delete_collection=False,\n    connection_string=connection_string,\n)\n\nquery = \"What did the president say about Ketanji Brown Jackson\"\ndocs_with_score: List[Tuple[Document, float]] = db1.similarity_search_with_score(query)\n\nfor doc, score in docs_with_score:\n    print(\"-\" * 80)\n    print(\"Score: \", score)\n    print(doc.page_content)\n    print(\"-\" * 80)\n\nPrevious\nOpenSearch\nNext\nPGVecto.rs"
}