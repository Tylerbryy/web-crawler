{
	"title": "John Snow Labs | 🦜️🔗 Langchain",
	"url": "https://python.langchain.com/docs/integrations/text_embedding/johnsnowlabs_embedding",
	"html": "ComponentsText embedding modelsJohn Snow Labs\nJohn Snow Labs\n\nJohn Snow Labs NLP & LLM ecosystem includes software libraries for state-of-the-art AI at scale, Responsible AI, No-Code AI, and access to over 20,000 models for Healthcare, Legal, Finance, etc.\n\nModels are loaded with nlp.load and spark session is started >with nlp.start() under the hood. For all 24.000+ models, see the John Snow Labs Model Models Hub\n\nSetting up​\npip install johnsnowlabs\n\n# If you have a enterprise license, you can run this to install enterprise features\n# from johnsnowlabs import nlp\n# nlp.install()\n\nExample​\nfrom langchain.embeddings.johnsnowlabs import JohnSnowLabsEmbeddings\n\n\nInitialize Johnsnowlabs Embeddings and Spark Session\n\nembedder = JohnSnowLabsEmbeddings(\"en.embed_sentence.biobert.clinical_base_cased\")\n\n\nDefine some example texts . These could be any documents that you want to analyze - for example, news articles, social media posts, or product reviews.\n\ntexts = [\"Cancer is caused by smoking\", \"Antibiotics aren't painkiller\"]\n\n\nGenerate and print embeddings for the texts . The JohnSnowLabsEmbeddings class generates an embedding for each document, which is a numerical representation of the document's content. These embeddings can be used for various natural language processing tasks, such as document similarity comparison or text classification.\n\nembeddings = embedder.embed_documents(texts)\nfor i, embedding in enumerate(embeddings):\n    print(f\"Embedding for document {i+1}: {embedding}\")\n\n\nGenerate and print an embedding for a single piece of text. You can also generate an embedding for a single piece of text, such as a search query. This can be useful for tasks like information retrieval, where you want to find documents that are similar to a given query.\n\nquery = \"Cancer is caused by smoking\"\nquery_embedding = embedder.embed_query(query)\nprint(f\"Embedding for query: {query_embedding}\")\n\nPrevious\nJina\nNext\nLlama-cpp"
}