{
	"title": "PowerBI Dataset | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/integrations/toolkits/powerbi",
	"html": "ComponentsAgents and toolkitsPowerBI Dataset\nPowerBI Dataset\n\nThis notebook showcases an agent interacting with a Power BI Dataset. The agent is answering more general questions about a dataset, as well as recover from errors.\n\nNote that, as this agent is in active development, all answers might not be correct. It runs against the executequery endpoint, which does not allow deletes.\n\nNotes:‚Äã\nIt relies on authentication with the azure.identity package, which can be installed with pip install azure-identity. Alternatively you can create the powerbi dataset with a token as a string without supplying the credentials.\nYou can also supply a username to impersonate for use with datasets that have RLS enabled.\nThe toolkit uses a LLM to create the query from the question, the agent uses the LLM for the overall execution.\nTesting was done mostly with a text-davinci-003 model, codex models did not seem to perform ver well.\nInitialization‚Äã\nfrom azure.identity import DefaultAzureCredential\nfrom langchain.agents.agent_toolkits import PowerBIToolkit, create_pbi_agent\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.utilities.powerbi import PowerBIDataset\n\nfast_llm = ChatOpenAI(\n    temperature=0.5, max_tokens=1000, model_name=\"gpt-3.5-turbo\", verbose=True\n)\nsmart_llm = ChatOpenAI(temperature=0, max_tokens=100, model_name=\"gpt-4\", verbose=True)\n\ntoolkit = PowerBIToolkit(\n    powerbi=PowerBIDataset(\n        dataset_id=\"<dataset_id>\",\n        table_names=[\"table1\", \"table2\"],\n        credential=DefaultAzureCredential(),\n    ),\n    llm=smart_llm,\n)\n\nagent_executor = create_pbi_agent(\n    llm=fast_llm,\n    toolkit=toolkit,\n    verbose=True,\n)\n\nExample: describing a table‚Äã\nagent_executor.run(\"Describe table1\")\n\nExample: simple query on a table‚Äã\n\nIn this example, the agent actually figures out the correct query to get a row count of the table.\n\nagent_executor.run(\"How many records are in table1?\")\n\nExample: running queries‚Äã\nagent_executor.run(\"How many records are there by dimension1 in table2?\")\n\nagent_executor.run(\"What unique values are there for dimensions2 in table2\")\n\nExample: add your own few-shot prompts‚Äã\n# fictional example\nfew_shots = \"\"\"\nQuestion: How many rows are in the table revenue?\nDAX: EVALUATE ROW(\"Number of rows\", COUNTROWS(revenue_details))\n----\nQuestion: How many rows are in the table revenue where year is not empty?\nDAX: EVALUATE ROW(\"Number of rows\", COUNTROWS(FILTER(revenue_details, revenue_details[year] <> \"\")))\n----\nQuestion: What was the average of value in revenue in dollars?\nDAX: EVALUATE ROW(\"Average\", AVERAGE(revenue_details[dollar_value]))\n----\n\"\"\"\ntoolkit = PowerBIToolkit(\n    powerbi=PowerBIDataset(\n        dataset_id=\"<dataset_id>\",\n        table_names=[\"table1\", \"table2\"],\n        credential=DefaultAzureCredential(),\n    ),\n    llm=smart_llm,\n    examples=few_shots,\n)\nagent_executor = create_pbi_agent(\n    llm=fast_llm,\n    toolkit=toolkit,\n    verbose=True,\n)\n\nagent_executor.run(\"What was the maximum of value in revenue in dollars in 2022?\")\n\nPrevious\nPlayWright Browser\nNext\nPython"
}