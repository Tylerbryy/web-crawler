{
	"title": "How to | 🦜️🔗 Langchain",
	"url": "https://python.langchain.com/docs/expression_language/how_to/",
	"html": "LangChain Expression LanguageHow to\nHow to\n📄️ Bind runtime args\n\nSometimes we want to invoke a Runnable within a Runnable sequence with constant arguments that are not part of the output of the preceding Runnable in the sequence, and which are not part of the user input. We can use Runnable.bind() to easily pass these arguments in.\n\n📄️ Configure chain internals at runtime\n\nOftentimes you may want to experiment with, or even expose to the end user, multiple different ways of doing things.\n\n📄️ Add fallbacks\n\nThere are many possible points of failure in an LLM application, whether that be issues with LLM API's, poor model outputs, issues with other integrations, etc. Fallbacks help you gracefully handle and isolate these issues.\n\n📄️ Run custom functions\n\nYou can use arbitrary functions in the pipeline\n\n📄️ Stream custom generator functions\n\nYou can use generator functions (ie. functions that use the yield keyword, and behave like iterators) in a LCEL pipeline.\n\n📄️ Parallelize steps\n\nRunnableParallel (aka. RunnableMap) makes it easy to execute multiple Runnables in parallel, and to return the output of these Runnables as a map.\n\n📄️ Add message history (memory)\n\nThe RunnableWithMessageHistory let's us add message history to certain types of chains.\n\n📄️ Dynamically route logic based on input\n\nThis notebook covers how to do routing in the LangChain Expression Language.\n\nPrevious\nInterface\nNext\nBind runtime args"
}