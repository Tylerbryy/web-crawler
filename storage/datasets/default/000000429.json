{
	"title": "Vector store-backed retriever | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/modules/data_connection/retrievers/vectorstore",
	"html": "ModulesRetrievalRetrieversVector store-backed retriever\nVector store-backed retriever\n\nA vector store retriever is a retriever that uses a vector store to retrieve documents. It is a lightweight wrapper around the vector store class to make it conform to the retriever interface. It uses the search methods implemented by a vector store, like similarity search and MMR, to query the texts in the vector store.\n\nOnce you construct a vector store, it's very easy to construct a retriever. Let's walk through an example.\n\nfrom langchain.document_loaders import TextLoader\nloader = TextLoader('../../../state_of_the_union.txt')\n\nfrom langchain.text_splitter import CharacterTextSplitter\nfrom langchain.vectorstores import FAISS\nfrom langchain.embeddings import OpenAIEmbeddings\n\ndocuments = loader.load()\ntext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)\ntexts = text_splitter.split_documents(documents)\nembeddings = OpenAIEmbeddings()\ndb = FAISS.from_documents(texts, embeddings)\n\n    Exiting: Cleaning up .chroma directory\n\nretriever = db.as_retriever()\n\ndocs = retriever.get_relevant_documents(\"what did he say about ketanji brown jackson\")\n\nMaximum marginal relevance retrieval‚Äã\n\nBy default, the vector store retriever uses similarity search. If the underlying vector store supports maximum marginal relevance search, you can specify that as the search type.\n\nretriever = db.as_retriever(search_type=\"mmr\")\n\ndocs = retriever.get_relevant_documents(\"what did he say about ketanji brown jackson\")\n\nSimilarity score threshold retrieval‚Äã\n\nYou can also set a retrieval method that sets a similarity score threshold and only returns documents with a score above that threshold.\n\nretriever = db.as_retriever(search_type=\"similarity_score_threshold\", search_kwargs={\"score_threshold\": .5})\n\ndocs = retriever.get_relevant_documents(\"what did he say about ketanji brown jackson\")\n\nSpecifying top k‚Äã\n\nYou can also specify search kwargs like k to use when doing retrieval.\n\nretriever = db.as_retriever(search_kwargs={\"k\": 1})\n\ndocs = retriever.get_relevant_documents(\"what did he say about ketanji brown jackson\")\n\nlen(docs)\n\n    1\n\nPrevious\nTime-weighted vector store retriever\nNext\nWebResearchRetriever"
}