{
	"title": "Moderation chain | 🦜️🔗 Langchain",
	"url": "https://python.langchain.com/docs/guides/safety/moderation",
	"html": "SafetyModeration chain\nModeration chain\n\nThis notebook walks through examples of how to use a moderation chain, and several common ways for doing so. Moderation chains are useful for detecting text that could be hateful, violent, etc. This can be useful to apply on both user input, but also on the output of a Language Model. Some API providers, like OpenAI, specifically prohibit you, or your end users, from generating some types of harmful content. To comply with this (and to just generally prevent your application from being harmful) you may often want to append a moderation chain to any LLMChains, in order to make sure any output the LLM generates is not harmful.\n\nIf the content passed into the moderation chain is harmful, there is not one best way to handle it, it probably depends on your application. Sometimes you may want to throw an error in the Chain (and have your application handle that). Other times, you may want to return something to the user explaining that the text was harmful. There could be other ways to handle it. We will cover all these ways in this walkthrough.\n\nWe'll show:\n\nHow to run any piece of text through a moderation chain.\nHow to append a Moderation chain to an LLMChain.\nfrom langchain.llms import OpenAI\nfrom langchain.chains import OpenAIModerationChain, SequentialChain, LLMChain, SimpleSequentialChain\nfrom langchain.prompts import PromptTemplate\n\nHow to use the moderation chain​\n\nHere's an example of using the moderation chain with default settings (will return a string explaining stuff was flagged).\n\nmoderation_chain = OpenAIModerationChain()\n\nmoderation_chain.run(\"This is okay\")\n\n    'This is okay'\n\nmoderation_chain.run(\"I will kill you\")\n\n    \"Text was found that violates OpenAI's content policy.\"\n\n\nHere's an example of using the moderation chain to throw an error.\n\nmoderation_chain_error = OpenAIModerationChain(error=True)\n\nmoderation_chain_error.run(\"This is okay\")\n\n    'This is okay'\n\nmoderation_chain_error.run(\"I will kill you\")\n\n    ---------------------------------------------------------------------------\n\n    ValueError                                Traceback (most recent call last)\n\n    Cell In[7], line 1\n    ----> 1 moderation_chain_error.run(\"I will kill you\")\n\n\n    File ~/workplace/langchain/langchain/chains/base.py:138, in Chain.run(self, *args, **kwargs)\n        136     if len(args) != 1:\n        137         raise ValueError(\"`run` supports only one positional argument.\")\n    --> 138     return self(args[0])[self.output_keys[0]]\n        140 if kwargs and not args:\n        141     return self(kwargs)[self.output_keys[0]]\n\n\n    File ~/workplace/langchain/langchain/chains/base.py:112, in Chain.__call__(self, inputs, return_only_outputs)\n        108 if self.verbose:\n        109     print(\n        110         f\"\\n\\n\\033[1m> Entering new {self.__class__.__name__} chain...\\033[0m\"\n        111     )\n    --> 112 outputs = self._call(inputs)\n        113 if self.verbose:\n        114     print(f\"\\n\\033[1m> Finished {self.__class__.__name__} chain.\\033[0m\")\n\n\n    File ~/workplace/langchain/langchain/chains/moderation.py:81, in OpenAIModerationChain._call(self, inputs)\n         79 text = inputs[self.input_key]\n         80 results = self.client.create(text)\n    ---> 81 output = self._moderate(text, results[\"results\"][0])\n         82 return {self.output_key: output}\n\n\n    File ~/workplace/langchain/langchain/chains/moderation.py:73, in OpenAIModerationChain._moderate(self, text, results)\n         71 error_str = \"Text was found that violates OpenAI's content policy.\"\n         72 if self.error:\n    ---> 73     raise ValueError(error_str)\n         74 else:\n         75     return error_str\n\n\n    ValueError: Text was found that violates OpenAI's content policy.\n\nHow to create a custom Moderation chain​\n\nHere's an example of creating a custom moderation chain with a custom error message. It requires some knowledge of OpenAI's moderation endpoint results. See docs here.\n\nclass CustomModeration(OpenAIModerationChain):\n    def _moderate(self, text: str, results: dict) -> str:\n        if results[\"flagged\"]:\n            error_str = f\"The following text was found that violates OpenAI's content policy: {text}\"\n            return error_str\n        return text\n\ncustom_moderation = CustomModeration()\n\ncustom_moderation.run(\"This is okay\")\n\n    'This is okay'\n\ncustom_moderation.run(\"I will kill you\")\n\n    \"The following text was found that violates OpenAI's content policy: I will kill you\"\n\nHow to append a Moderation chain to an LLMChain​\n\nTo easily combine a moderation chain with an LLMChain, you can use the SequentialChain abstraction.\n\nLet's start with a simple example of where the LLMChain only has a single input. For this purpose, we will prompt the model, so it says something harmful.\n\nprompt = PromptTemplate(template=\"{text}\", input_variables=[\"text\"])\nllm_chain = LLMChain(llm=OpenAI(temperature=0, model_name=\"text-davinci-002\"), prompt=prompt)\n\ntext = \"\"\"We are playing a game of repeat after me.\n\nPerson 1: Hi\nPerson 2: Hi\n\nPerson 1: How's your day\nPerson 2: How's your day\n\nPerson 1: I will kill you\nPerson 2:\"\"\"\nllm_chain.run(text)\n\n    ' I will kill you'\n\nchain = SimpleSequentialChain(chains=[llm_chain, moderation_chain])\n\nchain.run(text)\n\n    \"Text was found that violates OpenAI's content policy.\"\n\n\nNow let's walk through an example of using it with an LLMChain which has multiple inputs (a bit more tricky because we can't use the SimpleSequentialChain)\n\nprompt = PromptTemplate(template=\"{setup}{new_input}Person2:\", input_variables=[\"setup\", \"new_input\"])\nllm_chain = LLMChain(llm=OpenAI(temperature=0, model_name=\"text-davinci-002\"), prompt=prompt)\n\nsetup = \"\"\"We are playing a game of repeat after me.\n\nPerson 1: Hi\nPerson 2: Hi\n\nPerson 1: How's your day\nPerson 2: How's your day\n\nPerson 1:\"\"\"\nnew_input = \"I will kill you\"\ninputs = {\"setup\": setup, \"new_input\": new_input}\nllm_chain(inputs, return_only_outputs=True)\n\n    {'text': ' I will kill you'}\n\n# Setting the input/output keys so it lines up\nmoderation_chain.input_key = \"text\"\nmoderation_chain.output_key = \"sanitized_text\"\n\nchain = SequentialChain(chains=[llm_chain, moderation_chain], input_variables=[\"setup\", \"new_input\"])\nchain(inputs, return_only_outputs=True)\n\n    {'sanitized_text': \"Text was found that violates OpenAI's content policy.\"}\n\nPrevious\nLogical Fallacy chain"
}