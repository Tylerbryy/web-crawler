{
	"title": "Discord | 🦜️🔗 Langchain",
	"url": "https://python.langchain.com/docs/integrations/chat_loaders/discord",
	"html": "ComponentsChat loadersDiscord\nDiscord\n\nThis notebook shows how to create your own chat loader that works on copy-pasted messages (from dms) to a list of LangChain messages.\n\nThe process has four steps:\n\nCreate the chat .txt file by copying chats from the Discord app and pasting them in a file on your local computer\nCopy the chat loader definition from below to a local file.\nInitialize the DiscordChatLoader with the file path pointed to the text file.\nCall loader.load() (or loader.lazy_load()) to perform the conversion.\n1. Create message dump​\n\nCurrently (2023/08/23) this loader only supports .txt files in the format generated by copying messages in the app to your clipboard and pasting in a file. Below is an example.\n\ndiscord_chats.txt\ntalkingtower — 08/15/2023 11:10 AM\nLove music! Do you like jazz?\nreporterbob — 08/15/2023 9:27 PM\nYes! Jazz is fantastic. Ever heard this one?\nWebsite\nListen to classic jazz track...\n\ntalkingtower — Yesterday at 5:03 AM\nIndeed! Great choice. 🎷\nreporterbob — Yesterday at 5:23 AM\nThanks! How about some virtual sightseeing?\nWebsite\nVirtual tour of famous landmarks...\n\ntalkingtower — Today at 2:38 PM\nSounds fun! Let's explore.\nreporterbob — Today at 2:56 PM\nEnjoy the tour! See you around.\ntalkingtower — Today at 3:00 PM\nThank you! Goodbye! 👋\nreporterbob — Today at 3:02 PM\nFarewell! Happy exploring.\n\n2. Define chat loader​\nimport logging\nimport re\nfrom typing import Iterator, List\n\nfrom langchain.chat_loaders import base as chat_loaders\nfrom langchain.schema import BaseMessage, HumanMessage\n\nlogger = logging.getLogger()\n\n\nclass DiscordChatLoader(chat_loaders.BaseChatLoader):\n    def __init__(self, path: str):\n        \"\"\"\n        Initialize the Discord chat loader.\n\n        Args:\n            path: Path to the exported Discord chat text file.\n        \"\"\"\n        self.path = path\n        self._message_line_regex = re.compile(\n            r\"(.+?) — (\\w{3,9} \\d{1,2}(?:st|nd|rd|th)?(?:, \\d{4})? \\d{1,2}:\\d{2} (?:AM|PM)|Today at \\d{1,2}:\\d{2} (?:AM|PM)|Yesterday at \\d{1,2}:\\d{2} (?:AM|PM))\",  # noqa\n            flags=re.DOTALL,\n        )\n\n    def _load_single_chat_session_from_txt(\n        self, file_path: str\n    ) -> chat_loaders.ChatSession:\n        \"\"\"\n        Load a single chat session from a text file.\n\n        Args:\n            file_path: Path to the text file containing the chat messages.\n\n        Returns:\n            A `ChatSession` object containing the loaded chat messages.\n        \"\"\"\n        with open(file_path, \"r\", encoding=\"utf-8\") as file:\n            lines = file.readlines()\n\n        results: List[BaseMessage] = []\n        current_sender = None\n        current_timestamp = None\n        current_content = []\n        for line in lines:\n            if re.match(\n                r\".+? — (\\d{2}/\\d{2}/\\d{4} \\d{1,2}:\\d{2} (?:AM|PM)|Today at \\d{1,2}:\\d{2} (?:AM|PM)|Yesterday at \\d{1,2}:\\d{2} (?:AM|PM))\",  # noqa\n                line,\n            ):\n                if current_sender and current_content:\n                    results.append(\n                        HumanMessage(\n                            content=\"\".join(current_content).strip(),\n                            additional_kwargs={\n                                \"sender\": current_sender,\n                                \"events\": [{\"message_time\": current_timestamp}],\n                            },\n                        )\n                    )\n                current_sender, current_timestamp = line.split(\" — \")[:2]\n                current_content = [\n                    line[len(current_sender) + len(current_timestamp) + 4 :].strip()\n                ]\n            elif re.match(r\"\\[\\d{1,2}:\\d{2} (?:AM|PM)\\]\", line.strip()):\n                results.append(\n                    HumanMessage(\n                        content=\"\".join(current_content).strip(),\n                        additional_kwargs={\n                            \"sender\": current_sender,\n                            \"events\": [{\"message_time\": current_timestamp}],\n                        },\n                    )\n                )\n                current_timestamp = line.strip()[1:-1]\n                current_content = []\n            else:\n                current_content.append(\"\\n\" + line.strip())\n\n        if current_sender and current_content:\n            results.append(\n                HumanMessage(\n                    content=\"\".join(current_content).strip(),\n                    additional_kwargs={\n                        \"sender\": current_sender,\n                        \"events\": [{\"message_time\": current_timestamp}],\n                    },\n                )\n            )\n\n        return chat_loaders.ChatSession(messages=results)\n\n    def lazy_load(self) -> Iterator[chat_loaders.ChatSession]:\n        \"\"\"\n        Lazy load the messages from the chat file and yield them in the required format.\n\n        Yields:\n            A `ChatSession` object containing the loaded chat messages.\n        \"\"\"\n        yield self._load_single_chat_session_from_txt(self.path)\n\n2. Create loader​\n\nWe will point to the file we just wrote to disk.\n\nloader = DiscordChatLoader(\n    path=\"./discord_chats.txt\",\n)\n\n3. Load Messages​\n\nAssuming the format is correct, the loader will convert the chats to langchain messages.\n\nfrom typing import List\n\nfrom langchain.chat_loaders.base import ChatSession\nfrom langchain.chat_loaders.utils import (\n    map_ai_messages,\n    merge_chat_runs,\n)\n\nraw_messages = loader.lazy_load()\n# Merge consecutive messages from the same sender into a single message\nmerged_messages = merge_chat_runs(raw_messages)\n# Convert messages from \"talkingtower\" to AI messages\nmessages: List[ChatSession] = list(\n    map_ai_messages(merged_messages, sender=\"talkingtower\")\n)\n\nmessages\n\n    [{'messages': [AIMessage(content='Love music! Do you like jazz?', additional_kwargs={'sender': 'talkingtower', 'events': [{'message_time': '08/15/2023 11:10 AM\\n'}]}, example=False),\n       HumanMessage(content='Yes! Jazz is fantastic. Ever heard this one?\\nWebsite\\nListen to classic jazz track...', additional_kwargs={'sender': 'reporterbob', 'events': [{'message_time': '08/15/2023 9:27 PM\\n'}]}, example=False),\n       AIMessage(content='Indeed! Great choice. 🎷', additional_kwargs={'sender': 'talkingtower', 'events': [{'message_time': 'Yesterday at 5:03 AM\\n'}]}, example=False),\n       HumanMessage(content='Thanks! How about some virtual sightseeing?\\nWebsite\\nVirtual tour of famous landmarks...', additional_kwargs={'sender': 'reporterbob', 'events': [{'message_time': 'Yesterday at 5:23 AM\\n'}]}, example=False),\n       AIMessage(content=\"Sounds fun! Let's explore.\", additional_kwargs={'sender': 'talkingtower', 'events': [{'message_time': 'Today at 2:38 PM\\n'}]}, example=False),\n       HumanMessage(content='Enjoy the tour! See you around.', additional_kwargs={'sender': 'reporterbob', 'events': [{'message_time': 'Today at 2:56 PM\\n'}]}, example=False),\n       AIMessage(content='Thank you! Goodbye! 👋', additional_kwargs={'sender': 'talkingtower', 'events': [{'message_time': 'Today at 3:00 PM\\n'}]}, example=False),\n       HumanMessage(content='Farewell! Happy exploring.', additional_kwargs={'sender': 'reporterbob', 'events': [{'message_time': 'Today at 3:02 PM\\n'}]}, example=False)]}]\n\nNext Steps​\n\nYou can then use these messages how you see fit, such as fine-tuning a model, few-shot example selection, or directly make predictions for the next message\n\nfrom langchain.chat_models import ChatOpenAI\n\nllm = ChatOpenAI()\n\nfor chunk in llm.stream(messages[0][\"messages\"]):\n    print(chunk.content, end=\"\", flush=True)\n\n    Thank you! Have a wonderful day! 🌟\n\nPrevious\nChat loaders\nNext\nFacebook Messenger"
}