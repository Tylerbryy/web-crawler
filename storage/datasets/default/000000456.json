{
	"title": "Milvus | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/integrations/retrievers/self_query/milvus_self_query",
	"html": "ComponentsRetrieversSelf-querying retrieverMilvus\nMilvus\n\nMilvus is a database that stores, indexes, and manages massive embedding vectors generated by deep neural networks and other machine learning (ML) models.\n\nIn the walkthrough, we'll demo the SelfQueryRetriever with a Milvus vector store.\n\nCreating a Milvus vectorstore‚Äã\n\nFirst we'll want to create a Milvus VectorStore and seed it with some data. We've created a small demo set of documents that contain summaries of movies.\n\nI have used the cloud version of Milvus, thus I need uri and token as well.\n\nNOTE: The self-query retriever requires you to have lark installed (pip install lark). We also need the pymilvus package.\n\n#!pip install lark\n\n#!pip install pymilvus\n\n\nWe want to use OpenAIEmbeddings so we have to get the OpenAI API Key.\n\nimport os\n\nOPENAI_API_KEY = \"Use your OpenAI key:)\"\n\nos.environ[\"OPENAI_API_KEY\"] = OPENAI_API_KEY\n\nfrom langchain.embeddings.openai import OpenAIEmbeddings\nfrom langchain.schema import Document\nfrom langchain.vectorstores import Milvus\n\nembeddings = OpenAIEmbeddings()\n\ndocs = [\n    Document(\n        page_content=\"A bunch of scientists bring back dinosaurs and mayhem breaks loose\",\n        metadata={\"year\": 1993, \"rating\": 7.7, \"genre\": \"action\"},\n    ),\n    Document(\n        page_content=\"Leo DiCaprio gets lost in a dream within a dream within a dream within a ...\",\n        metadata={\"year\": 2010, \"genre\": \"thriller\", \"rating\": 8.2},\n    ),\n    Document(\n        page_content=\"A bunch of normal-sized women are supremely wholesome and some men pine after them\",\n        metadata={\"year\": 2019, \"rating\": 8.3, \"genre\": \"drama\"},\n    ),\n    Document(\n        page_content=\"Three men walk into the Zone, three men walk out of the Zone\",\n        metadata={\"year\": 1979, \"rating\": 9.9, \"genre\": \"science fiction\"},\n    ),\n    Document(\n        page_content=\"A psychologist / detective gets lost in a series of dreams within dreams within dreams and Inception reused the idea\",\n        metadata={\"year\": 2006, \"genre\": \"thriller\", \"rating\": 9.0},\n    ),\n    Document(\n        page_content=\"Toys come alive and have a blast doing so\",\n        metadata={\"year\": 1995, \"genre\": \"animated\", \"rating\": 9.3},\n    ),\n]\n\nvector_store = Milvus.from_documents(\n    docs,\n    embedding=embeddings,\n    connection_args={\"uri\": \"Use your uri:)\", \"token\": \"Use your token:)\"},\n)\n\nCreating our self-querying retriever‚Äã\n\nNow we can instantiate our retriever. To do this we'll need to provide some information upfront about the metadata fields that our documents support and a short description of the document contents.\n\nfrom langchain.chains.query_constructor.base import AttributeInfo\nfrom langchain.llms import OpenAI\nfrom langchain.retrievers.self_query.base import SelfQueryRetriever\n\nmetadata_field_info = [\n    AttributeInfo(\n        name=\"genre\",\n        description=\"The genre of the movie\",\n        type=\"string\",\n    ),\n    AttributeInfo(\n        name=\"year\",\n        description=\"The year the movie was released\",\n        type=\"integer\",\n    ),\n    AttributeInfo(\n        name=\"rating\", description=\"A 1-10 rating for the movie\", type=\"float\"\n    ),\n]\ndocument_content_description = \"Brief summary of a movie\"\nllm = OpenAI(temperature=0)\nretriever = SelfQueryRetriever.from_llm(\n    llm, vector_store, document_content_description, metadata_field_info, verbose=True\n)\n\nTesting it out‚Äã\n\nAnd now we can try actually using our retriever!\n\n# This example only specifies a relevant query\nretriever.get_relevant_documents(\"What are some movies about dinosaurs\")\n\n    query='dinosaur' filter=None limit=None\n\n\n\n\n\n    [Document(page_content='A bunch of scientists bring back dinosaurs and mayhem breaks loose', metadata={'year': 1993, 'rating': 7.7, 'genre': 'action'}),\n     Document(page_content='Toys come alive and have a blast doing so', metadata={'year': 1995, 'rating': 9.3, 'genre': 'animated'}),\n     Document(page_content='Three men walk into the Zone, three men walk out of the Zone', metadata={'year': 1979, 'rating': 9.9, 'genre': 'science fiction'}),\n     Document(page_content='A psychologist / detective gets lost in a series of dreams within dreams within dreams and Inception reused the idea', metadata={'year': 2006, 'rating': 9.0, 'genre': 'thriller'})]\n\n# This example specifies a filter\nretriever.get_relevant_documents(\"What are some highly rated movies (above 9)?\")\n\n    query=' ' filter=Comparison(comparator=<Comparator.GT: 'gt'>, attribute='rating', value=9) limit=None\n\n\n\n\n\n    [Document(page_content='Toys come alive and have a blast doing so', metadata={'year': 1995, 'rating': 9.3, 'genre': 'animated'}),\n     Document(page_content='Three men walk into the Zone, three men walk out of the Zone', metadata={'year': 1979, 'rating': 9.9, 'genre': 'science fiction'})]\n\n# This example only specifies a query and a filter\nretriever.get_relevant_documents(\n    \"I want to watch a movie about toys rated higher than 9\"\n)\n\n    query='toys' filter=Comparison(comparator=<Comparator.GT: 'gt'>, attribute='rating', value=9) limit=None\n\n\n\n\n\n    [Document(page_content='Toys come alive and have a blast doing so', metadata={'year': 1995, 'rating': 9.3, 'genre': 'animated'}),\n     Document(page_content='Three men walk into the Zone, three men walk out of the Zone', metadata={'year': 1979, 'rating': 9.9, 'genre': 'science fiction'})]\n\n# This example specifies a composite filter\nretriever.get_relevant_documents(\n    \"What's a highly rated (above or equal 9) thriller film?\"\n)\n\n    query=' ' filter=Operation(operator=<Operator.AND: 'and'>, arguments=[Comparison(comparator=<Comparator.EQ: 'eq'>, attribute='genre', value='thriller'), Comparison(comparator=<Comparator.GTE: 'gte'>, attribute='rating', value=9)]) limit=None\n\n\n\n\n\n    [Document(page_content='A psychologist / detective gets lost in a series of dreams within dreams within dreams and Inception reused the idea', metadata={'year': 2006, 'rating': 9.0, 'genre': 'thriller'})]\n\n# This example specifies a query and composite filter\nretriever.get_relevant_documents(\n    \"What's a movie after 1990 but before 2005 that's all about dinosaurs, \\\n    and preferably has a lot of action\"\n)\n\n    query='dinosaur' filter=Operation(operator=<Operator.AND: 'and'>, arguments=[Comparison(comparator=<Comparator.GT: 'gt'>, attribute='year', value=1990), Comparison(comparator=<Comparator.LT: 'lt'>, attribute='year', value=2005), Comparison(comparator=<Comparator.EQ: 'eq'>, attribute='genre', value='action')]) limit=None\n\n\n\n\n\n    [Document(page_content='A bunch of scientists bring back dinosaurs and mayhem breaks loose', metadata={'year': 1993, 'rating': 7.7, 'genre': 'action'})]\n\nFilter k‚Äã\n\nWe can also use the self query retriever to specify k: the number of documents to fetch.\n\nWe can do this by passing enable_limit=True to the constructor.\n\nretriever = SelfQueryRetriever.from_llm(\n    llm,\n    vector_store,\n    document_content_description,\n    metadata_field_info,\n    verbose=True,\n    enable_limit=True,\n)\n\n# This example only specifies a relevant query\nretriever.get_relevant_documents(\"What are two movies about dinosaurs?\")\n\n    query='dinosaur' filter=None limit=2\n\n\n\n\n\n    [Document(page_content='A bunch of scientists bring back dinosaurs and mayhem breaks loose', metadata={'year': 1993, 'rating': 7.7, 'genre': 'action'}),\n     Document(page_content='Toys come alive and have a blast doing so', metadata={'year': 1995, 'rating': 9.3, 'genre': 'animated'})]\n\nPrevious\nElasticsearch\nNext\nMyScale"
}