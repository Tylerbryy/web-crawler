{
	"title": "Confident | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/integrations/callbacks/confident",
	"html": "ComponentsCallbacksConfident\nConfident\n\nDeepEval package for unit testing LLMs. Using Confident, everyone can build robust language models through faster iterations using both unit testing and integration testing. We provide support for each step in the iteration from synthetic data creation to testing.\n\nIn this guide we will demonstrate how to test and measure LLMs in performance. We show how you can use our callback to measure performance and how you can define your own metric and log them into our dashboard.\n\nDeepEval also offers:\n\nHow to generate synthetic data\nHow to measure performance\nA dashboard to monitor and review results over time\nInstallation and Setup‚Äã\npip install deepeval --upgrade\n\nGetting API Credentials‚Äã\n\nTo get the DeepEval API credentials, follow the next steps:\n\nGo to https://app.confident-ai.com\nClick on \"Organization\"\nCopy the API Key.\n\nWhen you log in, you will also be asked to set the implementation name. The implementation name is required to describe the type of implementation. (Think of what you want to call your project. We recommend making it descriptive.)\n\ndeepeval login\n\nSetup DeepEval‚Äã\n\nYou can, by default, use the DeepEvalCallbackHandler to set up the metrics you want to track. However, this has limited support for metrics at the moment (more to be added soon). It currently supports:\n\nAnswer Relevancy\nBias\nToxicness\nfrom deepeval.metrics.answer_relevancy import AnswerRelevancy\n\n# Here we want to make sure the answer is minimally relevant\nanswer_relevancy_metric = AnswerRelevancy(minimum_score=0.5)\n\nGet Started‚Äã\n\nTo use the DeepEvalCallbackHandler, we need the implementation_name.\n\nfrom langchain.callbacks.confident_callback import DeepEvalCallbackHandler\n\ndeepeval_callback = DeepEvalCallbackHandler(\n    implementation_name=\"langchainQuickstart\", metrics=[answer_relevancy_metric]\n)\n\nScenario 1: Feeding into LLM‚Äã\n\nYou can then feed it into your LLM with OpenAI.\n\nfrom langchain.llms import OpenAI\n\nllm = OpenAI(\n    temperature=0,\n    callbacks=[deepeval_callback],\n    verbose=True,\n    openai_api_key=\"<YOUR_API_KEY>\",\n)\noutput = llm.generate(\n    [\n        \"What is the best evaluation tool out there? (no bias at all)\",\n    ]\n)\n\n    LLMResult(generations=[[Generation(text='\\n\\nQ: What did the fish say when he hit the wall? \\nA: Dam.', generation_info={'finish_reason': 'stop', 'logprobs': None})], [Generation(text='\\n\\nThe Moon \\n\\nThe moon is high in the midnight sky,\\nSparkling like a star above.\\nThe night so peaceful, so serene,\\nFilling up the air with love.\\n\\nEver changing and renewing,\\nA never-ending light of grace.\\nThe moon remains a constant view,\\nA reminder of life‚Äôs gentle pace.\\n\\nThrough time and space it guides us on,\\nA never-fading beacon of hope.\\nThe moon shines down on us all,\\nAs it continues to rise and elope.', generation_info={'finish_reason': 'stop', 'logprobs': None})], [Generation(text='\\n\\nQ. What did one magnet say to the other magnet?\\nA. \"I find you very attractive!\"', generation_info={'finish_reason': 'stop', 'logprobs': None})], [Generation(text=\"\\n\\nThe world is charged with the grandeur of God.\\nIt will flame out, like shining from shook foil;\\nIt gathers to a greatness, like the ooze of oil\\nCrushed. Why do men then now not reck his rod?\\n\\nGenerations have trod, have trod, have trod;\\nAnd all is seared with trade; bleared, smeared with toil;\\nAnd wears man's smudge and shares man's smell: the soil\\nIs bare now, nor can foot feel, being shod.\\n\\nAnd for all this, nature is never spent;\\nThere lives the dearest freshness deep down things;\\nAnd though the last lights off the black West went\\nOh, morning, at the brown brink eastward, springs ‚Äî\\n\\nBecause the Holy Ghost over the bent\\nWorld broods with warm breast and with ah! bright wings.\\n\\n~Gerard Manley Hopkins\", generation_info={'finish_reason': 'stop', 'logprobs': None})], [Generation(text='\\n\\nQ: What did one ocean say to the other ocean?\\nA: Nothing, they just waved.', generation_info={'finish_reason': 'stop', 'logprobs': None})], [Generation(text=\"\\n\\nA poem for you\\n\\nOn a field of green\\n\\nThe sky so blue\\n\\nA gentle breeze, the sun above\\n\\nA beautiful world, for us to love\\n\\nLife is a journey, full of surprise\\n\\nFull of joy and full of surprise\\n\\nBe brave and take small steps\\n\\nThe future will be revealed with depth\\n\\nIn the morning, when dawn arrives\\n\\nA fresh start, no reason to hide\\n\\nSomewhere down the road, there's a heart that beats\\n\\nBelieve in yourself, you'll always succeed.\", generation_info={'finish_reason': 'stop', 'logprobs': None})]], llm_output={'token_usage': {'completion_tokens': 504, 'total_tokens': 528, 'prompt_tokens': 24}, 'model_name': 'text-davinci-003'})\n\n\nYou can then check the metric if it was successful by calling the is_successful() method.\n\nanswer_relevancy_metric.is_successful()\n# returns True/False\n\n\nOnce you have ran that, you should be able to see our dashboard below.\n\nScenario 2: Tracking an LLM in a chain without callbacks‚Äã\n\nTo track an LLM in a chain without callbacks, you can plug into it at the end.\n\nWe can start by defining a simple chain as shown below.\n\nimport requests\nfrom langchain.chains import RetrievalQA\nfrom langchain.document_loaders import TextLoader\nfrom langchain.embeddings.openai import OpenAIEmbeddings\nfrom langchain.llms import OpenAI\nfrom langchain.text_splitter import CharacterTextSplitter\nfrom langchain.vectorstores import Chroma\n\ntext_file_url = \"https://raw.githubusercontent.com/hwchase17/chat-your-data/master/state_of_the_union.txt\"\n\nopenai_api_key = \"sk-XXX\"\n\nwith open(\"state_of_the_union.txt\", \"w\") as f:\n    response = requests.get(text_file_url)\n    f.write(response.text)\n\nloader = TextLoader(\"state_of_the_union.txt\")\ndocuments = loader.load()\ntext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)\ntexts = text_splitter.split_documents(documents)\n\nembeddings = OpenAIEmbeddings(openai_api_key=openai_api_key)\ndocsearch = Chroma.from_documents(texts, embeddings)\n\nqa = RetrievalQA.from_chain_type(\n    llm=OpenAI(openai_api_key=openai_api_key),\n    chain_type=\"stuff\",\n    retriever=docsearch.as_retriever(),\n)\n\n# Providing a new question-answering pipeline\nquery = \"Who is the president?\"\nresult = qa.run(query)\n\n\nAfter defining a chain, you can then manually check for answer similarity.\n\nanswer_relevancy_metric.measure(result, query)\nanswer_relevancy_metric.is_successful()\n\nWhat's next?‚Äã\n\nYou can create your own custom metrics here.\n\nDeepEval also offers other features such as being able to automatically create unit tests, tests for hallucination.\n\nIf you are interested, check out our Github repository here https://github.com/confident-ai/deepeval. We welcome any PRs and discussions on how to improve LLM performance.\n\nPrevious\nArgilla\nNext\nContext"
}