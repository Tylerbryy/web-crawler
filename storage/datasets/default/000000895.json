{
	"title": "Meilisearch | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/integrations/vectorstores/meilisearch",
	"html": "ComponentsVector storesMeilisearch\nMeilisearch\n\nMeilisearch is an open-source, lightning-fast, and hyper relevant search engine. It comes with great defaults to help developers build snappy search experiences.\n\nYou can self-host Meilisearch or run on Meilisearch Cloud.\n\nMeilisearch v1.3 supports vector search. This page guides you through integrating Meilisearch as a vector store and using it to perform vector search.\n\nSetup‚Äã\nLaunching a Meilisearch instance‚Äã\n\nYou will need a running Meilisearch instance to use as your vector store. You can run Meilisearch in local or create a Meilisearch Cloud account.\n\nAs of Meilisearch v1.3, vector storage is an experimental feature. After launching your Meilisearch instance, you need to enable vector storage. For self-hosted Meilisearch, read the docs on enabling experimental features. On Meilisearch Cloud, enable Vector Store via your project Settings page.\n\nYou should now have a running Meilisearch instance with vector storage enabled. üéâ\n\nCredentials‚Äã\n\nTo interact with your Meilisearch instance, the Meilisearch SDK needs a host (URL of your instance) and an API key.\n\nHost\n\nIn local, the default host is localhost:7700\nOn Meilisearch Cloud, find the host in your project Settings page\n\nAPI keys\n\nMeilisearch instance provides you with three API keys out of the box:\n\nA MASTER KEY ‚Äî it should only be used to create your Meilisearch instance\nA ADMIN KEY ‚Äî use it only server-side to update your database and its settings\nA SEARCH KEY ‚Äî a key that you can safely share in front-end applications\n\nYou can create additional API keys as needed.\n\nInstalling dependencies‚Äã\n\nThis guide uses the Meilisearch Python SDK. You can install it by running:\n\npip install meilisearch\n\n\nFor more information, refer to the Meilisearch Python SDK documentation.\n\nExamples‚Äã\n\nThere are multiple ways to initialize the Meilisearch vector store: providing a Meilisearch client or the URL and API key as needed. In our examples, the credentials will be loaded from the environment.\n\nYou can make environment variables available in your Notebook environment by using os and getpass. You can use this technique for all the following examples.\n\nimport getpass\nimport os\n\nos.environ[\"MEILI_HTTP_ADDR\"] = getpass.getpass(\"Meilisearch HTTP address and port:\")\nos.environ[\"MEILI_MASTER_KEY\"] = getpass.getpass(\"Meilisearch API Key:\")\n\n\nWe want to use OpenAIEmbeddings so we have to get the OpenAI API Key.\n\nos.environ[\"OPENAI_API_KEY\"] = getpass.getpass(\"OpenAI API Key:\")\n\nAdding text and embeddings‚Äã\n\nThis example adds text to the Meilisearch vector database without having to initialize a Meilisearch vector store.\n\nfrom langchain.embeddings.openai import OpenAIEmbeddings\nfrom langchain.text_splitter import CharacterTextSplitter\nfrom langchain.vectorstores import Meilisearch\n\nembeddings = OpenAIEmbeddings()\n\nwith open(\"../../modules/state_of_the_union.txt\") as f:\n    state_of_the_union = f.read()\ntext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)\ntexts = text_splitter.split_text(state_of_the_union)\n\n# Use Meilisearch vector store to store texts & associated embeddings as vector\nvector_store = Meilisearch.from_texts(texts=texts, embedding=embeddings)\n\n\nBehind the scenes, Meilisearch will convert the text to multiple vectors. This will bring us to the same result as the following example.\n\nAdding documents and embeddings‚Äã\n\nIn this example, we'll use Langchain TextSplitter to split the text in multiple documents. Then, we'll store these documents along with their embeddings.\n\nfrom langchain.document_loaders import TextLoader\n\n# Load text\nloader = TextLoader(\"../../modules/state_of_the_union.txt\")\ndocuments = loader.load()\ntext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)\n\n# Create documents\ndocs = text_splitter.split_documents(documents)\n\n# Import documents & embeddings in the vector store\nvector_store = Meilisearch.from_documents(documents=documents, embedding=embeddings)\n\n# Search in our vector store\nquery = \"What did the president say about Ketanji Brown Jackson\"\ndocs = vector_store.similarity_search(query)\nprint(docs[0].page_content)\n\nAdd documents by creating a Meilisearch Vectorstore‚Äã\n\nIn this approach, we create a vector store object and add documents to it.\n\nimport meilisearch\nfrom langchain.vectorstores import Meilisearch\n\nclient = meilisearch.Client(url=\"http://127.0.0.1:7700\", api_key=\"***\")\nvector_store = Meilisearch(\n    embedding=embeddings, client=client, index_name=\"langchain_demo\", text_key=\"text\"\n)\nvector_store.add_documents(documents)\n\nSimilarity Search with score‚Äã\n\nThis specific method allows you to return the documents and the distance score of the query to them.\n\ndocs_and_scores = vector_store.similarity_search_with_score(query)\ndocs_and_scores[0]\n\nSimilarity Search by vector‚Äã\nembedding_vector = embeddings.embed_query(query)\ndocs_and_scores = vector_store.similarity_search_by_vector(embedding_vector)\ndocs_and_scores[0]\n\nAdditional resources‚Äã\n\nDocumentation\n\nMeilisearch\nMeilisearch Python SDK\n\nOpen-source repositories\n\nMeilisearch repository\nMeilisearch Python SDK\nPrevious\nGoogle Vertex AI Vector Search\nNext\nMilvus"
}