{
	"title": "solo-performance-prompting-agent | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/templates/solo-performance-prompting-agent",
	"html": "Templatessolo-performance-prompting-agent\nsolo-performance-prompting-agent\n\nThis template creates an agent that transforms a single LLM into a cognitive synergist by engaging in multi-turn self-collaboration with multiple personas. A cognitive synergist refers to an intelligent agent that collaborates with multiple minds, combining their individual strengths and knowledge, to enhance problem-solving and overall performance in complex tasks. By dynamically identifying and simulating different personas based on task inputs, SPP unleashes the potential of cognitive synergy in LLMs.\n\nThis template will use the DuckDuckGo search API.\n\nEnvironment Setup‚Äã\n\nThis template will use OpenAI by default. Be sure that OPENAI_API_KEY is set in your environment.\n\nUsage‚Äã\n\nTo use this package, you should first have the LangChain CLI installed:\n\npip install -U langchain-cli\n\n\nTo create a new LangChain project and install this as the only package, you can do:\n\nlangchain app new my-app --package solo-performance-prompting-agent\n\n\nIf you want to add this to an existing project, you can just run:\n\nlangchain app add solo-performance-prompting-agent\n\n\nAnd add the following code to your server.py file:\n\nfrom solo_performance_prompting_agent.agent import agent_executor as solo_performance_prompting_agent_chain\n\nadd_routes(app, solo_performance_prompting_agent_chain, path=\"/solo-performance-prompting-agent\")\n\n\n(Optional) Let's now configure LangSmith. LangSmith will help us trace, monitor and debug LangChain applications. LangSmith is currently in private beta, you can sign up here. If you don't have access, you can skip this section\n\nexport LANGCHAIN_TRACING_V2=true\nexport LANGCHAIN_API_KEY=<your-api-key>\nexport LANGCHAIN_PROJECT=<your-project>  # if not specified, defaults to \"default\"\n\n\nIf you are inside this directory, then you can spin up a LangServe instance directly by:\n\nlangchain serve\n\n\nThis will start the FastAPI app with a server is running locally at http://localhost:8000\n\nWe can see all templates at http://127.0.0.1:8000/docs We can access the playground at http://127.0.0.1:8000/solo-performance-prompting-agent/playground\n\nWe can access the template from code with:\n\nfrom langserve.client import RemoteRunnable\n\nrunnable = RemoteRunnable(\"http://localhost:8000/solo-performance-prompting-agent\")\n\nPrevious\nself-query-supabase\nNext\nsql-llama2"
}