{
	"title": "Bittensor | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/integrations/llms/bittensor",
	"html": "ComponentsLLMsBittensor\nBittensor\n\nBittensor is a mining network, similar to Bitcoin, that includes built-in incentives designed to encourage miners to contribute compute + knowledge.\n\nNIBittensorLLM is developed by Neural Internet, powered by Bittensor.\n\nThis LLM showcases true potential of decentralized AI by giving you the best response(s) from the Bittensor protocol, which consist of various AI models such as OpenAI, LLaMA2 etc.\n\nUsers can view their logs, requests, and API keys on the Validator Endpoint Frontend. However, changes to the configuration are currently prohibited; otherwise, the user's queries will be blocked.\n\nIf you encounter any difficulties or have any questions, please feel free to reach out to our developer on GitHub, Discord or join our discord server for latest update and queries Neural Internet.\n\nDifferent Parameter and response handling for NIBittensorLLM‚Äã\nimport json\nfrom pprint import pprint\n\nfrom langchain.globals import set_debug\nfrom langchain.llms import NIBittensorLLM\n\nset_debug(True)\n\n# System parameter in NIBittensorLLM is optional but you can set whatever you want to perform with model\nllm_sys = NIBittensorLLM(\n    system_prompt=\"Your task is to determine response based on user prompt.Explain me like I am technical lead of a project\"\n)\nsys_resp = llm_sys(\n    \"What is bittensor and What are the potential benefits of decentralized AI?\"\n)\nprint(f\"Response provided by LLM with system prompt set is : {sys_resp}\")\n\n# The top_responses parameter can give multiple responses based on its parameter value\n# This below code retrive top 10 miner's response all the response are in format of json\n\n# Json response structure is\n\"\"\" {\n    \"choices\":  [\n                    {\"index\": Bittensor's Metagraph index number,\n                    \"uid\": Unique Identifier of a miner,\n                    \"responder_hotkey\": Hotkey of a miner,\n                    \"message\":{\"role\":\"assistant\",\"content\": Contains actual response},\n                    \"response_ms\": Time in millisecond required to fetch response from a miner} \n                ]\n    } \"\"\"\n\nmulti_response_llm = NIBittensorLLM(top_responses=10)\nmulti_resp = multi_response_llm(\"What is Neural Network Feeding Mechanism?\")\njson_multi_resp = json.loads(multi_resp)\npprint(json_multi_resp)\n\nUsing NIBittensorLLM with LLMChain and PromptTemplate‚Äã\nfrom langchain.chains import LLMChain\nfrom langchain.globals import set_debug\nfrom langchain.llms import NIBittensorLLM\nfrom langchain.prompts import PromptTemplate\n\nset_debug(True)\n\ntemplate = \"\"\"Question: {question}\n\nAnswer: Let's think step by step.\"\"\"\n\n\nprompt = PromptTemplate(template=template, input_variables=[\"question\"])\n\n# System parameter in NIBittensorLLM is optional but you can set whatever you want to perform with model\nllm = NIBittensorLLM(\n    system_prompt=\"Your task is to determine response based on user prompt.\"\n)\n\nllm_chain = LLMChain(prompt=prompt, llm=llm)\nquestion = \"What is bittensor?\"\n\nllm_chain.run(question)\n\nUsing NIBittensorLLM with Conversational Agent and Google Search Tool‚Äã\nfrom langchain.agents import (\n    AgentExecutor,\n    ZeroShotAgent,\n)\nfrom langchain.chains import LLMChain\nfrom langchain.llms import NIBittensorLLM\nfrom langchain.memory import ConversationBufferMemory\nfrom langchain.prompts import PromptTemplate\n\nmemory = ConversationBufferMemory(memory_key=\"chat_history\")\n\n\nprefix = \"\"\"Answer prompt based on LLM if there is need to search something then use internet and observe internet result and give accurate reply of user questions also try to use authenticated sources\"\"\"\nsuffix = \"\"\"Begin!\n            {chat_history}\n            Question: {input}\n            {agent_scratchpad}\"\"\"\n\nprompt = ZeroShotAgent.create_prompt(\n    tools,\n    prefix=prefix,\n    suffix=suffix,\n    input_variables=[\"input\", \"chat_history\", \"agent_scratchpad\"],\n)\n\nllm = NIBittensorLLM(\n    system_prompt=\"Your task is to determine response based on user prompt\"\n)\n\nllm_chain = LLMChain(llm=llm, prompt=prompt)\n\nmemory = ConversationBufferMemory(memory_key=\"chat_history\")\n\nagent = ZeroShotAgent(llm_chain=llm_chain, tools=tools, verbose=True)\nagent_chain = AgentExecutor.from_agent_and_tools(\n    agent=agent, tools=tools, verbose=True, memory=memory\n)\n\nresponse = agent_chain.run(input=prompt)\n\nPrevious\nBedrock\nNext\nCerebriumAI"
}