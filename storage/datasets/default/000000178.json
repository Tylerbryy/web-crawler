{
	"title": "Neo4j DB QA chain | 🦜️🔗 Langchain",
	"url": "https://python.langchain.com/docs/use_cases/graph/graph_cypher_qa",
	"html": "Graph queryingNeo4j DB QA chain\nNeo4j DB QA chain\n\nThis notebook shows how to use LLMs to provide a natural language interface to a graph database you can query with the Cypher query language.\n\nYou will need to have a running Neo4j instance. One option is to create a free Neo4j database instance in their Aura cloud service. You can also run the database locally using the Neo4j Desktop application, or running a docker container. You can run a local docker container by running the executing the following script:\n\ndocker run \\\n    --name neo4j \\\n    -p 7474:7474 -p 7687:7687 \\\n    -d \\\n    -e NEO4J_AUTH=neo4j/pleaseletmein \\\n    -e NEO4J_PLUGINS=\\[\\\"apoc\\\"\\]  \\\n    neo4j:latest\n\n\nIf you are using the docker container, you need to wait a couple of second for the database to start.\n\nfrom langchain.chains import GraphCypherQAChain\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.graphs import Neo4jGraph\n\ngraph = Neo4jGraph(\n    url=\"bolt://localhost:7687\", username=\"neo4j\", password=\"pleaseletmein\"\n)\n\n    /home/tomaz/neo4j/langchain/libs/langchain/langchain/graphs/neo4j_graph.py:52: ExperimentalWarning: The configuration may change in the future.\n      self._driver.verify_connectivity()\n\nSeeding the database​\n\nAssuming your database is empty, you can populate it using Cypher query language. The following Cypher statement is idempotent, which means the database information will be the same if you run it one or multiple times.\n\ngraph.query(\n    \"\"\"\nMERGE (m:Movie {name:\"Top Gun\"})\nWITH m\nUNWIND [\"Tom Cruise\", \"Val Kilmer\", \"Anthony Edwards\", \"Meg Ryan\"] AS actor\nMERGE (a:Actor {name:actor})\nMERGE (a)-[:ACTED_IN]->(m)\n\"\"\"\n)\n\n    []\n\nRefresh graph schema information​\n\nIf the schema of database changes, you can refresh the schema information needed to generate Cypher statements.\n\ngraph.refresh_schema()\n\nprint(graph.schema)\n\n    \n            Node properties are the following:\n            [{'properties': [{'property': 'name', 'type': 'STRING'}], 'labels': 'Movie'}, {'properties': [{'property': 'name', 'type': 'STRING'}], 'labels': 'Actor'}]\n            Relationship properties are the following:\n            []\n            The relationships are the following:\n            ['(:Actor)-[:ACTED_IN]->(:Movie)']\n            \n\nQuerying the graph​\n\nWe can now use the graph cypher QA chain to ask question of the graph\n\nchain = GraphCypherQAChain.from_llm(\n    ChatOpenAI(temperature=0), graph=graph, verbose=True\n)\n\nchain.run(\"Who played in Top Gun?\")\n\n    \n    \n    > Entering new GraphCypherQAChain chain...\n    Generated Cypher:\n    MATCH (a:Actor)-[:ACTED_IN]->(m:Movie {name: 'Top Gun'})\n    RETURN a.name\n    Full Context:\n    [{'a.name': 'Tom Cruise'}, {'a.name': 'Val Kilmer'}, {'a.name': 'Anthony Edwards'}, {'a.name': 'Meg Ryan'}]\n    \n    > Finished chain.\n\n\n\n\n\n    'Tom Cruise, Val Kilmer, Anthony Edwards, and Meg Ryan played in Top Gun.'\n\nLimit the number of results​\n\nYou can limit the number of results from the Cypher QA Chain using the top_k parameter. The default is 10.\n\nchain = GraphCypherQAChain.from_llm(\n    ChatOpenAI(temperature=0), graph=graph, verbose=True, top_k=2\n)\n\nchain.run(\"Who played in Top Gun?\")\n\n    \n    \n    > Entering new GraphCypherQAChain chain...\n    Generated Cypher:\n    MATCH (a:Actor)-[:ACTED_IN]->(m:Movie {name: 'Top Gun'})\n    RETURN a.name\n    Full Context:\n    [{'a.name': 'Tom Cruise'}, {'a.name': 'Val Kilmer'}]\n    \n    > Finished chain.\n\n\n\n\n\n    'Tom Cruise and Val Kilmer played in Top Gun.'\n\nReturn intermediate results​\n\nYou can return intermediate steps from the Cypher QA Chain using the return_intermediate_steps parameter\n\nchain = GraphCypherQAChain.from_llm(\n    ChatOpenAI(temperature=0), graph=graph, verbose=True, return_intermediate_steps=True\n)\n\nresult = chain(\"Who played in Top Gun?\")\nprint(f\"Intermediate steps: {result['intermediate_steps']}\")\nprint(f\"Final answer: {result['result']}\")\n\n    \n    \n    > Entering new GraphCypherQAChain chain...\n    Generated Cypher:\n    MATCH (a:Actor)-[:ACTED_IN]->(m:Movie {name: 'Top Gun'})\n    RETURN a.name\n    Full Context:\n    [{'a.name': 'Tom Cruise'}, {'a.name': 'Val Kilmer'}, {'a.name': 'Anthony Edwards'}, {'a.name': 'Meg Ryan'}]\n    \n    > Finished chain.\n    Intermediate steps: [{'query': \"MATCH (a:Actor)-[:ACTED_IN]->(m:Movie {name: 'Top Gun'})\\nRETURN a.name\"}, {'context': [{'a.name': 'Tom Cruise'}, {'a.name': 'Val Kilmer'}, {'a.name': 'Anthony Edwards'}, {'a.name': 'Meg Ryan'}]}]\n    Final answer: Tom Cruise, Val Kilmer, Anthony Edwards, and Meg Ryan played in Top Gun.\n\nReturn direct results​\n\nYou can return direct results from the Cypher QA Chain using the return_direct parameter\n\nchain = GraphCypherQAChain.from_llm(\n    ChatOpenAI(temperature=0), graph=graph, verbose=True, return_direct=True\n)\n\nchain.run(\"Who played in Top Gun?\")\n\n    \n    \n    > Entering new GraphCypherQAChain chain...\n    Generated Cypher:\n    MATCH (a:Actor)-[:ACTED_IN]->(m:Movie {name: 'Top Gun'})\n    RETURN a.name\n    \n    > Finished chain.\n\n\n\n\n\n    [{'a.name': 'Tom Cruise'},\n     {'a.name': 'Val Kilmer'},\n     {'a.name': 'Anthony Edwards'},\n     {'a.name': 'Meg Ryan'}]\n\nAdd examples in the Cypher generation prompt​\n\nYou can define the Cypher statement you want the LLM to generate for particular questions\n\nfrom langchain.prompts.prompt import PromptTemplate\n\nCYPHER_GENERATION_TEMPLATE = \"\"\"Task:Generate Cypher statement to query a graph database.\nInstructions:\nUse only the provided relationship types and properties in the schema.\nDo not use any other relationship types or properties that are not provided.\nSchema:\n{schema}\nNote: Do not include any explanations or apologies in your responses.\nDo not respond to any questions that might ask anything else than for you to construct a Cypher statement.\nDo not include any text except the generated Cypher statement.\nExamples: Here are a few examples of generated Cypher statements for particular questions:\n# How many people played in Top Gun?\nMATCH (m:Movie {{title:\"Top Gun\"}})<-[:ACTED_IN]-()\nRETURN count(*) AS numberOfActors\n\nThe question is:\n{question}\"\"\"\n\nCYPHER_GENERATION_PROMPT = PromptTemplate(\n    input_variables=[\"schema\", \"question\"], template=CYPHER_GENERATION_TEMPLATE\n)\n\nchain = GraphCypherQAChain.from_llm(\n    ChatOpenAI(temperature=0),\n    graph=graph,\n    verbose=True,\n    cypher_prompt=CYPHER_GENERATION_PROMPT,\n)\n\nchain.run(\"How many people played in Top Gun?\")\n\n    \n    \n    > Entering new GraphCypherQAChain chain...\n    Generated Cypher:\n    MATCH (m:Movie {name:\"Top Gun\"})<-[:ACTED_IN]-(:Actor)\n    RETURN count(*) AS numberOfActors\n    Full Context:\n    [{'numberOfActors': 4}]\n    \n    > Finished chain.\n\n\n\n\n\n    'Four people played in Top Gun.'\n\nUse separate LLMs for Cypher and answer generation​\n\nYou can use the cypher_llm and qa_llm parameters to define different llms\n\nchain = GraphCypherQAChain.from_llm(\n    graph=graph,\n    cypher_llm=ChatOpenAI(temperature=0, model=\"gpt-3.5-turbo\"),\n    qa_llm=ChatOpenAI(temperature=0, model=\"gpt-3.5-turbo-16k\"),\n    verbose=True,\n)\n\nchain.run(\"Who played in Top Gun?\")\n\n    \n    \n    > Entering new GraphCypherQAChain chain...\n    Generated Cypher:\n    MATCH (a:Actor)-[:ACTED_IN]->(m:Movie {name: 'Top Gun'})\n    RETURN a.name\n    Full Context:\n    [{'a.name': 'Tom Cruise'}, {'a.name': 'Val Kilmer'}, {'a.name': 'Anthony Edwards'}, {'a.name': 'Meg Ryan'}]\n    \n    > Finished chain.\n\n\n\n\n\n    'Tom Cruise, Val Kilmer, Anthony Edwards, and Meg Ryan played in Top Gun.'\n\nIgnore specified node and relationship types\n\nYou can use include_types or exclude_types to ignore parts of the graph schema when generating Cypher statements.\n\nchain = GraphCypherQAChain.from_llm(\n    graph=graph,\n    cypher_llm=ChatOpenAI(temperature=0, model=\"gpt-3.5-turbo\"),\n    qa_llm=ChatOpenAI(temperature=0, model=\"gpt-3.5-turbo-16k\"),\n    verbose=True,\n    exclude_types=[\"Movie\"],\n)\n\n# Inspect graph schema\nprint(chain.graph_schema)\n\n    Node properties are the following: \n     {'Actor': [{'property': 'name', 'type': 'STRING'}]}\n    Relationships properties are the following: \n     {}\n    Relationships are: \n    []\n\nValidate generated Cypher statements\n\nYou can use the validate_cypher parameter to validate and correct relationship directions in generated Cypher statements\n\nchain = GraphCypherQAChain.from_llm(\n    llm=ChatOpenAI(temperature=0, model=\"gpt-3.5-turbo\"),\n    graph=graph,\n    verbose=True,\n    validate_cypher=True,\n)\n\nchain.run(\"Who played in Top Gun?\")\n\n    \n    \n    > Entering new GraphCypherQAChain chain...\n    Generated Cypher:\n    MATCH (a:Actor)-[:ACTED_IN]->(m:Movie {name: 'Top Gun'})\n    RETURN a.name\n    Full Context:\n    [{'a.name': 'Tom Cruise'}, {'a.name': 'Val Kilmer'}, {'a.name': 'Anthony Edwards'}, {'a.name': 'Meg Ryan'}]\n    \n    > Finished chain.\n\n\n\n\n\n    'Tom Cruise, Val Kilmer, Anthony Edwards, and Meg Ryan played in Top Gun.'\n\nPrevious\nArangoDB QA chain\nNext\nFalkorDBQAChain"
}