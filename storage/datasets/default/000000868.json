{
	"title": "Xorbits inference (Xinference) | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/integrations/text_embedding/xinference",
	"html": "ComponentsText embedding modelsXorbits inference (Xinference)\nXorbits inference (Xinference)\n\nThis notebook goes over how to use Xinference embeddings within LangChain\n\nInstallation‚Äã\n\nInstall Xinference through PyPI:\n\n%pip install \"xinference[all]\"\n\nDeploy Xinference Locally or in a Distributed Cluster.‚Äã\n\nFor local deployment, run xinference.\n\nTo deploy Xinference in a cluster, first start an Xinference supervisor using the xinference-supervisor. You can also use the option -p to specify the port and -H to specify the host. The default port is 9997.\n\nThen, start the Xinference workers using xinference-worker on each server you want to run them on.\n\nYou can consult the README file from Xinference for more information.\n\nWrapper‚Äã\n\nTo use Xinference with LangChain, you need to first launch a model. You can use command line interface (CLI) to do so:\n\nxinference launch -n vicuna-v1.3 -f ggmlv3 -q q4_0\n\n    Model uid: 915845ee-2a04-11ee-8ed4-d29396a3f064\n\n\nA model UID is returned for you to use. Now you can use Xinference embeddings with LangChain:\n\nfrom langchain.embeddings import XinferenceEmbeddings\n\nxinference = XinferenceEmbeddings(\n    server_url=\"http://0.0.0.0:9997\", model_uid=\"915845ee-2a04-11ee-8ed4-d29396a3f064\"\n)\n\nquery_result = xinference.embed_query(\"This is a test query\")\n\ndoc_result = xinference.embed_documents([\"text A\", \"text B\"])\n\n\nLastly, terminate the model when you do not need to use it:\n\nxinference terminate --model-uid \"915845ee-2a04-11ee-8ed4-d29396a3f064\"\n\nPrevious\nVoyage AI\nNext\nVector stores"
}