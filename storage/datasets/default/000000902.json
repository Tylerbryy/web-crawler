{
	"title": "OpenSearch | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/integrations/vectorstores/opensearch",
	"html": "ComponentsVector storesOpenSearch\nOpenSearch\n\nOpenSearch is a scalable, flexible, and extensible open-source software suite for search, analytics, and observability applications licensed under Apache 2.0. OpenSearch is a distributed search and analytics engine based on Apache Lucene.\n\nThis notebook shows how to use functionality related to the OpenSearch database.\n\nTo run, you should have an OpenSearch instance up and running: see here for an easy Docker installation.\n\nsimilarity_search by default performs the Approximate k-NN Search which uses one of the several algorithms like lucene, nmslib, faiss recommended for large datasets. To perform brute force search we have other search methods known as Script Scoring and Painless Scripting. Check this for more details.\n\nInstallation‚Äã\n\nInstall the Python client.\n\npip install opensearch-py\n\n\nWe want to use OpenAIEmbeddings so we have to get the OpenAI API Key.\n\nimport getpass\nimport os\n\nos.environ[\"OPENAI_API_KEY\"] = getpass.getpass(\"OpenAI API Key:\")\n\nfrom langchain.document_loaders import TextLoader\nfrom langchain.embeddings.openai import OpenAIEmbeddings\nfrom langchain.text_splitter import CharacterTextSplitter\nfrom langchain.vectorstores import OpenSearchVectorSearch\n\nfrom langchain.document_loaders import TextLoader\n\nloader = TextLoader(\"../../modules/state_of_the_union.txt\")\ndocuments = loader.load()\ntext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)\ndocs = text_splitter.split_documents(documents)\n\nembeddings = OpenAIEmbeddings()\n\nsimilarity_search using Approximate k-NN‚Äã\n\nsimilarity_search using Approximate k-NN Search with Custom Parameters\n\ndocsearch = OpenSearchVectorSearch.from_documents(\n    docs, embeddings, opensearch_url=\"http://localhost:9200\"\n)\n\n# If using the default Docker installation, use this instantiation instead:\n# docsearch = OpenSearchVectorSearch.from_documents(\n#     docs,\n#     embeddings,\n#     opensearch_url=\"https://localhost:9200\",\n#     http_auth=(\"admin\", \"admin\"),\n#     use_ssl = False,\n#     verify_certs = False,\n#     ssl_assert_hostname = False,\n#     ssl_show_warn = False,\n# )\n\nquery = \"What did the president say about Ketanji Brown Jackson\"\ndocs = docsearch.similarity_search(query, k=10)\n\nprint(docs[0].page_content)\n\ndocsearch = OpenSearchVectorSearch.from_documents(\n    docs,\n    embeddings,\n    opensearch_url=\"http://localhost:9200\",\n    engine=\"faiss\",\n    space_type=\"innerproduct\",\n    ef_construction=256,\n    m=48,\n)\n\nquery = \"What did the president say about Ketanji Brown Jackson\"\ndocs = docsearch.similarity_search(query)\n\nprint(docs[0].page_content)\n\nsimilarity_search using Script Scoring‚Äã\n\nsimilarity_search using Script Scoring with Custom Parameters\n\ndocsearch = OpenSearchVectorSearch.from_documents(\n    docs, embeddings, opensearch_url=\"http://localhost:9200\", is_appx_search=False\n)\n\nquery = \"What did the president say about Ketanji Brown Jackson\"\ndocs = docsearch.similarity_search(\n    \"What did the president say about Ketanji Brown Jackson\",\n    k=1,\n    search_type=\"script_scoring\",\n)\n\nprint(docs[0].page_content)\n\nsimilarity_search using Painless Scripting‚Äã\n\nsimilarity_search using Painless Scripting with Custom Parameters\n\ndocsearch = OpenSearchVectorSearch.from_documents(\n    docs, embeddings, opensearch_url=\"http://localhost:9200\", is_appx_search=False\n)\nfilter = {\"bool\": {\"filter\": {\"term\": {\"text\": \"smuggling\"}}}}\nquery = \"What did the president say about Ketanji Brown Jackson\"\ndocs = docsearch.similarity_search(\n    \"What did the president say about Ketanji Brown Jackson\",\n    search_type=\"painless_scripting\",\n    space_type=\"cosineSimilarity\",\n    pre_filter=filter,\n)\n\nprint(docs[0].page_content)\n\nMaximum marginal relevance search (MMR)‚Äã\n\nIf you‚Äôd like to look up for some similar documents, but you‚Äôd also like to receive diverse results, MMR is method you should consider. Maximal marginal relevance optimizes for similarity to query AND diversity among selected documents.\n\nquery = \"What did the president say about Ketanji Brown Jackson\"\ndocs = docsearch.max_marginal_relevance_search(query, k=2, fetch_k=10, lambda_param=0.5)\n\nUsing a preexisting OpenSearch instance‚Äã\n\nIt's also possible to use a preexisting OpenSearch instance with documents that already have vectors present.\n\n# this is just an example, you would need to change these values to point to another opensearch instance\ndocsearch = OpenSearchVectorSearch(\n    index_name=\"index-*\",\n    embedding_function=embeddings,\n    opensearch_url=\"http://localhost:9200\",\n)\n\n# you can specify custom field names to match the fields you're using to store your embedding, document text value, and metadata\ndocs = docsearch.similarity_search(\n    \"Who was asking about getting lunch today?\",\n    search_type=\"script_scoring\",\n    space_type=\"cosinesimil\",\n    vector_field=\"message_embedding\",\n    text_field=\"message\",\n    metadata_field=\"message_metadata\",\n)\n\nUsing AOSS (Amazon OpenSearch Service Serverless)‚Äã\n# This is just an example to show how to use AOSS with faiss engine and efficient_filter, you need to set proper values.\n\nservice = \"aoss\"  # must set the service as 'aoss'\nregion = \"us-east-2\"\ncredentials = boto3.Session(\n    aws_access_key_id=\"xxxxxx\", aws_secret_access_key=\"xxxxx\"\n).get_credentials()\nawsauth = AWS4Auth(\"xxxxx\", \"xxxxxx\", region, service, session_token=credentials.token)\n\ndocsearch = OpenSearchVectorSearch.from_documents(\n    docs,\n    embeddings,\n    opensearch_url=\"host url\",\n    http_auth=awsauth,\n    timeout=300,\n    use_ssl=True,\n    verify_certs=True,\n    connection_class=RequestsHttpConnection,\n    index_name=\"test-index-using-aoss\",\n    engine=\"faiss\",\n)\n\ndocs = docsearch.similarity_search(\n    \"What is feature selection\",\n    efficient_filter=filter,\n    k=200,\n)\n\nUsing AOS (Amazon OpenSearch Service)‚Äã\n# This is just an example to show how to use AOS , you need to set proper values.\n\nservice = \"es\"  # must set the service as 'es'\nregion = \"us-east-2\"\ncredentials = boto3.Session(\n    aws_access_key_id=\"xxxxxx\", aws_secret_access_key=\"xxxxx\"\n).get_credentials()\nawsauth = AWS4Auth(\"xxxxx\", \"xxxxxx\", region, service, session_token=credentials.token)\n\ndocsearch = OpenSearchVectorSearch.from_documents(\n    docs,\n    embeddings,\n    opensearch_url=\"host url\",\n    http_auth=awsauth,\n    timeout=300,\n    use_ssl=True,\n    verify_certs=True,\n    connection_class=RequestsHttpConnection,\n    index_name=\"test-index\",\n)\n\ndocs = docsearch.similarity_search(\n    \"What is feature selection\",\n    k=200,\n)\n\nPrevious\nNucliaDB\nNext\nPostgres Embedding"
}