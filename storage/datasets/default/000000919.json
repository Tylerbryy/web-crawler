{
	"title": "Typesense | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/integrations/vectorstores/typesense",
	"html": "ComponentsVector storesTypesense\nTypesense\n\nTypesense is an open-source, in-memory search engine, that you can either self-host or run on Typesense Cloud.\n\nTypesense focuses on performance by storing the entire index in RAM (with a backup on disk) and also focuses on providing an out-of-the-box developer experience by simplifying available options and setting good defaults.\n\nIt also lets you combine attribute-based filtering together with vector queries, to fetch the most relevant documents.\n\nThis notebook shows you how to use Typesense as your VectorStore.\n\nLet's first install our dependencies:\n\npip install typesense openapi-schema-pydantic openai tiktoken\n\n\nWe want to use OpenAIEmbeddings so we have to get the OpenAI API Key.\n\nimport getpass\nimport os\n\nos.environ[\"OPENAI_API_KEY\"] = getpass.getpass(\"OpenAI API Key:\")\n\nfrom langchain.document_loaders import TextLoader\nfrom langchain.embeddings.openai import OpenAIEmbeddings\nfrom langchain.text_splitter import CharacterTextSplitter\nfrom langchain.vectorstores import Typesense\n\n\nLet's import our test dataset:\n\nloader = TextLoader(\"../../modules/state_of_the_union.txt\")\ndocuments = loader.load()\ntext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)\ndocs = text_splitter.split_documents(documents)\n\nembeddings = OpenAIEmbeddings()\n\ndocsearch = Typesense.from_documents(\n    docs,\n    embeddings,\n    typesense_client_params={\n        \"host\": \"localhost\",  # Use xxx.a1.typesense.net for Typesense Cloud\n        \"port\": \"8108\",  # Use 443 for Typesense Cloud\n        \"protocol\": \"http\",  # Use https for Typesense Cloud\n        \"typesense_api_key\": \"xyz\",\n        \"typesense_collection_name\": \"lang-chain\",\n    },\n)\n\nSimilarity Search‚Äã\nquery = \"What did the president say about Ketanji Brown Jackson\"\nfound_docs = docsearch.similarity_search(query)\n\nprint(found_docs[0].page_content)\n\nTypesense as a Retriever‚Äã\n\nTypesense, as all the other vector stores, is a LangChain Retriever, by using cosine similarity.\n\nretriever = docsearch.as_retriever()\nretriever\n\nquery = \"What did the president say about Ketanji Brown Jackson\"\nretriever.get_relevant_documents(query)[0]\n\nPrevious\nTimescale Vector (Postgres)\nNext\nUSearch"
}