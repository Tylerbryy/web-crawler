{
	"title": "SearxNG Search API | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/integrations/providers/searx",
	"html": "ProvidersMoreSearxNG Search API\nSearxNG Search API\n\nThis page covers how to use the SearxNG search API within LangChain. It is broken into two parts: installation and setup, and then references to the specific SearxNG API wrapper.\n\nInstallation and Setup‚Äã\n\nWhile it is possible to utilize the wrapper in conjunction with public searx instances these instances frequently do not permit API access (see note on output format below) and have limitations on the frequency of requests. It is recommended to opt for a self-hosted instance instead.\n\nSelf Hosted Instance:‚Äã\n\nSee this page for installation instructions.\n\nWhen you install SearxNG, the only active output format by default is the HTML format. You need to activate the json format to use the API. This can be done by adding the following line to the settings.yml file:\n\nsearch:\n    formats:\n        - html\n        - json\n\n\nYou can make sure that the API is working by issuing a curl request to the API endpoint:\n\ncurl -kLX GET --data-urlencode q='langchain' -d format=json http://localhost:8888\n\nThis should return a JSON object with the results.\n\nWrappers‚Äã\nUtility‚Äã\n\nTo use the wrapper we need to pass the host of the SearxNG instance to the wrapper with:\n\n1. the named parameter `searx_host` when creating the instance.\n2. exporting the environment variable `SEARXNG_HOST`.\n\n\nYou can use the wrapper to get results from a SearxNG instance.\n\nfrom langchain.utilities import SearxSearchWrapper\ns = SearxSearchWrapper(searx_host=\"http://localhost:8888\")\ns.run(\"what is a large language model?\")\n\nTool‚Äã\n\nYou can also load this wrapper as a Tool (to use with an Agent).\n\nYou can do this with:\n\nfrom langchain.agents import load_tools\ntools = load_tools([\"searx-search\"],\n                    searx_host=\"http://localhost:8888\",\n                    engines=[\"github\"])\n\n\nNote that we could optionally pass custom engines to use.\n\nIf you want to obtain results with metadata as json you can use:\n\ntools = load_tools([\"searx-search-results-json\"],\n                    searx_host=\"http://localhost:8888\",\n                    num_results=5)\n\nQuickly creating tools‚Äã\n\nThis examples showcases a quick way to create multiple tools from the same wrapper.\n\nfrom langchain.tools.searx_search.tool import SearxSearchResults\n\nwrapper = SearxSearchWrapper(searx_host=\"**\")\ngithub_tool = SearxSearchResults(name=\"Github\", wrapper=wrapper,\n                            kwargs = {\n                                \"engines\": [\"github\"],\n                                })\n\narxiv_tool = SearxSearchResults(name=\"Arxiv\", wrapper=wrapper,\n                            kwargs = {\n                                \"engines\": [\"arxiv\"]\n                                })\n\n\nFor more information on tools, see this page.\n\nPrevious\nSearchApi\nNext\nSerpAPI"
}