{
	"title": "Streamlit | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/integrations/callbacks/streamlit",
	"html": "ComponentsCallbacksStreamlit\nStreamlit\n\nStreamlit is a faster way to build and share data apps. Streamlit turns data scripts into shareable web apps in minutes. All in pure Python. No front‚Äëend experience required. See more examples at streamlit.io/generative-ai.\n\nIn this guide we will demonstrate how to use StreamlitCallbackHandler to display the thoughts and actions of an agent in an interactive Streamlit app. Try it out with the running app below using the MRKL agent:\n\nInstallation and Setup‚Äã\npip install langchain streamlit\n\n\nYou can run streamlit hello to load a sample app and validate your install succeeded. See full instructions in Streamlit's Getting started documentation.\n\nDisplay thoughts and actions‚Äã\n\nTo create a StreamlitCallbackHandler, you just need to provide a parent container to render the output.\n\nfrom langchain.callbacks import StreamlitCallbackHandler\nimport streamlit as st\n\nst_callback = StreamlitCallbackHandler(st.container())\n\n\nAdditional keyword arguments to customize the display behavior are described in the API reference.\n\nScenario 1: Using an Agent with Tools‚Äã\n\nThe primary supported use case today is visualizing the actions of an Agent with Tools (or Agent Executor). You can create an agent in your Streamlit app and simply pass the StreamlitCallbackHandler to agent.run() in order to visualize the thoughts and actions live in your app.\n\nfrom langchain.llms import OpenAI\nfrom langchain.agents import AgentType, initialize_agent, load_tools\nfrom langchain.callbacks import StreamlitCallbackHandler\nimport streamlit as st\n\nllm = OpenAI(temperature=0, streaming=True)\ntools = load_tools([\"ddg-search\"])\nagent = initialize_agent(\n    tools, llm, agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION, verbose=True\n)\n\nif prompt := st.chat_input():\n    st.chat_message(\"user\").write(prompt)\n    with st.chat_message(\"assistant\"):\n        st_callback = StreamlitCallbackHandler(st.container())\n        response = agent.run(prompt, callbacks=[st_callback])\n        st.write(response)\n\n\nNote: You will need to set OPENAI_API_KEY for the above app code to run successfully. The easiest way to do this is via Streamlit secrets.toml, or any other local ENV management tool.\n\nAdditional scenarios‚Äã\n\nCurrently StreamlitCallbackHandler is geared towards use with a LangChain Agent Executor. Support for additional agent types, use directly with Chains, etc will be added in the future.\n\nYou may also be interested in using StreamlitChatMessageHistory for LangChain.\n\nPrevious\nSageMaker Tracking\nNext\nTrubrics"
}