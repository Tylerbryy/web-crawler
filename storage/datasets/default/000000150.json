{
	"title": "Indexing | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/modules/data_connection/indexing",
	"html": "ModulesRetrievalIndexing\nIndexing\n\nHere, we will look at a basic indexing workflow using the LangChain indexing API.\n\nThe indexing API lets you load and keep in sync documents from any source into a vector store. Specifically, it helps:\n\nAvoid writing duplicated content into the vector store\nAvoid re-writing unchanged content\nAvoid re-computing embeddings over unchanged content\n\nAll of which should save you time and money, as well as improve your vector search results.\n\nCrucially, the indexing API will work even with documents that have gone through several transformation steps (e.g., via text chunking) with respect to the original source documents.\n\nHow it works‚Äã\n\nLangChain indexing makes use of a record manager (RecordManager) that keeps track of document writes into the vector store.\n\nWhen indexing content, hashes are computed for each document, and the following information is stored in the record manager:\n\nthe document hash (hash of both page content and metadata)\nwrite time\nthe source id -- each document should include information in its metadata to allow us to determine the ultimate source of this document\nDeletion modes‚Äã\n\nWhen indexing documents into a vector store, it's possible that some existing documents in the vector store should be deleted. In certain situations you may want to remove any existing documents that are derived from the same sources as the new documents being indexed. In others you may want to delete all existing documents wholesale. The indexing API deletion modes let you pick the behavior you want:\n\nCleanup Mode\tDe-Duplicates Content\tParallelizable\tCleans Up Deleted Source Docs\tCleans Up Mutations of Source Docs and/or Derived Docs\tClean Up Timing\nNone\t‚úÖ\t‚úÖ\t‚ùå\t‚ùå\t-\nIncremental\t‚úÖ\t‚úÖ\t‚ùå\t‚úÖ\tContinuously\nFull\t‚úÖ\t‚ùå\t‚úÖ\t‚úÖ\tAt end of indexing\n\nNone does not do any automatic clean up, allowing the user to manually do clean up of old content.\n\nincremental and full offer the following automated clean up:\n\nIf the content of the source document or derived documents has changed, both incremental or full modes will clean up (delete) previous versions of the content.\nIf the source document has been deleted (meaning it is not included in the documents currently being indexed), the full cleanup mode will delete it from the vector store correctly, but the incremental mode will not.\n\nWhen content is mutated (e.g., the source PDF file was revised) there will be a period of time during indexing when both the new and old versions may be returned to the user. This happens after the new content was written, but before the old version was deleted.\n\nincremental indexing minimizes this period of time as it is able to do clean up continuously, as it writes.\nfull mode does the clean up after all batches have been written.\nRequirements‚Äã\nDo not use with a store that has been pre-populated with content independently of the indexing API, as the record manager will not know that records have been inserted previously.\nOnly works with LangChain vectorstore's that support:\ndocument addition by id (add_documents method with ids argument)\ndelete by id (delete method with ids argument)\n\nCompatible Vectorstores: AnalyticDB, AstraDB, AwaDB, Bagel, Cassandra, Chroma, DashVector, DeepLake, Dingo, ElasticVectorSearch, ElasticsearchStore, FAISS, MyScale, PGVector, Pinecone, Qdrant, Redis, ScaNN, SupabaseVectorStore, TimescaleVector, Vald, Vearch, VespaStore, Weaviate, ZepVectorStore.\n\nCaution‚Äã\n\nThe record manager relies on a time-based mechanism to determine what content can be cleaned up (when using full or incremental cleanup modes).\n\nIf two tasks run back-to-back, and the first task finishes before the clock time changes, then the second task may not be able to clean up content.\n\nThis is unlikely to be an issue in actual settings for the following reasons:\n\nThe RecordManager uses higher resolution timestamps.\nThe data would need to change between the first and the second tasks runs, which becomes unlikely if the time interval between the tasks is small.\nIndexing tasks typically take more than a few ms.\nQuickstart‚Äã\nfrom langchain.embeddings import OpenAIEmbeddings\nfrom langchain.indexes import SQLRecordManager, index\nfrom langchain.schema import Document\nfrom langchain.vectorstores import ElasticsearchStore\n\n\nInitialize a vector store and set up the embeddings:\n\ncollection_name = \"test_index\"\n\nembedding = OpenAIEmbeddings()\n\nvectorstore = ElasticsearchStore(\n    es_url=\"http://localhost:9200\", index_name=\"test_index\", embedding=embedding\n)\n\n\nInitialize a record manager with an appropriate namespace.\n\nSuggestion: Use a namespace that takes into account both the vector store and the collection name in the vector store; e.g., 'redis/my_docs', 'chromadb/my_docs' or 'postgres/my_docs'.\n\nnamespace = f\"elasticsearch/{collection_name}\"\nrecord_manager = SQLRecordManager(\n    namespace, db_url=\"sqlite:///record_manager_cache.sql\"\n)\n\n\nCreate a schema before using the record manager.\n\nrecord_manager.create_schema()\n\n\nLet's index some test documents:\n\ndoc1 = Document(page_content=\"kitty\", metadata={\"source\": \"kitty.txt\"})\ndoc2 = Document(page_content=\"doggy\", metadata={\"source\": \"doggy.txt\"})\n\n\nIndexing into an empty vector store:\n\ndef _clear():\n    \"\"\"Hacky helper method to clear content. See the `full` mode section to to understand why it works.\"\"\"\n    index([], record_manager, vectorstore, cleanup=\"full\", source_id_key=\"source\")\n\nNone deletion mode‚Äã\n\nThis mode does not do automatic clean up of old versions of content; however, it still takes care of content de-duplication.\n\n_clear()\n\nindex(\n    [doc1, doc1, doc1, doc1, doc1],\n    record_manager,\n    vectorstore,\n    cleanup=None,\n    source_id_key=\"source\",\n)\n\n    {'num_added': 1, 'num_updated': 0, 'num_skipped': 0, 'num_deleted': 0}\n\n_clear()\n\nindex([doc1, doc2], record_manager, vectorstore, cleanup=None, source_id_key=\"source\")\n\n    {'num_added': 2, 'num_updated': 0, 'num_skipped': 0, 'num_deleted': 0}\n\n\nSecond time around all content will be skipped:\n\nindex([doc1, doc2], record_manager, vectorstore, cleanup=None, source_id_key=\"source\")\n\n    {'num_added': 0, 'num_updated': 0, 'num_skipped': 2, 'num_deleted': 0}\n\n\"incremental\" deletion mode‚Äã\n_clear()\n\nindex(\n    [doc1, doc2],\n    record_manager,\n    vectorstore,\n    cleanup=\"incremental\",\n    source_id_key=\"source\",\n)\n\n    {'num_added': 2, 'num_updated': 0, 'num_skipped': 0, 'num_deleted': 0}\n\n\nIndexing again should result in both documents getting skipped -- also skipping the embedding operation!\n\nindex(\n    [doc1, doc2],\n    record_manager,\n    vectorstore,\n    cleanup=\"incremental\",\n    source_id_key=\"source\",\n)\n\n    {'num_added': 0, 'num_updated': 0, 'num_skipped': 2, 'num_deleted': 0}\n\n\nIf we provide no documents with incremental indexing mode, nothing will change.\n\nindex([], record_manager, vectorstore, cleanup=\"incremental\", source_id_key=\"source\")\n\n    {'num_added': 0, 'num_updated': 0, 'num_skipped': 0, 'num_deleted': 0}\n\n\nIf we mutate a document, the new version will be written and all old versions sharing the same source will be deleted.\n\nchanged_doc_2 = Document(page_content=\"puppy\", metadata={\"source\": \"doggy.txt\"})\n\nindex(\n    [changed_doc_2],\n    record_manager,\n    vectorstore,\n    cleanup=\"incremental\",\n    source_id_key=\"source\",\n)\n\n    {'num_added': 1, 'num_updated': 0, 'num_skipped': 0, 'num_deleted': 1}\n\n\"full\" deletion mode‚Äã\n\nIn full mode the user should pass the full universe of content that should be indexed into the indexing function.\n\nAny documents that are not passed into the indexing function and are present in the vectorstore will be deleted!\n\nThis behavior is useful to handle deletions of source documents.\n\n_clear()\n\nall_docs = [doc1, doc2]\n\nindex(all_docs, record_manager, vectorstore, cleanup=\"full\", source_id_key=\"source\")\n\n    {'num_added': 2, 'num_updated': 0, 'num_skipped': 0, 'num_deleted': 0}\n\n\nSay someone deleted the first doc:\n\ndel all_docs[0]\n\nall_docs\n\n    [Document(page_content='doggy', metadata={'source': 'doggy.txt'})]\n\n\nUsing full mode will clean up the deleted content as well.\n\nindex(all_docs, record_manager, vectorstore, cleanup=\"full\", source_id_key=\"source\")\n\n    {'num_added': 0, 'num_updated': 0, 'num_skipped': 1, 'num_deleted': 1}\n\nSource‚Äã\n\nThe metadata attribute contains a field called source. This source should be pointing at the ultimate provenance associated with the given document.\n\nFor example, if these documents are representing chunks of some parent document, the source for both documents should be the same and reference the parent document.\n\nIn general, source should always be specified. Only use a None, if you never intend to use incremental mode, and for some reason can't specify the source field correctly.\n\nfrom langchain.text_splitter import CharacterTextSplitter\n\ndoc1 = Document(\n    page_content=\"kitty kitty kitty kitty kitty\", metadata={\"source\": \"kitty.txt\"}\n)\ndoc2 = Document(page_content=\"doggy doggy the doggy\", metadata={\"source\": \"doggy.txt\"})\n\nnew_docs = CharacterTextSplitter(\n    separator=\"t\", keep_separator=True, chunk_size=12, chunk_overlap=2\n).split_documents([doc1, doc2])\nnew_docs\n\n    [Document(page_content='kitty kit', metadata={'source': 'kitty.txt'}),\n     Document(page_content='tty kitty ki', metadata={'source': 'kitty.txt'}),\n     Document(page_content='tty kitty', metadata={'source': 'kitty.txt'}),\n     Document(page_content='doggy doggy', metadata={'source': 'doggy.txt'}),\n     Document(page_content='the doggy', metadata={'source': 'doggy.txt'})]\n\n_clear()\n\nindex(\n    new_docs,\n    record_manager,\n    vectorstore,\n    cleanup=\"incremental\",\n    source_id_key=\"source\",\n)\n\n    {'num_added': 5, 'num_updated': 0, 'num_skipped': 0, 'num_deleted': 0}\n\nchanged_doggy_docs = [\n    Document(page_content=\"woof woof\", metadata={\"source\": \"doggy.txt\"}),\n    Document(page_content=\"woof woof woof\", metadata={\"source\": \"doggy.txt\"}),\n]\n\n\nThis should delete the old versions of documents associated with doggy.txt source and replace them with the new versions.\n\nindex(\n    changed_doggy_docs,\n    record_manager,\n    vectorstore,\n    cleanup=\"incremental\",\n    source_id_key=\"source\",\n)\n\n    {'num_added': 0, 'num_updated': 0, 'num_skipped': 2, 'num_deleted': 2}\n\nvectorstore.similarity_search(\"dog\", k=30)\n\n    [Document(page_content='tty kitty', metadata={'source': 'kitty.txt'}),\n     Document(page_content='tty kitty ki', metadata={'source': 'kitty.txt'}),\n     Document(page_content='kitty kit', metadata={'source': 'kitty.txt'})]\n\nUsing with loaders‚Äã\n\nIndexing can accept either an iterable of documents or else any loader.\n\nAttention: The loader must set source keys correctly.\n\nfrom langchain.document_loaders.base import BaseLoader\n\n\nclass MyCustomLoader(BaseLoader):\n    def lazy_load(self):\n        text_splitter = CharacterTextSplitter(\n            separator=\"t\", keep_separator=True, chunk_size=12, chunk_overlap=2\n        )\n        docs = [\n            Document(page_content=\"woof woof\", metadata={\"source\": \"doggy.txt\"}),\n            Document(page_content=\"woof woof woof\", metadata={\"source\": \"doggy.txt\"}),\n        ]\n        yield from text_splitter.split_documents(docs)\n\n    def load(self):\n        return list(self.lazy_load())\n\n_clear()\n\nloader = MyCustomLoader()\n\nloader.load()\n\n    [Document(page_content='woof woof', metadata={'source': 'doggy.txt'}),\n     Document(page_content='woof woof woof', metadata={'source': 'doggy.txt'})]\n\nindex(loader, record_manager, vectorstore, cleanup=\"full\", source_id_key=\"source\")\n\n    {'num_added': 2, 'num_updated': 0, 'num_skipped': 0, 'num_deleted': 0}\n\nvectorstore.similarity_search(\"dog\", k=30)\n\n    [Document(page_content='woof woof', metadata={'source': 'doggy.txt'}),\n     Document(page_content='woof woof woof', metadata={'source': 'doggy.txt'})]\n\nPrevious\nWebResearchRetriever\nNext\nAgents"
}