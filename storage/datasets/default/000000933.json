{
	"title": "Select by maximal marginal relevance (MMR) | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/modules/model_io/prompts/example_selectors/mmr",
	"html": "ModulesModel I/OPromptsExample selectorsSelect by maximal marginal relevance (MMR)\nSelect by maximal marginal relevance (MMR)\n\nThe MaxMarginalRelevanceExampleSelector selects examples based on a combination of which examples are most similar to the inputs, while also optimizing for diversity. It does this by finding the examples with the embeddings that have the greatest cosine similarity with the inputs, and then iteratively adding them while penalizing them for closeness to already selected examples.\n\nfrom langchain.embeddings import OpenAIEmbeddings\nfrom langchain.prompts import FewShotPromptTemplate, PromptTemplate\nfrom langchain.prompts.example_selector import (\n    MaxMarginalRelevanceExampleSelector,\n    SemanticSimilarityExampleSelector,\n)\nfrom langchain.vectorstores import FAISS\n\nexample_prompt = PromptTemplate(\n    input_variables=[\"input\", \"output\"],\n    template=\"Input: {input}\\nOutput: {output}\",\n)\n\n# Examples of a pretend task of creating antonyms.\nexamples = [\n    {\"input\": \"happy\", \"output\": \"sad\"},\n    {\"input\": \"tall\", \"output\": \"short\"},\n    {\"input\": \"energetic\", \"output\": \"lethargic\"},\n    {\"input\": \"sunny\", \"output\": \"gloomy\"},\n    {\"input\": \"windy\", \"output\": \"calm\"},\n]\n\nexample_selector = MaxMarginalRelevanceExampleSelector.from_examples(\n    # The list of examples available to select from.\n    examples,\n    # The embedding class used to produce embeddings which are used to measure semantic similarity.\n    OpenAIEmbeddings(),\n    # The VectorStore class that is used to store the embeddings and do a similarity search over.\n    FAISS,\n    # The number of examples to produce.\n    k=2,\n)\nmmr_prompt = FewShotPromptTemplate(\n    # We provide an ExampleSelector instead of examples.\n    example_selector=example_selector,\n    example_prompt=example_prompt,\n    prefix=\"Give the antonym of every input\",\n    suffix=\"Input: {adjective}\\nOutput:\",\n    input_variables=[\"adjective\"],\n)\n\n# Input is a feeling, so should select the happy/sad example as the first one\nprint(mmr_prompt.format(adjective=\"worried\"))\n\n    Give the antonym of every input\n    \n    Input: happy\n    Output: sad\n    \n    Input: windy\n    Output: calm\n    \n    Input: worried\n    Output:\n\n# Let's compare this to what we would just get if we went solely off of similarity,\n# by using SemanticSimilarityExampleSelector instead of MaxMarginalRelevanceExampleSelector.\nexample_selector = SemanticSimilarityExampleSelector.from_examples(\n    # The list of examples available to select from.\n    examples,\n    # The embedding class used to produce embeddings which are used to measure semantic similarity.\n    OpenAIEmbeddings(),\n    # The VectorStore class that is used to store the embeddings and do a similarity search over.\n    FAISS,\n    # The number of examples to produce.\n    k=2,\n)\nsimilar_prompt = FewShotPromptTemplate(\n    # We provide an ExampleSelector instead of examples.\n    example_selector=example_selector,\n    example_prompt=example_prompt,\n    prefix=\"Give the antonym of every input\",\n    suffix=\"Input: {adjective}\\nOutput:\",\n    input_variables=[\"adjective\"],\n)\nprint(similar_prompt.format(adjective=\"worried\"))\n\n    Give the antonym of every input\n    \n    Input: happy\n    Output: sad\n    \n    Input: sunny\n    Output: gloomy\n    \n    Input: worried\n    Output:\n\nPrevious\nSelect by length\nNext\nSelect by n-gram overlap"
}