{
	"title": "WhatsApp | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/integrations/chat_loaders/whatsapp",
	"html": "ComponentsChat loadersWhatsApp\nWhatsApp\n\nThis notebook shows how to use the WhatsApp chat loader. This class helps map exported WhatsApp conversations to LangChain chat messages.\n\nThe process has three steps:\n\nExport the chat conversations to computer\nCreate the WhatsAppChatLoader with the file path pointed to the json file or directory of JSON files\nCall loader.load() (or loader.lazy_load()) to perform the conversion.\n1. Create message dump‚Äã\n\nTo make the export of your WhatsApp conversation(s), complete the following steps:\n\nOpen the target conversation\nClick the three dots in the top right corner and select \"More\".\nThen select \"Export chat\" and choose \"Without media\".\n\nAn example of the data format for each conversation is below:\n\nwhatsapp_chat.txt\n[8/15/23, 9:12:33 AM] Dr. Feather: ‚ÄéMessages and calls are end-to-end encrypted. No one outside of this chat, not even WhatsApp, can read or listen to them.\n[8/15/23, 9:12:43 AM] Dr. Feather: I spotted a rare Hyacinth Macaw yesterday in the Amazon Rainforest. Such a magnificent creature!\n‚Äé[8/15/23, 9:12:48 AM] Dr. Feather: ‚Äéimage omitted\n[8/15/23, 9:13:15 AM] Jungle Jane: That's stunning! Were you able to observe its behavior?\n‚Äé[8/15/23, 9:13:23 AM] Dr. Feather: ‚Äéimage omitted\n[8/15/23, 9:14:02 AM] Dr. Feather: Yes, it seemed quite social with other macaws. They're known for their playful nature.\n[8/15/23, 9:14:15 AM] Jungle Jane: How's the research going on parrot communication?\n‚Äé[8/15/23, 9:14:30 AM] Dr. Feather: ‚Äéimage omitted\n[8/15/23, 9:14:50 AM] Dr. Feather: It's progressing well. We're learning so much about how they use sound and color to communicate.\n[8/15/23, 9:15:10 AM] Jungle Jane: That's fascinating! Can't wait to read your paper on it.\n[8/15/23, 9:15:20 AM] Dr. Feather: Thank you! I'll send you a draft soon.\n[8/15/23, 9:25:16 PM] Jungle Jane: Looking forward to it! Keep up the great work.\n\n2. Create the Chat Loader‚Äã\n\nThe WhatsAppChatLoader accepts the resulting zip file, unzipped directory, or the path to any of the chat .txt files therein.\n\nProvide that as well as the user name you want to take on the role of \"AI\" when fine-tuning.\n\nfrom langchain.chat_loaders.whatsapp import WhatsAppChatLoader\n\nloader = WhatsAppChatLoader(\n    path=\"./whatsapp_chat.txt\",\n)\n\n3. Load messages‚Äã\n\nThe load() (or lazy_load) methods return a list of \"ChatSessions\" that currently store the list of messages per loaded conversation.\n\nfrom typing import List\n\nfrom langchain.chat_loaders.base import ChatSession\nfrom langchain.chat_loaders.utils import (\n    map_ai_messages,\n    merge_chat_runs,\n)\n\nraw_messages = loader.lazy_load()\n# Merge consecutive messages from the same sender into a single message\nmerged_messages = merge_chat_runs(raw_messages)\n# Convert messages from \"Dr. Feather\" to AI messages\nmessages: List[ChatSession] = list(\n    map_ai_messages(merged_messages, sender=\"Dr. Feather\")\n)\n\n    [{'messages': [AIMessage(content='I spotted a rare Hyacinth Macaw yesterday in the Amazon Rainforest. Such a magnificent creature!', additional_kwargs={'sender': 'Dr. Feather', 'events': [{'message_time': '8/15/23, 9:12:43 AM'}]}, example=False),\n       HumanMessage(content=\"That's stunning! Were you able to observe its behavior?\", additional_kwargs={'sender': 'Jungle Jane', 'events': [{'message_time': '8/15/23, 9:13:15 AM'}]}, example=False),\n       AIMessage(content=\"Yes, it seemed quite social with other macaws. They're known for their playful nature.\", additional_kwargs={'sender': 'Dr. Feather', 'events': [{'message_time': '8/15/23, 9:14:02 AM'}]}, example=False),\n       HumanMessage(content=\"How's the research going on parrot communication?\", additional_kwargs={'sender': 'Jungle Jane', 'events': [{'message_time': '8/15/23, 9:14:15 AM'}]}, example=False),\n       AIMessage(content=\"It's progressing well. We're learning so much about how they use sound and color to communicate.\", additional_kwargs={'sender': 'Dr. Feather', 'events': [{'message_time': '8/15/23, 9:14:50 AM'}]}, example=False),\n       HumanMessage(content=\"That's fascinating! Can't wait to read your paper on it.\", additional_kwargs={'sender': 'Jungle Jane', 'events': [{'message_time': '8/15/23, 9:15:10 AM'}]}, example=False),\n       AIMessage(content=\"Thank you! I'll send you a draft soon.\", additional_kwargs={'sender': 'Dr. Feather', 'events': [{'message_time': '8/15/23, 9:15:20 AM'}]}, example=False),\n       HumanMessage(content='Looking forward to it! Keep up the great work.', additional_kwargs={'sender': 'Jungle Jane', 'events': [{'message_time': '8/15/23, 9:25:16 PM'}]}, example=False)]}]\n\nNext Steps‚Äã\n\nYou can then use these messages how you see fit, such as fine-tuning a model, few-shot example selection, or directly make predictions for the next message.\n\nfrom langchain.chat_models import ChatOpenAI\n\nllm = ChatOpenAI()\n\nfor chunk in llm.stream(messages[0][\"messages\"]):\n    print(chunk.content, end=\"\", flush=True)\n\n    Thank you for the encouragement! I'll do my best to continue studying and sharing fascinating insights about parrot communication.\n\nPrevious\nWeChat"
}