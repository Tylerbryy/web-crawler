{
	"title": "Hybrid Search in Weaviate | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/templates/hybrid-search-weaviate",
	"html": "TemplatesHybrid Search in Weaviate\nHybrid Search in Weaviate\n\nThis template shows you how to use the hybrid search feature in Weaviate. Hybrid search combines multiple search algorithms to improve the accuracy and relevance of search results.\n\nWeaviate uses both sparse and dense vectors to represent the meaning and context of search queries and documents. The results use a combination of bm25 and vector search ranking to return the top results.\n\nConfigurations‚Äã\n\nConnect to your hosted Weaviate Vectorstore by setting a few env variables in chain.py:\n\nWEAVIATE_ENVIRONMENT\nWEAVIATE_API_KEY\n\nYou will also need to set your OPENAI_API_KEY to use the OpenAI models.\n\nGet Started‚Äã\n\nTo use this package, you should first have the LangChain CLI installed:\n\npip install -U langchain-cli\n\n\nTo create a new LangChain project and install this as the only package, you can do:\n\nlangchain app new my-app --package hybrid-search-weaviate\n\n\nIf you want to add this to an existing project, you can just run:\n\nlangchain app add hybrid-search-weaviate\n\n\nAnd add the following code to your server.py file:\n\nfrom hybrid_search_weaviate import chain as hybrid_search_weaviate_chain\n\nadd_routes(app, hybrid_search_weaviate_chain, path=\"/hybrid-search-weaviate\")\n\n\n(Optional) Let's now configure LangSmith. LangSmith will help us trace, monitor and debug LangChain applications. LangSmith is currently in private beta, you can sign up here. If you don't have access, you can skip this section\n\nexport LANGCHAIN_TRACING_V2=true\nexport LANGCHAIN_API_KEY=<your-api-key>\nexport LANGCHAIN_PROJECT=<your-project>  # if not specified, defaults to \"default\"\n\n\nIf you are inside this directory, then you can spin up a LangServe instance directly by:\n\nlangchain serve\n\n\nThis will start the FastAPI app with a server is running locally at http://localhost:8000\n\nWe can see all templates at http://127.0.0.1:8000/docs We can access the playground at http://127.0.0.1:8000/hybrid-search-weaviate/playground\n\nWe can access the template from code with:\n\nfrom langserve.client import RemoteRunnable\n\nrunnable = RemoteRunnable(\"http://localhost:8000/hybrid-search-weaviate\")\n\nPrevious\nguardrails-output-parser\nNext\nhyde"
}