{
	"title": "Xata | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/integrations/memory/xata_chat_message_history",
	"html": "ComponentsMemoryXata\nXata\n\nXata is a serverless data platform, based on PostgreSQL and Elasticsearch. It provides a Python SDK for interacting with your database, and a UI for managing your data. With the XataChatMessageHistory class, you can use Xata databases for longer-term persistence of chat sessions.\n\nThis notebook covers:\n\nA simple example showing what XataChatMessageHistory does.\nA more complex example using a REACT agent that answer questions based on a knowledge based or documentation (stored in Xata as a vector store) and also having a long-term searchable history of its past messages (stored in Xata as a memory store)\nSetup‚Äã\nCreate a database‚Äã\n\nIn the Xata UI create a new database. You can name it whatever you want, in this notepad we'll use langchain. The Langchain integration can auto-create the table used for storying the memory, and this is what we'll use in this example. If you want to pre-create the table, ensure it has the right schema and set create_table to False when creating the class. Pre-creating the table saves one round-trip to the database during each session initialization.\n\nLet's first install our dependencies:\n\npip install xata openai langchain\n\n\nNext, we need to get the environment variables for Xata. You can create a new API key by visiting your account settings. To find the database URL, go to the Settings page of the database that you have created. The database URL should look something like this: https://demo-uni3q8.eu-west-1.xata.sh/db/langchain.\n\nimport getpass\n\napi_key = getpass.getpass(\"Xata API key: \")\ndb_url = input(\"Xata database URL (copy it from your DB settings):\")\n\nCreate a simple memory store‚Äã\n\nTo test the memory store functionality in isolation, let's use the following code snippet:\n\nfrom langchain.memory import XataChatMessageHistory\n\nhistory = XataChatMessageHistory(\n    session_id=\"session-1\", api_key=api_key, db_url=db_url, table_name=\"memory\"\n)\n\nhistory.add_user_message(\"hi!\")\n\nhistory.add_ai_message(\"whats up?\")\n\n\nThe above code creates a session with the ID session-1 and stores two messages in it. After running the above, if you visit the Xata UI, you should see a table named memory and the two messages added to it.\n\nYou can retrieve the message history for a particular session with the following code:\n\nhistory.messages\n\nConversational Q&A chain on your data with memory‚Äã\n\nLet's now see a more complex example in which we combine OpenAI, the Xata Vector Store integration, and the Xata memory store integration to create a Q&A chat bot on your data, with follow-up questions and history.\n\nWe're going to need to access the OpenAI API, so let's configure the API key:\n\nimport os\n\nos.environ[\"OPENAI_API_KEY\"] = getpass.getpass(\"OpenAI API Key:\")\n\n\nTo store the documents that the chatbot will search for answers, add a table named docs to your langchain database using the Xata UI, and add the following columns:\n\ncontent of type \"Text\". This is used to store the Document.pageContent values.\nembedding of type \"Vector\". Use the dimension used by the model you plan to use. In this notebook we use OpenAI embeddings, which have 1536 dimensions.\n\nLet's create the vector store and add some sample docs to it:\n\nfrom langchain.embeddings.openai import OpenAIEmbeddings\nfrom langchain.vectorstores.xata import XataVectorStore\n\nembeddings = OpenAIEmbeddings()\n\ntexts = [\n    \"Xata is a Serverless Data platform based on PostgreSQL\",\n    \"Xata offers a built-in vector type that can be used to store and query vectors\",\n    \"Xata includes similarity search\",\n]\n\nvector_store = XataVectorStore.from_texts(\n    texts, embeddings, api_key=api_key, db_url=db_url, table_name=\"docs\"\n)\n\n\nAfter running the above command, if you go to the Xata UI, you should see the documents loaded together with their embeddings in the docs table.\n\nLet's now create a ConversationBufferMemory to store the chat messages from both the user and the AI.\n\nfrom uuid import uuid4\n\nfrom langchain.memory import ConversationBufferMemory\n\nchat_memory = XataChatMessageHistory(\n    session_id=str(uuid4()),  # needs to be unique per user session\n    api_key=api_key,\n    db_url=db_url,\n    table_name=\"memory\",\n)\nmemory = ConversationBufferMemory(\n    memory_key=\"chat_history\", chat_memory=chat_memory, return_messages=True\n)\n\n\nNow it's time to create an Agent to use both the vector store and the chat memory together.\n\nfrom langchain.agents import AgentType, initialize_agent\nfrom langchain.agents.agent_toolkits import create_retriever_tool\nfrom langchain.chat_models import ChatOpenAI\n\ntool = create_retriever_tool(\n    vector_store.as_retriever(),\n    \"search_docs\",\n    \"Searches and returns documents from the Xata manual. Useful when you need to answer questions about Xata.\",\n)\ntools = [tool]\n\nllm = ChatOpenAI(temperature=0)\n\nagent = initialize_agent(\n    tools,\n    llm,\n    agent=AgentType.CHAT_CONVERSATIONAL_REACT_DESCRIPTION,\n    verbose=True,\n    memory=memory,\n)\n\n\nTo test, let's tell the agent our name:\n\nagent.run(input=\"My name is bob\")\n\n\nNow, let's now ask the agent some questions about Xata:\n\nagent.run(input=\"What is xata?\")\n\n\nNotice that it answers based on the data stored in the document store. And now, let's ask a follow up question:\n\nagent.run(input=\"Does it support similarity search?\")\n\n\nAnd now let's test its memory:\n\nagent.run(input=\"Did I tell you my name? What is it?\")\n\nPrevious\nUpstash Redis\nNext\nZep"
}