{
	"title": "Transformation | 🦜️🔗 Langchain",
	"url": "https://python.langchain.com/docs/modules/chains/foundational/transformation",
	"html": "ModulesMoreChainsFoundationalTransformation\nTransformation\n\nOften we want to transform inputs as they are passed from one component to another.\n\nAs an example, we will create a dummy transformation that takes in a super long text, filters the text to only the first 3 paragraphs, and then passes that into a chain to summarize those.\n\nfrom langchain.prompts import PromptTemplate\n\nprompt = PromptTemplate.from_template(\n    \"\"\"Summarize this text:\n\n{output_text}\n\nSummary:\"\"\"\n)\n\nwith open(\"../../state_of_the_union.txt\") as f:\n    state_of_the_union = f.read()\n\nUsing LCEL​\n\nWith LCEL this is trivial, since we can add functions in any RunnableSequence.\n\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.schema import StrOutputParser\n\nrunnable = (\n    {\"output_text\": lambda text: \"\\n\\n\".join(text.split(\"\\n\\n\")[:3])}\n    | prompt\n    | ChatOpenAI()\n    | StrOutputParser()\n)\nrunnable.invoke(state_of_the_union)\n\n    'The speaker acknowledges the presence of important figures in the government and addresses the audience as fellow Americans. They highlight the impact of COVID-19 on keeping people apart in the previous year but express joy in being able to come together again. The speaker emphasizes the unity of Democrats, Republicans, and Independents as Americans.'\n\n[Legacy] TransformationChain​\nTHIS IS A LEGACY CLASS, USING LCEL AS SHOWN ABOVE IS PREFFERED.\n\nThis notebook showcases using a generic transformation chain.\n\nfrom langchain.chains import LLMChain, SimpleSequentialChain, TransformChain\nfrom langchain.llms import OpenAI\n\ndef transform_func(inputs: dict) -> dict:\n    text = inputs[\"text\"]\n    shortened_text = \"\\n\\n\".join(text.split(\"\\n\\n\")[:3])\n    return {\"output_text\": shortened_text}\n\n\ntransform_chain = TransformChain(\n    input_variables=[\"text\"], output_variables=[\"output_text\"], transform=transform_func\n)\n\ntemplate = \"\"\"Summarize this text:\n\n{output_text}\n\nSummary:\"\"\"\nprompt = PromptTemplate(input_variables=[\"output_text\"], template=template)\nllm_chain = LLMChain(llm=OpenAI(), prompt=prompt)\n\nsequential_chain = SimpleSequentialChain(chains=[transform_chain, llm_chain])\n\nsequential_chain.run(state_of_the_union)\n\n    ' In an address to the nation, the speaker acknowledges the hardships of the past year due to the COVID-19 pandemic, but emphasizes that regardless of political affiliation, all Americans can come together.'\n\nPrevious\nSequential\nNext\nDocuments"
}