{
	"title": "openai-functions-tool-retrieval-agent | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/templates/openai-functions-tool-retrieval-agent",
	"html": "Templatesopenai-functions-tool-retrieval-agent\nopenai-functions-tool-retrieval-agent\n\nThe novel idea introduced in this template is the idea of using retrieval to select the set of tools to use to answer an agent query. This is useful when you have many many tools to select from. You cannot put the description of all the tools in the prompt (because of context length issues) so instead you dynamically select the N tools you do want to consider using at run time.\n\nIn this template we will create a somewhat contrived example. We will have one legitimate tool (search) and then 99 fake tools which are just nonsense. We will then add a step in the prompt template that takes the user input and retrieves tool relevant to the query.\n\nThis template is based on this Agent How-To.\n\nEnvironment Setup‚Äã\n\nThe following environment variables need to be set:\n\nSet the OPENAI_API_KEY environment variable to access the OpenAI models.\n\nSet the TAVILY_API_KEY environment variable to access Tavily.\n\nUsage‚Äã\n\nTo use this package, you should first have the LangChain CLI installed:\n\npip install -U langchain-cli\n\n\nTo create a new LangChain project and install this as the only package, you can do:\n\nlangchain app new my-app --package openai-functions-tool-retrieval-agent\n\n\nIf you want to add this to an existing project, you can just run:\n\nlangchain app add openai-functions-tool-retrieval-agent\n\n\nAnd add the following code to your server.py file:\n\nfrom openai_functions_tool_retrieval_agent import chain as openai_functions_tool_retrieval_agent_chain\n\nadd_routes(app, openai_functions_tool_retrieval_agent_chain, path=\"/openai-functions-tool-retrieval-agent\")\n\n\n(Optional) Let's now configure LangSmith. LangSmith will help us trace, monitor and debug LangChain applications. LangSmith is currently in private beta, you can sign up here. If you don't have access, you can skip this section\n\nexport LANGCHAIN_TRACING_V2=true\nexport LANGCHAIN_API_KEY=<your-api-key>\nexport LANGCHAIN_PROJECT=<your-project>  # if not specified, defaults to \"default\"\n\n\nIf you are inside this directory, then you can spin up a LangServe instance directly by:\n\nlangchain serve\n\n\nThis will start the FastAPI app with a server is running locally at http://localhost:8000\n\nWe can see all templates at http://127.0.0.1:8000/docs We can access the playground at http://127.0.0.1:8000/openai-functions-tool-retrieval-agent/playground\n\nWe can access the template from code with:\n\nfrom langserve.client import RemoteRunnable\n\nrunnable = RemoteRunnable(\"http://localhost:8000/openai-functions-tool-retrieval-agent\")\n\nPrevious\nopenai-functions-agent\nNext\npii-protected-chatbot"
}