{
	"title": "Logging to file | 🦜️🔗 Langchain",
	"url": "https://python.langchain.com/docs/modules/callbacks/filecallbackhandler",
	"html": "ModulesMoreCallbacksLogging to file\nLogging to file\n\nThis example shows how to print logs to file. It shows how to use the FileCallbackHandler, which does the same thing as StdOutCallbackHandler, but instead writes the output to file. It also uses the loguru library to log other outputs that are not captured by the handler.\n\nfrom langchain.callbacks import FileCallbackHandler\nfrom langchain.chains import LLMChain\nfrom langchain.llms import OpenAI\nfrom langchain.prompts import PromptTemplate\nfrom loguru import logger\n\nlogfile = \"output.log\"\n\nlogger.add(logfile, colorize=True, enqueue=True)\nhandler = FileCallbackHandler(logfile)\n\nllm = OpenAI()\nprompt = PromptTemplate.from_template(\"1 + {number} = \")\n\n# this chain will both print to stdout (because verbose=True) and write to 'output.log'\n# if verbose=False, the FileCallbackHandler will still write to 'output.log'\nchain = LLMChain(llm=llm, prompt=prompt, callbacks=[handler], verbose=True)\nanswer = chain.run(number=2)\nlogger.info(answer)\n\n    \n    \n    > Entering new LLMChain chain...\n    Prompt after formatting:\n    1 + 2 = \n\n\n    \u001b[32m2023-06-01 18:36:38.929\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36m__main__\u001b[0m:\u001b[36m<module>\u001b[0m:\u001b[36m20\u001b[0m - \u001b[1m\n    \n    3\u001b[0m\n\n\n    \n    > Finished chain.\n\n\nNow we can open the file output.log to see that the output has been captured.\n\npip install ansi2html > /dev/null\n\nfrom ansi2html import Ansi2HTMLConverter\nfrom IPython.display import HTML, display\n\nwith open(\"output.log\", \"r\") as f:\n    content = f.read()\n\nconv = Ansi2HTMLConverter()\nhtml = conv.convert(content, full=True)\n\ndisplay(HTML(html))\n\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n<title></title>\n<style type=\"text/css\">\n.ansi2html-content { display: inline; white-space: pre-wrap; word-wrap: break-word; }\n.body_foreground { color: #AAAAAA; }\n.body_background { background-color: #000000; }\n.inv_foreground { color: #000000; }\n.inv_background { background-color: #AAAAAA; }\n.ansi1 { font-weight: bold; }\n.ansi3 { font-style: italic; }\n.ansi32 { color: #00aa00; }\n.ansi36 { color: #00aaaa; }\n</style>\n</head>\n<body class=\"body_foreground body_background\" style=\"font-size: normal;\" >\n<pre class=\"ansi2html-content\">\n\n\n<span class=\"ansi1\">&gt; Entering new LLMChain chain...</span>\nPrompt after formatting:\n<span class=\"ansi1 ansi32\"></span><span class=\"ansi1 ansi3 ansi32\">1 + 2 = </span>\n\n<span class=\"ansi1\">&gt; Finished chain.</span>\n<span class=\"ansi32\">2023-06-01 18:36:38.929</span> | <span class=\"ansi1\">INFO    </span> | <span class=\"ansi36\">__main__</span>:<span class=\"ansi36\">&lt;module&gt;</span>:<span class=\"ansi36\">20</span> - <span class=\"ansi1\">\n\n3</span>\n\n</pre>\n</body>\n\n</html>\n\nPrevious\nCallbacks for custom chains\nNext\nMultiple callback handlers"
}