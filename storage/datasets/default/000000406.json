{
	"title": "Caching | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/modules/model_io/chat/chat_model_caching",
	"html": "ModulesModel I/OChat modelsCaching\nCaching\n\nLangChain provides an optional caching layer for chat models. This is useful for two reasons:\n\nIt can save you money by reducing the number of API calls you make to the LLM provider, if you're often requesting the same completion multiple times. It can speed up your application by reducing the number of API calls you make to the LLM provider.\n\nfrom langchain.globals import set_llm_cache\nfrom langchain.chat_models import ChatOpenAI\n\nllm = ChatOpenAI()\n\nIn Memory Cache‚Äã\nfrom langchain.cache import InMemoryCache\nset_llm_cache(InMemoryCache())\n\n# The first time, it is not yet in cache, so it should take longer\nllm.predict(\"Tell me a joke\")\n\n    CPU times: user 35.9 ms, sys: 28.6 ms, total: 64.6 ms\n    Wall time: 4.83 s\n\n\n    \"\\n\\nWhy couldn't the bicycle stand up by itself? It was...two tired!\"\n\n# The second time it is, so it goes faster\nllm.predict(\"Tell me a joke\")\n\n    CPU times: user 238 ¬µs, sys: 143 ¬µs, total: 381 ¬µs\n    Wall time: 1.76 ms\n\n\n    '\\n\\nWhy did the chicken cross the road?\\n\\nTo get to the other side.'\n\nSQLite Cache‚Äã\nrm .langchain.db\n\n# We can do the same thing with a SQLite cache\nfrom langchain.cache import SQLiteCache\nset_llm_cache(SQLiteCache(database_path=\".langchain.db\"))\n\n# The first time, it is not yet in cache, so it should take longer\nllm.predict(\"Tell me a joke\")\n\n    CPU times: user 17 ms, sys: 9.76 ms, total: 26.7 ms\n    Wall time: 825 ms\n\n\n    '\\n\\nWhy did the chicken cross the road?\\n\\nTo get to the other side.'\n\n# The second time it is, so it goes faster\nllm.predict(\"Tell me a joke\")\n\n    CPU times: user 2.46 ms, sys: 1.23 ms, total: 3.7 ms\n    Wall time: 2.67 ms\n\n\n    '\\n\\nWhy did the chicken cross the road?\\n\\nTo get to the other side.'\n\nPrevious\nChat models\nNext\nPrompts"
}