{
	"title": "GMail | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/integrations/chat_loaders/gmail",
	"html": "ComponentsChat loadersGMail\nGMail\n\nThis loader goes over how to load data from GMail. There are many ways you could want to load data from GMail. This loader is currently fairly opinionated in how to do so. The way it does it is it first looks for all messages that you have sent. It then looks for messages where you are responding to a previous email. It then fetches that previous email, and creates a training example of that email, followed by your email.\n\nNote that there are clear limitations here. For example, all examples created are only looking at the previous email for context.\n\nTo use:\n\nSet up a Google Developer Account: Go to the Google Developer Console, create a project, and enable the Gmail API for that project. This will give you a credentials.json file that you'll need later.\n\nInstall the Google Client Library: Run the following command to install the Google Client Library:\n\npip install --upgrade google-auth google-auth-oauthlib google-auth-httplib2 google-api-python-client\n\nimport os.path\n\nfrom google.auth.transport.requests import Request\nfrom google.oauth2.credentials import Credentials\nfrom google_auth_oauthlib.flow import InstalledAppFlow\n\nSCOPES = [\"https://www.googleapis.com/auth/gmail.readonly\"]\n\n\ncreds = None\n# The file token.json stores the user's access and refresh tokens, and is\n# created automatically when the authorization flow completes for the first\n# time.\nif os.path.exists(\"email_token.json\"):\n    creds = Credentials.from_authorized_user_file(\"email_token.json\", SCOPES)\n# If there are no (valid) credentials available, let the user log in.\nif not creds or not creds.valid:\n    if creds and creds.expired and creds.refresh_token:\n        creds.refresh(Request())\n    else:\n        flow = InstalledAppFlow.from_client_secrets_file(\n            # your creds file here. Please create json file as here https://cloud.google.com/docs/authentication/getting-started\n            \"creds.json\",\n            SCOPES,\n        )\n        creds = flow.run_local_server(port=0)\n    # Save the credentials for the next run\n    with open(\"email_token.json\", \"w\") as token:\n        token.write(creds.to_json())\n\nfrom langchain.chat_loaders.gmail import GMailLoader\n\nloader = GMailLoader(creds=creds, n=3)\n\ndata = loader.load()\n\n# Sometimes there can be errors which we silently ignore\nlen(data)\n\n    2\n\nfrom langchain.chat_loaders.utils import (\n    map_ai_messages,\n)\n\n# This makes messages sent by hchase@langchain.com the AI Messages\n# This means you will train an LLM to predict as if it's responding as hchase\ntraining_data = list(\n    map_ai_messages(data, sender=\"Harrison Chase <hchase@langchain.com>\")\n)\n\nPrevious\nFacebook Messenger\nNext\niMessage"
}