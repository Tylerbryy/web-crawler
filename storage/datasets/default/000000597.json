{
	"title": "AWS DynamoDB | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/integrations/memory/aws_dynamodb",
	"html": "ComponentsMemoryAWS DynamoDB\nAWS DynamoDB\n\nAmazon AWS DynamoDB is a fully managed NoSQL database service that provides fast and predictable performance with seamless scalability.\n\nThis notebook goes over how to use DynamoDB to store chat message history.\n\nFirst make sure you have correctly configured the AWS CLI. Then make sure you have installed boto3.\n\npip install boto3\n\n\nNext, create the DynamoDB Table where we will be storing messages:\n\nimport boto3\n\n# Get the service resource.\ndynamodb = boto3.resource(\"dynamodb\")\n\n# Create the DynamoDB table.\ntable = dynamodb.create_table(\n    TableName=\"SessionTable\",\n    KeySchema=[{\"AttributeName\": \"SessionId\", \"KeyType\": \"HASH\"}],\n    AttributeDefinitions=[{\"AttributeName\": \"SessionId\", \"AttributeType\": \"S\"}],\n    BillingMode=\"PAY_PER_REQUEST\",\n)\n\n# Wait until the table exists.\ntable.meta.client.get_waiter(\"table_exists\").wait(TableName=\"SessionTable\")\n\n# Print out some data about the table.\nprint(table.item_count)\n\n    0\n\nDynamoDBChatMessageHistory‚Äã\nfrom langchain.memory.chat_message_histories import DynamoDBChatMessageHistory\n\nhistory = DynamoDBChatMessageHistory(table_name=\"SessionTable\", session_id=\"0\")\n\nhistory.add_user_message(\"hi!\")\n\nhistory.add_ai_message(\"whats up?\")\n\nhistory.messages\n\n    [HumanMessage(content='hi!', additional_kwargs={}, example=False),\n     AIMessage(content='whats up?', additional_kwargs={}, example=False),\n     HumanMessage(content='hi!', additional_kwargs={}, example=False),\n     AIMessage(content='whats up?', additional_kwargs={}, example=False)]\n\nDynamoDBChatMessageHistory with Custom Endpoint URL‚Äã\n\nSometimes it is useful to specify the URL to the AWS endpoint to connect to. For instance, when you are running locally against Localstack. For those cases you can specify the URL via the endpoint_url parameter in the constructor.\n\nfrom langchain.memory.chat_message_histories import DynamoDBChatMessageHistory\n\nhistory = DynamoDBChatMessageHistory(\n    table_name=\"SessionTable\",\n    session_id=\"0\",\n    endpoint_url=\"http://localhost.localstack.cloud:4566\",\n)\n\nDynamoDBChatMessageHistory With Different Keys Composite Keys‚Äã\n\nThe default key for DynamoDBChatMessageHistory is {\"SessionId\": self.session_id}, but you can modify this to match your table design.\n\nPrimary Key Name‚Äã\n\nYou may modify the primary key by passing in a primary_key_name value in the constructor, resulting in the following: {self.primary_key_name: self.session_id}\n\nComposite Keys‚Äã\n\nWhen using an existing DynamoDB table, you may need to modify the key structure from the default of to something including a Sort Key. To do this you may use the key parameter.\n\nPassing a value for key will override the primary_key parameter, and the resulting key structure will be the passed value.\n\nfrom langchain.memory.chat_message_histories import DynamoDBChatMessageHistory\n\ncomposite_table = dynamodb.create_table(\n    TableName=\"CompositeTable\",\n    KeySchema=[\n        {\"AttributeName\": \"PK\", \"KeyType\": \"HASH\"},\n        {\"AttributeName\": \"SK\", \"KeyType\": \"RANGE\"},\n    ],\n    AttributeDefinitions=[\n        {\"AttributeName\": \"PK\", \"AttributeType\": \"S\"},\n        {\"AttributeName\": \"SK\", \"AttributeType\": \"S\"},\n    ],\n    BillingMode=\"PAY_PER_REQUEST\",\n)\n\n# Wait until the table exists.\ncomposite_table.meta.client.get_waiter(\"table_exists\").wait(TableName=\"CompositeTable\")\n\n# Print out some data about the table.\nprint(composite_table.item_count)\n\nmy_key = {\n    \"PK\": \"session_id::0\",\n    \"SK\": \"langchain_history\",\n}\n\ncomposite_key_history = DynamoDBChatMessageHistory(\n    table_name=\"CompositeTable\",\n    session_id=\"0\",\n    endpoint_url=\"http://localhost.localstack.cloud:4566\",\n    key=my_key,\n)\n\ncomposite_key_history.add_user_message(\"hello, composite dynamodb table!\")\n\ncomposite_key_history.messages\n\n    0\n\n\n\n\n\n    [HumanMessage(content='hello, composite dynamodb table!', additional_kwargs={}, example=False)]\n\nAgent with DynamoDB Memory‚Äã\nfrom langchain.agents import AgentType, Tool, initialize_agent\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.memory import ConversationBufferMemory\nfrom langchain_experimental.utilities import PythonREPL\n\nmessage_history = DynamoDBChatMessageHistory(table_name=\"SessionTable\", session_id=\"1\")\nmemory = ConversationBufferMemory(\n    memory_key=\"chat_history\", chat_memory=message_history, return_messages=True\n)\n\npython_repl = PythonREPL()\n\n# You can create the tool to pass to an agent\ntools = [\n    Tool(\n        name=\"python_repl\",\n        description=\"A Python shell. Use this to execute python commands. Input should be a valid python command. If you want to see the output of a value, you should print it out with `print(...)`.\",\n        func=python_repl.run,\n    )\n]\n\nllm = ChatOpenAI(temperature=0)\nagent_chain = initialize_agent(\n    tools,\n    llm,\n    agent=AgentType.CHAT_CONVERSATIONAL_REACT_DESCRIPTION,\n    verbose=True,\n    memory=memory,\n)\n\nagent_chain.run(input=\"Hello!\")\n\nagent_chain.run(input=\"Who owns Twitter?\")\n\nagent_chain.run(input=\"My name is Bob.\")\n\nagent_chain.run(input=\"Who am I?\")\n\nPrevious\nMemory\nNext\nCassandra"
}