{
	"title": "OpenAI metadata tagger | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/integrations/document_transformers/openai_metadata_tagger",
	"html": "ComponentsDocument transformersOpenAI metadata tagger\nOpenAI metadata tagger\n\nIt can often be useful to tag ingested documents with structured metadata, such as the title, tone, or length of a document, to allow for a more targeted similarity search later. However, for large numbers of documents, performing this labelling process manually can be tedious.\n\nThe OpenAIMetadataTagger document transformer automates this process by extracting metadata from each provided document according to a provided schema. It uses a configurable OpenAI Functions-powered chain under the hood, so if you pass a custom LLM instance, it must be an OpenAI model with functions support.\n\nNote: This document transformer works best with complete documents, so it's best to run it first with whole documents before doing any other splitting or processing!\n\nFor example, let's say you wanted to index a set of movie reviews. You could initialize the document transformer with a valid JSON Schema object as follows:\n\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.document_transformers.openai_functions import create_metadata_tagger\nfrom langchain.schema import Document\n\nschema = {\n    \"properties\": {\n        \"movie_title\": {\"type\": \"string\"},\n        \"critic\": {\"type\": \"string\"},\n        \"tone\": {\"type\": \"string\", \"enum\": [\"positive\", \"negative\"]},\n        \"rating\": {\n            \"type\": \"integer\",\n            \"description\": \"The number of stars the critic rated the movie\",\n        },\n    },\n    \"required\": [\"movie_title\", \"critic\", \"tone\"],\n}\n\n# Must be an OpenAI model that supports functions\nllm = ChatOpenAI(temperature=0, model=\"gpt-3.5-turbo-0613\")\n\ndocument_transformer = create_metadata_tagger(metadata_schema=schema, llm=llm)\n\n\nYou can then simply pass the document transformer a list of documents, and it will extract metadata from the contents:\n\noriginal_documents = [\n    Document(\n        page_content=\"Review of The Bee Movie\\nBy Roger Ebert\\n\\nThis is the greatest movie ever made. 4 out of 5 stars.\"\n    ),\n    Document(\n        page_content=\"Review of The Godfather\\nBy Anonymous\\n\\nThis movie was super boring. 1 out of 5 stars.\",\n        metadata={\"reliable\": False},\n    ),\n]\n\nenhanced_documents = document_transformer.transform_documents(original_documents)\n\nimport json\n\nprint(\n    *[d.page_content + \"\\n\\n\" + json.dumps(d.metadata) for d in enhanced_documents],\n    sep=\"\\n\\n---------------\\n\\n\",\n)\n\n    Review of The Bee Movie\n    By Roger Ebert\n    \n    This is the greatest movie ever made. 4 out of 5 stars.\n    \n    {\"movie_title\": \"The Bee Movie\", \"critic\": \"Roger Ebert\", \"tone\": \"positive\", \"rating\": 4}\n    \n    ---------------\n    \n    Review of The Godfather\n    By Anonymous\n    \n    This movie was super boring. 1 out of 5 stars.\n    \n    {\"movie_title\": \"The Godfather\", \"critic\": \"Anonymous\", \"tone\": \"negative\", \"rating\": 1, \"reliable\": false}\n\n\nThe new documents can then be further processed by a text splitter before being loaded into a vector store. Extracted fields will not overwrite existing metadata.\n\nYou can also initialize the document transformer with a Pydantic schema:\n\nfrom typing import Literal\n\nfrom pydantic import BaseModel, Field\n\n\nclass Properties(BaseModel):\n    movie_title: str\n    critic: str\n    tone: Literal[\"positive\", \"negative\"]\n    rating: int = Field(description=\"Rating out of 5 stars\")\n\n\ndocument_transformer = create_metadata_tagger(Properties, llm)\nenhanced_documents = document_transformer.transform_documents(original_documents)\n\nprint(\n    *[d.page_content + \"\\n\\n\" + json.dumps(d.metadata) for d in enhanced_documents],\n    sep=\"\\n\\n---------------\\n\\n\",\n)\n\n    Review of The Bee Movie\n    By Roger Ebert\n    \n    This is the greatest movie ever made. 4 out of 5 stars.\n    \n    {\"movie_title\": \"The Bee Movie\", \"critic\": \"Roger Ebert\", \"tone\": \"positive\", \"rating\": 4}\n    \n    ---------------\n    \n    Review of The Godfather\n    By Anonymous\n    \n    This movie was super boring. 1 out of 5 stars.\n    \n    {\"movie_title\": \"The Godfather\", \"critic\": \"Anonymous\", \"tone\": \"negative\", \"rating\": 1, \"reliable\": false}\n\nCustomization‚Äã\n\nYou can pass the underlying tagging chain the standard LLMChain arguments in the document transformer constructor. For example, if you wanted to ask the LLM to focus specific details in the input documents, or extract metadata in a certain style, you could pass in a custom prompt:\n\nfrom langchain.prompts import ChatPromptTemplate\n\nprompt = ChatPromptTemplate.from_template(\n    \"\"\"Extract relevant information from the following text.\nAnonymous critics are actually Roger Ebert.\n\n{input}\n\"\"\"\n)\n\ndocument_transformer = create_metadata_tagger(schema, llm, prompt=prompt)\nenhanced_documents = document_transformer.transform_documents(original_documents)\n\nprint(\n    *[d.page_content + \"\\n\\n\" + json.dumps(d.metadata) for d in enhanced_documents],\n    sep=\"\\n\\n---------------\\n\\n\",\n)\n\n    Review of The Bee Movie\n    By Roger Ebert\n    \n    This is the greatest movie ever made. 4 out of 5 stars.\n    \n    {\"movie_title\": \"The Bee Movie\", \"critic\": \"Roger Ebert\", \"tone\": \"positive\", \"rating\": 4}\n    \n    ---------------\n    \n    Review of The Godfather\n    By Anonymous\n    \n    This movie was super boring. 1 out of 5 stars.\n    \n    {\"movie_title\": \"The Godfather\", \"critic\": \"Roger Ebert\", \"tone\": \"negative\", \"rating\": 1, \"reliable\": false}\n\nPrevious\nNuclia\nNext\nText embedding models"
}