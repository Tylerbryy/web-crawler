{
	"title": "Select by length | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/modules/model_io/prompts/example_selectors/length_based",
	"html": "ModulesModel I/OPromptsExample selectorsSelect by length\nSelect by length\n\nThis example selector selects which examples to use based on length. This is useful when you are worried about constructing a prompt that will go over the length of the context window. For longer inputs, it will select fewer examples to include, while for shorter inputs it will select more.\n\nfrom langchain.prompts import PromptTemplate\nfrom langchain.prompts import FewShotPromptTemplate\nfrom langchain.prompts.example_selector import LengthBasedExampleSelector\n\n\n# Examples of a pretend task of creating antonyms.\nexamples = [\n    {\"input\": \"happy\", \"output\": \"sad\"},\n    {\"input\": \"tall\", \"output\": \"short\"},\n    {\"input\": \"energetic\", \"output\": \"lethargic\"},\n    {\"input\": \"sunny\", \"output\": \"gloomy\"},\n    {\"input\": \"windy\", \"output\": \"calm\"},\n]\n\nexample_prompt = PromptTemplate(\n    input_variables=[\"input\", \"output\"],\n    template=\"Input: {input}\\nOutput: {output}\",\n)\nexample_selector = LengthBasedExampleSelector(\n    # The examples it has available to choose from.\n    examples=examples,\n    # The PromptTemplate being used to format the examples.\n    example_prompt=example_prompt,\n    # The maximum length that the formatted examples should be.\n    # Length is measured by the get_text_length function below.\n    max_length=25,\n    # The function used to get the length of a string, which is used\n    # to determine which examples to include. It is commented out because\n    # it is provided as a default value if none is specified.\n    # get_text_length: Callable[[str], int] = lambda x: len(re.split(\"\\n| \", x))\n)\ndynamic_prompt = FewShotPromptTemplate(\n    # We provide an ExampleSelector instead of examples.\n    example_selector=example_selector,\n    example_prompt=example_prompt,\n    prefix=\"Give the antonym of every input\",\n    suffix=\"Input: {adjective}\\nOutput:\",\n    input_variables=[\"adjective\"],\n)\n\n# An example with small input, so it selects all examples.\nprint(dynamic_prompt.format(adjective=\"big\"))\n\n    Give the antonym of every input\n\n    Input: happy\n    Output: sad\n\n    Input: tall\n    Output: short\n\n    Input: energetic\n    Output: lethargic\n\n    Input: sunny\n    Output: gloomy\n\n    Input: windy\n    Output: calm\n\n    Input: big\n    Output:\n\n# An example with long input, so it selects only one example.\nlong_string = \"big and huge and massive and large and gigantic and tall and much much much much much bigger than everything else\"\nprint(dynamic_prompt.format(adjective=long_string))\n\n    Give the antonym of every input\n\n    Input: happy\n    Output: sad\n\n    Input: big and huge and massive and large and gigantic and tall and much much much much much bigger than everything else\n    Output:\n\n# You can add an example to an example selector as well.\nnew_example = {\"input\": \"big\", \"output\": \"small\"}\ndynamic_prompt.example_selector.add_example(new_example)\nprint(dynamic_prompt.format(adjective=\"enthusiastic\"))\n\n    Give the antonym of every input\n\n    Input: happy\n    Output: sad\n\n    Input: tall\n    Output: short\n\n    Input: energetic\n    Output: lethargic\n\n    Input: sunny\n    Output: gloomy\n\n    Input: windy\n    Output: calm\n\n    Input: big\n    Output: small\n\n    Input: enthusiastic\n    Output:\n\nPrevious\nCustom example selector\nNext\nSelect by maximal marginal relevance (MMR)"
}