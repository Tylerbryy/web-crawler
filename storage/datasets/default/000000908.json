{
	"title": "SemaDB | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/integrations/vectorstores/semadb",
	"html": "ComponentsVector storesSemaDB\nSemaDB\n\nSemaDB from SemaFind is a no fuss vector similarity database for building AI applications. The hosted SemaDB Cloud offers a no fuss developer experience to get started.\n\nThe full documentation of the API along with examples and an interactive playground is available on RapidAPI.\n\nThis notebook demonstrates usage of the SemaDB Cloud vector store.\n\nLoad document embeddings‚Äã\n\nTo run things locally, we are using Sentence Transformers which are commonly used for embedding sentences. You can use any embedding model LangChain offers.\n\npip install sentence_transformers\n\nfrom langchain.embeddings import HuggingFaceEmbeddings\n\nembeddings = HuggingFaceEmbeddings()\n\nfrom langchain.document_loaders import TextLoader\nfrom langchain.text_splitter import CharacterTextSplitter\n\nloader = TextLoader(\"../../modules/state_of_the_union.txt\")\ndocuments = loader.load()\ntext_splitter = CharacterTextSplitter(chunk_size=400, chunk_overlap=0)\ndocs = text_splitter.split_documents(documents)\nprint(len(docs))\n\n    114\n\nConnect to SemaDB‚Äã\n\nSemaDB Cloud uses RapidAPI keys to authenticate. You can obtain yours by creating a free RapidAPI account.\n\nimport getpass\nimport os\n\nos.environ[\"SEMADB_API_KEY\"] = getpass.getpass(\"SemaDB API Key:\")\n\n    SemaDB API Key: ¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑\n\nfrom langchain.vectorstores import SemaDB\nfrom langchain.vectorstores.utils import DistanceStrategy\n\n\nThe parameters to the SemaDB vector store reflect the API directly:\n\n\"mycollection\": is the collection name in which we will store these vectors.\n768: is dimensions of the vectors. In our case, the sentence transformer embeddings yield 768 dimensional vectors.\nAPI_KEY: is your RapidAPI key.\nembeddings: correspond to how the embeddings of documents, texts and queries will be generated.\nDistanceStrategy: is the distance metric used. The wrapper automatically normalises vectors if COSINE is used.\ndb = SemaDB(\"mycollection\", 768, embeddings, DistanceStrategy.COSINE)\n\n# Create collection if running for the first time. If the collection\n# already exists this will fail.\ndb.create_collection()\n\n    True\n\n\nThe SemaDB vector store wrapper adds the document text as point metadata to collect later. Storing large chunks of text is not recommended. If you are indexing a large collection, we instead recommend storing references to the documents such as external Ids.\n\ndb.add_documents(docs)[:2]\n\n    ['813c7ef3-9797-466b-8afa-587115592c6c',\n     'fc392f7f-082b-4932-bfcc-06800db5e017']\n\nSimilarity Search‚Äã\n\nWe use the default LangChain similarity search interface to search for the most similar sentences.\n\nquery = \"What did the president say about Ketanji Brown Jackson\"\ndocs = db.similarity_search(query)\nprint(docs[0].page_content)\n\n    And I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.\n\ndocs = db.similarity_search_with_score(query)\ndocs[0]\n\n    (Document(page_content='And I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.', metadata={'source': '../../modules/state_of_the_union.txt', 'text': 'And I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.'}),\n     0.42369342)\n\nClean up‚Äã\n\nYou can delete the collection to remove all data.\n\ndb.delete_collection()\n\n    True\n\nPrevious\nScaNN\nNext\nSingleStoreDB"
}