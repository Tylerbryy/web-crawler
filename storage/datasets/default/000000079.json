{
	"title": "rag-conversation-zep | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/templates/rag-conversation-zep",
	"html": "Templatesrag-conversation-zep\nrag-conversation-zep\n\nThis template demonstrates building a RAG conversation app using Zep.\n\nIncluded in this template:\n\nPopulating a Zep Document Collection with a set of documents (a Collection is analogous to an index in other Vector Databases).\nUsing Zep's integrated embedding functionality to embed the documents as vectors.\nConfiguring a LangChain ZepVectorStore Retriever to retrieve documents using Zep's built, hardware accelerated in Maximal Marginal Relevance (MMR) re-ranking.\nPrompts, a simple chat history data structure, and other components required to build a RAG conversation app.\nThe RAG conversation chain.\nAbout Zep - Fast, scalable building blocks for LLM Apps‚Äã\n\nZep is an open source platform for productionizing LLM apps. Go from a prototype built in LangChain or LlamaIndex, or a custom app, to production in minutes without rewriting code.\n\nKey Features:\n\nFast! Zep‚Äôs async extractors operate independently of the your chat loop, ensuring a snappy user experience.\nLong-term memory persistence, with access to historical messages irrespective of your summarization strategy.\nAuto-summarization of memory messages based on a configurable message window. A series of summaries are stored, providing flexibility for future summarization strategies.\nHybrid search over memories and metadata, with messages automatically embedded on creation.\nEntity Extractor that automatically extracts named entities from messages and stores them in the message metadata.\nAuto-token counting of memories and summaries, allowing finer-grained control over prompt assembly.\nPython and JavaScript SDKs.\n\nZep project: https://github.com/getzep/zep | Docs: https://docs.getzep.com/\n\nEnvironment Setup‚Äã\n\nSet up a Zep service by following the Quick Start Guide.\n\nIngesting Documents into a Zep Collection‚Äã\n\nRun python ingest.py to ingest the test documents into a Zep Collection. Review the file to modify the Collection name and document source.\n\nUsage‚Äã\n\nTo use this package, you should first have the LangChain CLI installed:\n\npip install -U \"langchain-cli[serve]\"\n\n\nTo create a new LangChain project and install this as the only package, you can do:\n\nlangchain app new my-app --package rag-conversation-zep\n\n\nIf you want to add this to an existing project, you can just run:\n\nlangchain app add rag-conversation-zep\n\n\nAnd add the following code to your server.py file:\n\nfrom rag_conversation_zep import chain as rag_conversation_zep_chain\n\nadd_routes(app, rag_conversation_zep_chain, path=\"/rag-conversation-zep\")\n\n\n(Optional) Let's now configure LangSmith. LangSmith will help us trace, monitor and debug LangChain applications. LangSmith is currently in private beta, you can sign up here. If you don't have access, you can skip this section\n\nexport LANGCHAIN_TRACING_V2=true\nexport LANGCHAIN_API_KEY=<your-api-key>\nexport LANGCHAIN_PROJECT=<your-project>  # if not specified, defaults to \"default\"\n\n\nIf you are inside this directory, then you can spin up a LangServe instance directly by:\n\nlangchain serve\n\n\nThis will start the FastAPI app with a server is running locally at http://localhost:8000\n\nWe can see all templates at http://127.0.0.1:8000/docs We can access the playground at http://127.0.0.1:8000/rag-conversation-zep/playground\n\nWe can access the template from code with:\n\nfrom langserve.client import RemoteRunnable\n\nrunnable = RemoteRunnable(\"http://localhost:8000/rag-conversation-zep\")\n\nPrevious\nrag-codellama-fireworks\nNext\nrag-conversation"
}