{
	"title": "Marqo | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/integrations/vectorstores/marqo",
	"html": "ComponentsVector storesMarqo\nMarqo\n\nThis notebook shows how to use functionality related to the Marqo vectorstore.\n\nMarqo is an open-source vector search engine. Marqo allows you to store and query multi-modal data such as text and images. Marqo creates the vectors for you using a huge selection of open-source models, you can also provide your own fine-tuned models and Marqo will handle the loading and inference for you.\n\nTo run this notebook with our docker image please run the following commands first to get Marqo:\n\ndocker pull marqoai/marqo:latest\ndocker rm -f marqo\ndocker run --name marqo -it --privileged -p 8882:8882 --add-host host.docker.internal:host-gateway marqoai/marqo:latest\n\npip install marqo\n\nfrom langchain.document_loaders import TextLoader\nfrom langchain.text_splitter import CharacterTextSplitter\nfrom langchain.vectorstores import Marqo\n\nfrom langchain.document_loaders import TextLoader\n\nloader = TextLoader(\"../../modules/state_of_the_union.txt\")\ndocuments = loader.load()\ntext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)\ndocs = text_splitter.split_documents(documents)\n\nimport marqo\n\n# initialize marqo\nmarqo_url = \"http://localhost:8882\"  # if using marqo cloud replace with your endpoint (console.marqo.ai)\nmarqo_api_key = \"\"  # if using marqo cloud replace with your api key (console.marqo.ai)\n\nclient = marqo.Client(url=marqo_url, api_key=marqo_api_key)\n\nindex_name = \"langchain-demo\"\n\ndocsearch = Marqo.from_documents(docs, index_name=index_name)\n\nquery = \"What did the president say about Ketanji Brown Jackson\"\nresult_docs = docsearch.similarity_search(query)\n\n    Index langchain-demo exists.\n\nprint(result_docs[0].page_content)\n\n    Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections. \n    \n    Tonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service. \n    \n    One of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court. \n    \n    And I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.\n\nresult_docs = docsearch.similarity_search_with_score(query)\nprint(result_docs[0][0].page_content, result_docs[0][1], sep=\"\\n\")\n\n    Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections. \n    \n    Tonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service. \n    \n    One of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court. \n    \n    And I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.\n    0.68647254\n\nAdditional features‚Äã\n\nOne of the powerful features of Marqo as a vectorstore is that you can use indexes created externally. For example:\n\nIf you had a database of image and text pairs from another application, you can simply just use it in langchain with the Marqo vectorstore. Note that bringing your own multimodal indexes will disable the add_texts method.\n\nIf you had a database of text documents, you can bring it into the langchain framework and add more texts through add_texts.\n\nThe documents that are returned are customised by passing your own function to the page_content_builder callback in the search methods.\n\nMultimodal Example‚Äã\n# use a new index\nindex_name = \"langchain-multimodal-demo\"\n\n# incase the demo is re-run\ntry:\n    client.delete_index(index_name)\nexcept Exception:\n    print(f\"Creating {index_name}\")\n\n# This index could have been created by another system\nsettings = {\"treat_urls_and_pointers_as_images\": True, \"model\": \"ViT-L/14\"}\nclient.create_index(index_name, **settings)\nclient.index(index_name).add_documents(\n    [\n        # image of a bus\n        {\n            \"caption\": \"Bus\",\n            \"image\": \"https://raw.githubusercontent.com/marqo-ai/marqo/mainline/examples/ImageSearchGuide/data/image4.jpg\",\n        },\n        # image of a plane\n        {\n            \"caption\": \"Plane\",\n            \"image\": \"https://raw.githubusercontent.com/marqo-ai/marqo/mainline/examples/ImageSearchGuide/data/image2.jpg\",\n        },\n    ],\n)\n\n    {'errors': False,\n     'processingTimeMs': 2090.2822139996715,\n     'index_name': 'langchain-multimodal-demo',\n     'items': [{'_id': 'aa92fc1c-1fb2-4d86-b027-feb507c419f7',\n       'result': 'created',\n       'status': 201},\n      {'_id': '5142c258-ef9f-4bf2-a1a6-2307280173a0',\n       'result': 'created',\n       'status': 201}]}\n\ndef get_content(res):\n    \"\"\"Helper to format Marqo's documents into text to be used as page_content\"\"\"\n    return f\"{res['caption']}: {res['image']}\"\n\n\ndocsearch = Marqo(client, index_name, page_content_builder=get_content)\n\n\nquery = \"vehicles that fly\"\ndoc_results = docsearch.similarity_search(query)\n\nfor doc in doc_results:\n    print(doc.page_content)\n\n    Plane: https://raw.githubusercontent.com/marqo-ai/marqo/mainline/examples/ImageSearchGuide/data/image2.jpg\n    Bus: https://raw.githubusercontent.com/marqo-ai/marqo/mainline/examples/ImageSearchGuide/data/image4.jpg\n\nText only example‚Äã\n# use a new index\nindex_name = \"langchain-byo-index-demo\"\n\n# incase the demo is re-run\ntry:\n    client.delete_index(index_name)\nexcept Exception:\n    print(f\"Creating {index_name}\")\n\n# This index could have been created by another system\nclient.create_index(index_name)\nclient.index(index_name).add_documents(\n    [\n        {\n            \"Title\": \"Smartphone\",\n            \"Description\": \"A smartphone is a portable computer device that combines mobile telephone \"\n            \"functions and computing functions into one unit.\",\n        },\n        {\n            \"Title\": \"Telephone\",\n            \"Description\": \"A telephone is a telecommunications device that permits two or more users to\"\n            \"conduct a conversation when they are too far apart to be easily heard directly.\",\n        },\n    ],\n)\n\n    {'errors': False,\n     'processingTimeMs': 139.2144540004665,\n     'index_name': 'langchain-byo-index-demo',\n     'items': [{'_id': '27c05a1c-b8a9-49a5-ae73-fbf1eb51dc3f',\n       'result': 'created',\n       'status': 201},\n      {'_id': '6889afe0-e600-43c1-aa3b-1d91bf6db274',\n       'result': 'created',\n       'status': 201}]}\n\n# Note text indexes retain the ability to use add_texts despite different field names in documents\n# this is because the page_content_builder callback lets you handle these document fields as required\n\n\ndef get_content(res):\n    \"\"\"Helper to format Marqo's documents into text to be used as page_content\"\"\"\n    if \"text\" in res:\n        return res[\"text\"]\n    return res[\"Description\"]\n\n\ndocsearch = Marqo(client, index_name, page_content_builder=get_content)\n\ndocsearch.add_texts([\"This is a document that is about elephants\"])\n\n    ['9986cc72-adcd-4080-9d74-265c173a9ec3']\n\nquery = \"modern communications devices\"\ndoc_results = docsearch.similarity_search(query)\n\nprint(doc_results[0].page_content)\n\n    A smartphone is a portable computer device that combines mobile telephone functions and computing functions into one unit.\n\nquery = \"elephants\"\ndoc_results = docsearch.similarity_search(query, page_content_builder=get_content)\n\nprint(doc_results[0].page_content)\n\n    This is a document that is about elephants\n\nWeighted Queries‚Äã\n\nWe also expose marqos weighted queries which are a powerful way to compose complex semantic searches.\n\nquery = {\"communications devices\": 1.0}\ndoc_results = docsearch.similarity_search(query)\nprint(doc_results[0].page_content)\n\n    A smartphone is a portable computer device that combines mobile telephone functions and computing functions into one unit.\n\nquery = {\"communications devices\": 1.0, \"technology post 2000\": -1.0}\ndoc_results = docsearch.similarity_search(query)\nprint(doc_results[0].page_content)\n\n    A telephone is a telecommunications device that permits two or more users toconduct a conversation when they are too far apart to be easily heard directly.\n\nQuestion Answering with Sources\n\nThis section shows how to use Marqo as part of a RetrievalQAWithSourcesChain. Marqo will perform the searches for information in the sources.\n\nimport getpass\nimport os\n\nfrom langchain.chains import RetrievalQAWithSourcesChain\nfrom langchain.llms import OpenAI\n\nos.environ[\"OPENAI_API_KEY\"] = getpass.getpass(\"OpenAI API Key:\")\n\n    OpenAI API Key:¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑\n\nwith open(\"../../modules/state_of_the_union.txt\") as f:\n    state_of_the_union = f.read()\ntext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)\ntexts = text_splitter.split_text(state_of_the_union)\n\nindex_name = \"langchain-qa-with-retrieval\"\ndocsearch = Marqo.from_documents(docs, index_name=index_name)\n\n    Index langchain-qa-with-retrieval exists.\n\nchain = RetrievalQAWithSourcesChain.from_chain_type(\n    OpenAI(temperature=0), chain_type=\"stuff\", retriever=docsearch.as_retriever()\n)\n\nchain(\n    {\"question\": \"What did the president say about Justice Breyer\"},\n    return_only_outputs=True,\n)\n\n    {'answer': ' The president honored Justice Breyer, thanking him for his service and noting that he is a retiring Justice of the United States Supreme Court.\\n',\n     'sources': '../../../state_of_the_union.txt'}\n\nPrevious\nLLMRails\nNext\nGoogle Vertex AI Vector Search"
}