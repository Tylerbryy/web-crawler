{
	"title": "Telegram | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/integrations/chat_loaders/telegram",
	"html": "ComponentsChat loadersTelegram\nTelegram\n\nThis notebook shows how to use the Telegram chat loader. This class helps map exported Telegram conversations to LangChain chat messages.\n\nThe process has three steps:\n\nExport the chat .txt file by copying chats from the Discord app and pasting them in a file on your local computer\nCreate the TelegramChatLoader with the file path pointed to the json file or directory of JSON files\nCall loader.load() (or loader.lazy_load()) to perform the conversion. Optionally use merge_chat_runs to combine message from the same sender in sequence, and/or map_ai_messages to convert messages from the specified sender to the \"AIMessage\" class.\n1. Create message dump‚Äã\n\nCurrently (2023/08/23) this loader best supports json files in the format generated by exporting your chat history from the Telegram Desktop App.\n\nImportant: There are 'lite' versions of telegram such as \"Telegram for MacOS\" that lack the export functionality. Please make sure you use the correct app to export the file.\n\nTo make the export:\n\nDownload and open telegram desktop\nSelect a conversation\nNavigate to the conversation settings (currently the three dots in the top right corner)\nClick \"Export Chat History\"\nUnselect photos and other media. Select \"Machine-readable JSON\" format to export.\n\nAn example is below:\n\ntelegram_conversation.json\n{\n \"name\": \"Jiminy\",\n \"type\": \"personal_chat\",\n \"id\": 5965280513,\n \"messages\": [\n  {\n   \"id\": 1,\n   \"type\": \"message\",\n   \"date\": \"2023-08-23T13:11:23\",\n   \"date_unixtime\": \"1692821483\",\n   \"from\": \"Jiminy Cricket\",\n   \"from_id\": \"user123450513\",\n   \"text\": \"You better trust your conscience\",\n   \"text_entities\": [\n    {\n     \"type\": \"plain\",\n     \"text\": \"You better trust your conscience\"\n    }\n   ]\n  },\n  {\n   \"id\": 2,\n   \"type\": \"message\",\n   \"date\": \"2023-08-23T13:13:20\",\n   \"date_unixtime\": \"1692821600\",\n   \"from\": \"Batman & Robin\",\n   \"from_id\": \"user6565661032\",\n   \"text\": \"What did you just say?\",\n   \"text_entities\": [\n    {\n     \"type\": \"plain\",\n     \"text\": \"What did you just say?\"\n    }\n   ]\n  }\n ]\n}\n\n2. Create the Chat Loader‚Äã\n\nAll that's required is the file path. You can optionally specify the user name that maps to an ai message as well an configure whether to merge message runs.\n\nfrom langchain.chat_loaders.telegram import TelegramChatLoader\n\nloader = TelegramChatLoader(\n    path=\"./telegram_conversation.json\",\n)\n\n3. Load messages‚Äã\n\nThe load() (or lazy_load) methods return a list of \"ChatSessions\" that currently just contain a list of messages per loaded conversation.\n\nfrom typing import List\n\nfrom langchain.chat_loaders.base import ChatSession\nfrom langchain.chat_loaders.utils import (\n    map_ai_messages,\n    merge_chat_runs,\n)\n\nraw_messages = loader.lazy_load()\n# Merge consecutive messages from the same sender into a single message\nmerged_messages = merge_chat_runs(raw_messages)\n# Convert messages from \"Jiminy Cricket\" to AI messages\nmessages: List[ChatSession] = list(\n    map_ai_messages(merged_messages, sender=\"Jiminy Cricket\")\n)\n\nNext Steps‚Äã\n\nYou can then use these messages how you see fit, such as fine-tuning a model, few-shot example selection, or directly make predictions for the next message\n\nfrom langchain.chat_models import ChatOpenAI\n\nllm = ChatOpenAI()\n\nfor chunk in llm.stream(messages[0][\"messages\"]):\n    print(chunk.content, end=\"\", flush=True)\n\n    I said, \"You better trust your conscience.\"\n\nPrevious\nSlack\nNext\nTwitter (via Apify)"
}