{
	"title": "Bind runtime args | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/expression_language/how_to/binding",
	"html": "LangChain Expression LanguageHow toBind runtime args\nBind runtime args\n\nSometimes we want to invoke a Runnable within a Runnable sequence with constant arguments that are not part of the output of the preceding Runnable in the sequence, and which are not part of the user input. We can use Runnable.bind() to easily pass these arguments in.\n\nSuppose we have a simple prompt + model sequence:\n\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.prompts import ChatPromptTemplate\nfrom langchain.schema import StrOutputParser\nfrom langchain.schema.runnable import RunnablePassthrough\n\nprompt = ChatPromptTemplate.from_messages(\n    [\n        (\n            \"system\",\n            \"Write out the following equation using algebraic symbols then solve it. Use the format\\n\\nEQUATION:...\\nSOLUTION:...\\n\\n\",\n        ),\n        (\"human\", \"{equation_statement}\"),\n    ]\n)\nmodel = ChatOpenAI(temperature=0)\nrunnable = (\n    {\"equation_statement\": RunnablePassthrough()} | prompt | model | StrOutputParser()\n)\n\nprint(runnable.invoke(\"x raised to the third plus seven equals 12\"))\n\n    EQUATION: x^3 + 7 = 12\n    \n    SOLUTION:\n    Subtracting 7 from both sides of the equation, we get:\n    x^3 = 12 - 7\n    x^3 = 5\n    \n    Taking the cube root of both sides, we get:\n    x = ‚àõ5\n    \n    Therefore, the solution to the equation x^3 + 7 = 12 is x = ‚àõ5.\n\n\nand want to call the model with certain stop words:\n\nrunnable = (\n    {\"equation_statement\": RunnablePassthrough()}\n    | prompt\n    | model.bind(stop=\"SOLUTION\")\n    | StrOutputParser()\n)\nprint(runnable.invoke(\"x raised to the third plus seven equals 12\"))\n\n    EQUATION: x^3 + 7 = 12\n    \n    \n\nAttaching OpenAI functions‚Äã\n\nOne particularly useful application of binding is to attach OpenAI functions to a compatible OpenAI model:\n\nfunction = {\n    \"name\": \"solver\",\n    \"description\": \"Formulates and solves an equation\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"equation\": {\n                \"type\": \"string\",\n                \"description\": \"The algebraic expression of the equation\",\n            },\n            \"solution\": {\n                \"type\": \"string\",\n                \"description\": \"The solution to the equation\",\n            },\n        },\n        \"required\": [\"equation\", \"solution\"],\n    },\n}\n\n# Need gpt-4 to solve this one correctly\nprompt = ChatPromptTemplate.from_messages(\n    [\n        (\n            \"system\",\n            \"Write out the following equation using algebraic symbols then solve it.\",\n        ),\n        (\"human\", \"{equation_statement}\"),\n    ]\n)\nmodel = ChatOpenAI(model=\"gpt-4\", temperature=0).bind(\n    function_call={\"name\": \"solver\"}, functions=[function]\n)\nrunnable = {\"equation_statement\": RunnablePassthrough()} | prompt | model\nrunnable.invoke(\"x raised to the third plus seven equals 12\")\n\n    AIMessage(content='', additional_kwargs={'function_call': {'name': 'solver', 'arguments': '{\\n\"equation\": \"x^3 + 7 = 12\",\\n\"solution\": \"x = ‚àõ5\"\\n}'}}, example=False)\n\nAttaching OpenAI tools‚Äã\ntools = [\n    {\n        \"type\": \"function\",\n        \"function\": {\n            \"name\": \"get_current_weather\",\n            \"description\": \"Get the current weather in a given location\",\n            \"parameters\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"location\": {\n                        \"type\": \"string\",\n                        \"description\": \"The city and state, e.g. San Francisco, CA\",\n                    },\n                    \"unit\": {\"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\"]},\n                },\n                \"required\": [\"location\"],\n            },\n        },\n    }\n]\n\nmodel = ChatOpenAI(model=\"gpt-3.5-turbo-1106\").bind(tools=tools)\nmodel.invoke(\"What's the weather in SF, NYC and LA?\")\n\n    AIMessage(content='', additional_kwargs={'tool_calls': [{'id': 'call_zHN0ZHwrxM7nZDdqTp6dkPko', 'function': {'arguments': '{\"location\": \"San Francisco, CA\", \"unit\": \"celsius\"}', 'name': 'get_current_weather'}, 'type': 'function'}, {'id': 'call_aqdMm9HBSlFW9c9rqxTa7eQv', 'function': {'arguments': '{\"location\": \"New York, NY\", \"unit\": \"celsius\"}', 'name': 'get_current_weather'}, 'type': 'function'}, {'id': 'call_cx8E567zcLzYV2WSWVgO63f1', 'function': {'arguments': '{\"location\": \"Los Angeles, CA\", \"unit\": \"celsius\"}', 'name': 'get_current_weather'}, 'type': 'function'}]})\n\nPrevious\nHow to\nNext\nConfigure chain internals at runtime"
}