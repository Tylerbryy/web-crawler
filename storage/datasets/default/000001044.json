{
	"title": "Infino | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/integrations/callbacks/infino",
	"html": "ComponentsCallbacksInfino\nInfino\n\nThis example shows how one can track the following while calling OpenAI and ChatOpenAI models via LangChain and Infino:\n\nprompt input,\nresponse from ChatGPT or any other LangChain model,\nlatency,\nerrors,\nnumber of tokens consumed\nInitializing‚Äã\n# Install necessary dependencies.\npip install -q infinopy\npip install -q matplotlib\npip install -q tiktoken\n\nimport datetime as dt\nimport json\nimport time\n\nimport matplotlib.dates as md\nimport matplotlib.pyplot as plt\nfrom infinopy import InfinoClient\nfrom langchain.callbacks import InfinoCallbackHandler\nfrom langchain.llms import OpenAI\n\nStart Infino server, initialize the Infino client‚Äã\n# Start server using the Infino docker image.\ndocker run --rm --detach --name infino-example -p 3000:3000 infinohq/infino:latest\n\n# Create Infino client.\nclient = InfinoClient()\n\n    a1159e99c6bdb3101139157acee6aba7ae9319375e77ab6fbc79beff75abeca3\n\nRead the questions dataset‚Äã\n# These are a subset of questions from Stanford's QA dataset -\n# https://rajpurkar.github.io/SQuAD-explorer/\ndata = \"\"\"In what country is Normandy located?\nWhen were the Normans in Normandy?\nFrom which countries did the Norse originate?\nWho was the Norse leader?\nWhat century did the Normans first gain their separate identity?\nWho gave their name to Normandy in the 1000's and 1100's\nWhat is France a region of?\nWho did King Charles III swear fealty to?\nWhen did the Frankish identity emerge?\nWho was the duke in the battle of Hastings?\nWho ruled the duchy of Normandy\nWhat religion were the Normans\nWhat type of major impact did the Norman dynasty have on modern Europe?\nWho was famed for their Christian spirit?\nWho assimilted the Roman language?\nWho ruled the country of Normandy?\nWhat principality did William the conquerer found?\nWhat is the original meaning of the word Norman?\nWhen was the Latin version of the word Norman first recorded?\nWhat name comes from the English words Normans/Normanz?\"\"\"\n\nquestions = data.split(\"\\n\")\n\nExample 1: LangChain OpenAI Q&A; Publish metrics and logs to Infino‚Äã\n# Set your key here.\n# os.environ[\"OPENAI_API_KEY\"] = \"YOUR_API_KEY\"\n\n# Create callback handler. This logs latency, errors, token usage, prompts as well as prompt responses to Infino.\nhandler = InfinoCallbackHandler(\n    model_id=\"test_openai\", model_version=\"0.1\", verbose=False\n)\n\n# Create LLM.\nllm = OpenAI(temperature=0.1)\n\n# Number of questions to ask the OpenAI model. We limit to a short number here to save $$ while running this demo.\nnum_questions = 10\n\nquestions = questions[0:num_questions]\nfor question in questions:\n    print(question)\n\n    # We send the question to OpenAI API, with Infino callback.\n    llm_result = llm.generate([question], callbacks=[handler])\n    print(llm_result)\n\n    In what country is Normandy located?\n    generations=[[Generation(text='\\n\\nNormandy is located in France.', generation_info={'finish_reason': 'stop', 'logprobs': None})]] llm_output={'token_usage': {'total_tokens': 16, 'prompt_tokens': 7, 'completion_tokens': 9}, 'model_name': 'text-davinci-003'} run=[RunInfo(run_id=UUID('67a516e3-d48a-4e83-92ba-a139079bd3b1'))]\n    When were the Normans in Normandy?\n    generations=[[Generation(text='\\n\\nThe Normans first settled in Normandy in the late 9th century.', generation_info={'finish_reason': 'stop', 'logprobs': None})]] llm_output={'token_usage': {'total_tokens': 24, 'prompt_tokens': 8, 'completion_tokens': 16}, 'model_name': 'text-davinci-003'} run=[RunInfo(run_id=UUID('6417a773-c863-4942-9607-c8a0c5d486e7'))]\n    From which countries did the Norse originate?\n    generations=[[Generation(text='\\n\\nThe Norse originated from Scandinavia, which includes the modern-day countries of Norway, Sweden, and Denmark.', generation_info={'finish_reason': 'stop', 'logprobs': None})]] llm_output={'token_usage': {'total_tokens': 32, 'prompt_tokens': 8, 'completion_tokens': 24}, 'model_name': 'text-davinci-003'} run=[RunInfo(run_id=UUID('70547d72-7925-454e-97fb-5539f8788c3f'))]\n    Who was the Norse leader?\n    generations=[[Generation(text='\\n\\nThe most famous Norse leader was the legendary Viking king Ragnar Lodbrok. He was a legendary Viking hero and ruler who is said to have lived in the 9th century. He is known for his legendary exploits, including leading a Viking raid on Paris in 845.', generation_info={'finish_reason': 'stop', 'logprobs': None})]] llm_output={'token_usage': {'total_tokens': 62, 'prompt_tokens': 6, 'completion_tokens': 56}, 'model_name': 'text-davinci-003'} run=[RunInfo(run_id=UUID('04500e37-44ab-4e56-9017-76fe8c19e2ca'))]\n    What century did the Normans first gain their separate identity?\n    generations=[[Generation(text='\\n\\nThe Normans first gained their separate identity in the 11th century.', generation_info={'finish_reason': 'stop', 'logprobs': None})]] llm_output={'token_usage': {'total_tokens': 28, 'prompt_tokens': 12, 'completion_tokens': 16}, 'model_name': 'text-davinci-003'} run=[RunInfo(run_id=UUID('adf319b7-1022-40df-9afe-1d65f869d83d'))]\n    Who gave their name to Normandy in the 1000's and 1100's\n    generations=[[Generation(text='\\n\\nThe Normans, a people from northern France, gave their name to Normandy in the 1000s and 1100s. The Normans were descendants of Vikings who had settled in the region in the late 800s.', generation_info={'finish_reason': 'stop', 'logprobs': None})]] llm_output={'token_usage': {'total_tokens': 57, 'prompt_tokens': 13, 'completion_tokens': 44}, 'model_name': 'text-davinci-003'} run=[RunInfo(run_id=UUID('1a0503bc-d033-4b69-a5fa-5e1796566133'))]\n    What is France a region of?\n    generations=[[Generation(text='\\n\\nFrance is a region of Europe.', generation_info={'finish_reason': 'stop', 'logprobs': None})]] llm_output={'token_usage': {'total_tokens': 16, 'prompt_tokens': 7, 'completion_tokens': 9}, 'model_name': 'text-davinci-003'} run=[RunInfo(run_id=UUID('7485d954-1c14-4dff-988a-25a0aa0871cc'))]\n    Who did King Charles III swear fealty to?\n    generations=[[Generation(text='\\n\\nKing Charles III swore fealty to King Philip II of Spain.', generation_info={'finish_reason': 'stop', 'logprobs': None})]] llm_output={'token_usage': {'total_tokens': 25, 'prompt_tokens': 10, 'completion_tokens': 15}, 'model_name': 'text-davinci-003'} run=[RunInfo(run_id=UUID('292c7143-4a08-43cd-a1e1-42cb1f594f33'))]\n    When did the Frankish identity emerge?\n    generations=[[Generation(text='\\n\\nThe Frankish identity began to emerge in the late 5th century, when the Franks began to expand their power and influence in the region. The Franks were a Germanic tribe that had settled in the area of modern-day France and Germany. They eventually established the Merovingian dynasty, which ruled much of Western Europe from the mid-6th century until 751.', generation_info={'finish_reason': 'stop', 'logprobs': None})]] llm_output={'token_usage': {'total_tokens': 85, 'prompt_tokens': 8, 'completion_tokens': 77}, 'model_name': 'text-davinci-003'} run=[RunInfo(run_id=UUID('3d9475c2-931e-4217-8bc3-b3e970e7597c'))]\n    Who was the duke in the battle of Hastings?\n    generations=[[Generation(text='\\n\\nThe Duke of Normandy, William the Conqueror, was the leader of the Norman forces at the Battle of Hastings in 1066.', generation_info={'finish_reason': 'stop', 'logprobs': None})]] llm_output={'token_usage': {'total_tokens': 39, 'prompt_tokens': 11, 'completion_tokens': 28}, 'model_name': 'text-davinci-003'} run=[RunInfo(run_id=UUID('b8f84619-ea5f-4c18-b411-b62194f36fe0'))]\n\nCreate Metric Charts‚Äã\n\nWe now use matplotlib to create graphs of latency, errors and tokens consumed.\n\n# Helper function to create a graph using matplotlib.\ndef plot(data, title):\n    data = json.loads(data)\n\n    # Extract x and y values from the data\n    timestamps = [item[\"time\"] for item in data]\n    dates = [dt.datetime.fromtimestamp(ts) for ts in timestamps]\n    y = [item[\"value\"] for item in data]\n\n    plt.rcParams[\"figure.figsize\"] = [6, 4]\n    plt.subplots_adjust(bottom=0.2)\n    plt.xticks(rotation=25)\n    ax = plt.gca()\n    xfmt = md.DateFormatter(\"%Y-%m-%d %H:%M:%S\")\n    ax.xaxis.set_major_formatter(xfmt)\n\n    # Create the plot\n    plt.plot(dates, y)\n\n    # Set labels and title\n    plt.xlabel(\"Time\")\n    plt.ylabel(\"Value\")\n    plt.title(title)\n\n    plt.show()\n\nresponse = client.search_ts(\"__name__\", \"latency\", 0, int(time.time()))\nplot(response.text, \"Latency\")\n\nresponse = client.search_ts(\"__name__\", \"error\", 0, int(time.time()))\nplot(response.text, \"Errors\")\n\nresponse = client.search_ts(\"__name__\", \"prompt_tokens\", 0, int(time.time()))\nplot(response.text, \"Prompt Tokens\")\n\nresponse = client.search_ts(\"__name__\", \"completion_tokens\", 0, int(time.time()))\nplot(response.text, \"Completion Tokens\")\n\nresponse = client.search_ts(\"__name__\", \"total_tokens\", 0, int(time.time()))\nplot(response.text, \"Total Tokens\")\n\nFull text query on prompt or prompt outputs.‚Äã\n# Search for a particular prompt text.\nquery = \"normandy\"\nresponse = client.search_log(query, 0, int(time.time()))\nprint(\"Results for\", query, \":\", response.text)\n\nprint(\"===\")\n\nquery = \"king charles III\"\nresponse = client.search_log(\"king charles III\", 0, int(time.time()))\nprint(\"Results for\", query, \":\", response.text)\n\n    Results for normandy : [{\"time\":1696947743,\"fields\":{\"prompt_response\":\"\\n\\nThe Normans, a people from northern France, gave their name to Normandy in the 1000s and 1100s. The Normans were descendants of Vikings who had settled in the region in the late 800s.\"},\"text\":\"\\n\\nThe Normans, a people from northern France, gave their name to Normandy in the 1000s and 1100s. The Normans were descendants of Vikings who had settled in the region in the late 800s.\"},{\"time\":1696947740,\"fields\":{\"prompt\":\"Who gave their name to Normandy in the 1000's and 1100's\"},\"text\":\"Who gave their name to Normandy in the 1000's and 1100's\"},{\"time\":1696947733,\"fields\":{\"prompt_response\":\"\\n\\nThe Normans first settled in Normandy in the late 9th century.\"},\"text\":\"\\n\\nThe Normans first settled in Normandy in the late 9th century.\"},{\"time\":1696947732,\"fields\":{\"prompt_response\":\"\\n\\nNormandy is located in France.\"},\"text\":\"\\n\\nNormandy is located in France.\"},{\"time\":1696947731,\"fields\":{\"prompt\":\"In what country is Normandy located?\"},\"text\":\"In what country is Normandy located?\"}]\n    ===\n    Results for king charles III : [{\"time\":1696947745,\"fields\":{\"prompt_response\":\"\\n\\nKing Charles III swore fealty to King Philip II of Spain.\"},\"text\":\"\\n\\nKing Charles III swore fealty to King Philip II of Spain.\"},{\"time\":1696947744,\"fields\":{\"prompt\":\"Who did King Charles III swear fealty to?\"},\"text\":\"Who did King Charles III swear fealty to?\"}]\n\nExample 2: Summarize a piece of text using ChatOpenAI\n# Set your key here.\n# os.environ[\"OPENAI_API_KEY\"] = \"YOUR_API_KEY\"\n\nfrom langchain.chains.summarize import load_summarize_chain\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.document_loaders import WebBaseLoader\n\n# Create callback handler. This logs latency, errors, token usage, prompts, as well as prompt responses to Infino.\nhandler = InfinoCallbackHandler(\n    model_id=\"test_chatopenai\", model_version=\"0.1\", verbose=False\n)\n\nurls = [\n    \"https://lilianweng.github.io/posts/2023-06-23-agent/\",\n    \"https://medium.com/lyft-engineering/lyftlearn-ml-model-training-infrastructure-built-on-kubernetes-aef8218842bb\",\n    \"https://blog.langchain.dev/week-of-10-2-langchain-release-notes/\",\n]\n\nfor url in urls:\n    loader = WebBaseLoader(url)\n    docs = loader.load()\n\n    llm = ChatOpenAI(temperature=0, model_name=\"gpt-3.5-turbo-16k\", callbacks=[handler])\n    chain = load_summarize_chain(llm, chain_type=\"stuff\", verbose=False)\n\n    chain.run(docs)\n\nCreate Metric Charts‚Äã\nresponse = client.search_ts(\"__name__\", \"latency\", 0, int(time.time()))\nplot(response.text, \"Latency\")\n\nresponse = client.search_ts(\"__name__\", \"error\", 0, int(time.time()))\nplot(response.text, \"Errors\")\n\nresponse = client.search_ts(\"__name__\", \"prompt_tokens\", 0, int(time.time()))\nplot(response.text, \"Prompt Tokens\")\n\nresponse = client.search_ts(\"__name__\", \"completion_tokens\", 0, int(time.time()))\nplot(response.text, \"Completion Tokens\")\n\n## Full text query on prompt or prompt outputs\n\n# Search for a particular prompt text.\nquery = \"machine learning\"\nresponse = client.search_log(query, 0, int(time.time()))\n\n# The output can be verbose - uncomment below if it needs to be printed.\n# print(\"Results for\", query, \":\", response.text)\n\nprint(\"===\")\n\n    ===\n\n## Stop Infino server\n\ndocker rm -f infino-example\n\n    infino-example\n\nPrevious\nContext\nNext\nLabel Studio"
}