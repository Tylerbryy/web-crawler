{
	"title": "AliCloud PAI EAS | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/integrations/chat/pai_eas_chat_endpoint",
	"html": "ComponentsChat modelsAliCloud PAI EAS\nAliCloud PAI EAS\n\nMachine Learning Platform for AI of Alibaba Cloud is a machine learning or deep learning engineering platform intended for enterprises and developers. It provides easy-to-use, cost-effective, high-performance, and easy-to-scale plug-ins that can be applied to various industry scenarios. With over 140 built-in optimization algorithms, Machine Learning Platform for AI provides whole-process AI engineering capabilities including data labeling (PAI-iTAG), model building (PAI-Designer and PAI-DSW), model training (PAI-DLC), compilation optimization, and inference deployment (PAI-EAS). PAI-EAS supports different types of hardware resources, including CPUs and GPUs, and features high throughput and low latency. It allows you to deploy large-scale complex models with a few clicks and perform elastic scale-ins and scale-outs in real time. It also provides a comprehensive O&M and monitoring system.\n\nSetup Eas Service‚Äã\n\nOne who want to use eas llms must set up eas service first. When the eas service is launched, eas_service_rul and eas_service token can be got. Users can refer to https://www.alibabacloud.com/help/en/pai/user-guide/service-deployment/ for more information. Try to set environment variables to init eas service url and token:\n\nexport EAS_SERVICE_URL=XXX\nexport EAS_SERVICE_TOKEN=XXX\n\n\nor run as follow codes:\n\nimport os\n\nfrom langchain.chat_models import PaiEasChatEndpoint\nfrom langchain.chat_models.base import HumanMessage\n\nos.environ[\"EAS_SERVICE_URL\"] = \"Your_EAS_Service_URL\"\nos.environ[\"EAS_SERVICE_TOKEN\"] = \"Your_EAS_Service_Token\"\nchat = PaiEasChatEndpoint(\n    eas_service_url=os.environ[\"EAS_SERVICE_URL\"],\n    eas_service_token=os.environ[\"EAS_SERVICE_TOKEN\"],\n)\n\nRun Chat Model‚Äã\n\nYou can use the default settings to call eas service as follows:\n\noutput = chat([HumanMessage(content=\"write a funny joke\")])\nprint(\"output:\", output)\n\n\nOr, call eas service with new inference params:\n\nkwargs = {\"temperature\": 0.8, \"top_p\": 0.8, \"top_k\": 5}\noutput = chat([HumanMessage(content=\"write a funny joke\")], **kwargs)\nprint(\"output:\", output)\n\n\nOr, run a stream call to get a stream response:\n\noutputs = chat.stream([HumanMessage(content=\"hi\")], streaming=True)\nfor output in outputs:\n    print(\"stream output:\", output)\n\nPrevious\nOpenAI\nNext\nPromptLayer ChatOpenAI"
}