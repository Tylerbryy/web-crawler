{
	"title": "Retry parser | 🦜️🔗 Langchain",
	"url": "https://python.langchain.com/docs/modules/model_io/output_parsers/retry",
	"html": "ModulesModel I/OOutput parsersRetry parser\nRetry parser\n\nWhile in some cases it is possible to fix any parsing mistakes by only looking at the output, in other cases it isn't. An example of this is when the output is not just in the incorrect format, but is partially complete. Consider the below example.\n\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.llms import OpenAI\nfrom langchain.output_parsers import (\n    OutputFixingParser,\n    PydanticOutputParser,\n)\nfrom langchain.prompts import (\n    PromptTemplate,\n)\nfrom pydantic import BaseModel, Field\n\ntemplate = \"\"\"Based on the user question, provide an Action and Action Input for what step should be taken.\n{format_instructions}\nQuestion: {query}\nResponse:\"\"\"\n\n\nclass Action(BaseModel):\n    action: str = Field(description=\"action to take\")\n    action_input: str = Field(description=\"input to the action\")\n\n\nparser = PydanticOutputParser(pydantic_object=Action)\n\nprompt = PromptTemplate(\n    template=\"Answer the user query.\\n{format_instructions}\\n{query}\\n\",\n    input_variables=[\"query\"],\n    partial_variables={\"format_instructions\": parser.get_format_instructions()},\n)\n\nprompt_value = prompt.format_prompt(query=\"who is leo di caprios gf?\")\n\nbad_response = '{\"action\": \"search\"}'\n\n\nIf we try to parse this response as is, we will get an error:\n\nparser.parse(bad_response)\n\n    ---------------------------------------------------------------------------\n\n    ValidationError                           Traceback (most recent call last)\n\n    File ~/workplace/langchain/langchain/output_parsers/pydantic.py:24, in PydanticOutputParser.parse(self, text)\n         23     json_object = json.loads(json_str)\n    ---> 24     return self.pydantic_object.parse_obj(json_object)\n         26 except (json.JSONDecodeError, ValidationError) as e:\n\n\n    File ~/.pyenv/versions/3.9.1/envs/langchain/lib/python3.9/site-packages/pydantic/main.py:527, in pydantic.main.BaseModel.parse_obj()\n\n\n    File ~/.pyenv/versions/3.9.1/envs/langchain/lib/python3.9/site-packages/pydantic/main.py:342, in pydantic.main.BaseModel.__init__()\n\n\n    ValidationError: 1 validation error for Action\n    action_input\n      field required (type=value_error.missing)\n\n    \n    During handling of the above exception, another exception occurred:\n\n\n    OutputParserException                     Traceback (most recent call last)\n\n    Cell In[6], line 1\n    ----> 1 parser.parse(bad_response)\n\n\n    File ~/workplace/langchain/langchain/output_parsers/pydantic.py:29, in PydanticOutputParser.parse(self, text)\n         27 name = self.pydantic_object.__name__\n         28 msg = f\"Failed to parse {name} from completion {text}. Got: {e}\"\n    ---> 29 raise OutputParserException(msg)\n\n\n    OutputParserException: Failed to parse Action from completion {\"action\": \"search\"}. Got: 1 validation error for Action\n    action_input\n      field required (type=value_error.missing)\n\n\nIf we try to use the OutputFixingParser to fix this error, it will be confused - namely, it doesn't know what to actually put for action input.\n\nfix_parser = OutputFixingParser.from_llm(parser=parser, llm=ChatOpenAI())\n\nfix_parser.parse(bad_response)\n\n    Action(action='search', action_input='')\n\n\nInstead, we can use the RetryOutputParser, which passes in the prompt (as well as the original output) to try again to get a better response.\n\nfrom langchain.output_parsers import RetryWithErrorOutputParser\n\nretry_parser = RetryWithErrorOutputParser.from_llm(\n    parser=parser, llm=OpenAI(temperature=0)\n)\n\nretry_parser.parse_with_prompt(bad_response, prompt_value)\n\n    Action(action='search', action_input='who is leo di caprios gf?')\n\nPrevious\nPydantic (JSON) parser\nNext\nStructured output parser"
}