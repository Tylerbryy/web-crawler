{
	"title": "Graphsignal | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/integrations/providers/graphsignal",
	"html": "ProvidersMoreGraphsignal\nGraphsignal\n\nThis page covers how to use Graphsignal to trace and monitor LangChain. Graphsignal enables full visibility into your application. It provides latency breakdowns by chains and tools, exceptions with full context, data monitoring, compute/GPU utilization, OpenAI cost analytics, and more.\n\nInstallation and Setup‚Äã\nInstall the Python library with pip install graphsignal\nCreate free Graphsignal account here\nGet an API key and set it as an environment variable (GRAPHSIGNAL_API_KEY)\nTracing and Monitoring‚Äã\n\nGraphsignal automatically instruments and starts tracing and monitoring chains. Traces and metrics are then available in your Graphsignal dashboards.\n\nInitialize the tracer by providing a deployment name:\n\nimport graphsignal\n\ngraphsignal.configure(deployment='my-langchain-app-prod')\n\n\nTo additionally trace any function or code, you can use a decorator or a context manager:\n\n@graphsignal.trace_function\ndef handle_request():    \n    chain.run(\"some initial text\")\n\nwith graphsignal.start_trace('my-chain'):\n    chain.run(\"some initial text\")\n\n\nOptionally, enable profiling to record function-level statistics for each trace.\n\nwith graphsignal.start_trace(\n        'my-chain', options=graphsignal.TraceOptions(enable_profiling=True)):\n    chain.run(\"some initial text\")\n\n\nSee the Quick Start guide for complete setup instructions.\n\nPrevious\nGradient\nNext\nGrobid"
}