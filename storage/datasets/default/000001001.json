{
	"title": "Eleven Labs Text2Speech | 🦜️🔗 Langchain",
	"url": "https://python.langchain.com/docs/integrations/tools/eleven_labs_tts",
	"html": "ComponentsToolsEleven Labs Text2Speech\nEleven Labs Text2Speech\n\nThis notebook shows how to interact with the ElevenLabs API to achieve text-to-speech capabilities.\n\nFirst, you need to set up an ElevenLabs account. You can follow the instructions here.\n\n# !pip install elevenlabs\n\nimport os\n\nos.environ[\"ELEVEN_API_KEY\"] = \"\"\n\nUsage​\nfrom langchain.tools import ElevenLabsText2SpeechTool\n\ntext_to_speak = \"Hello world! I am the real slim shady\"\n\ntts = ElevenLabsText2SpeechTool()\ntts.name\n\n    'eleven_labs_text2speech'\n\n\nWe can generate audio, save it to the temporary file and then play it.\n\nspeech_file = tts.run(text_to_speak)\ntts.play(speech_file)\n\n\nOr stream audio directly.\n\ntts.stream_speech(text_to_speak)\n\nUse within an Agent​\nfrom langchain.agents import AgentType, initialize_agent, load_tools\nfrom langchain.llms import OpenAI\n\nllm = OpenAI(temperature=0)\ntools = load_tools([\"eleven_labs_text2speech\"])\nagent = initialize_agent(\n    tools=tools,\n    llm=llm,\n    agent=AgentType.STRUCTURED_CHAT_ZERO_SHOT_REACT_DESCRIPTION,\n    verbose=True,\n)\n\naudio_file = agent.run(\"Tell me a joke and read it out for me.\")\n\n    \n    \n    > Entering new AgentExecutor chain...\n    Action:\n    ```\n    {\n      \"action\": \"eleven_labs_text2speech\",\n      \"action_input\": {\n        \"query\": \"Why did the chicken cross the playground? To get to the other slide!\"\n      }\n    }\n    ```\n    \n    \n    Observation: /tmp/tmpsfg783f1.wav\n    Thought: I have the audio file ready to be sent to the human\n    Action:\n    ```\n    {\n      \"action\": \"Final Answer\",\n      \"action_input\": \"/tmp/tmpsfg783f1.wav\"\n    }\n    ```\n    \n    \n    \n    > Finished chain.\n\ntts.play(audio_file)\n\nPrevious\nEden AI\nNext\nFile System"
}