{
	"title": "Llama.cpp | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/integrations/llms/llamacpp#grammars",
	"html": "ComponentsLLMsLlama.cpp\nLlama.cpp\n\nllama-cpp-python is a Python binding for llama.cpp.\n\nIt supports inference for many LLMs models, which can be accessed on Hugging Face.\n\nThis notebook goes over how to run llama-cpp-python within LangChain.\n\nNote: new versions of llama-cpp-python use GGUF model files (see here).\n\nThis is a breaking change.\n\nTo convert existing GGML models to GGUF you can run the following in llama.cpp:\n\npython ./convert-llama-ggmlv3-to-gguf.py --eps 1e-5 --input models/openorca-platypus2-13b.ggmlv3.q4_0.bin --output models/openorca-platypus2-13b.gguf.q4_0.bin\n\nInstallation‚Äã\n\nThere are different options on how to install the llama-cpp package:\n\nCPU usage\nCPU + GPU (using one of many BLAS backends)\nMetal GPU (MacOS with Apple Silicon Chip)\nCPU only installation‚Äã\npip install llama-cpp-python\n\nInstallation with OpenBLAS / cuBLAS / CLBlast‚Äã\n\nllama.cpp supports multiple BLAS backends for faster processing. Use the FORCE_CMAKE=1 environment variable to force the use of cmake and install the pip package for the desired BLAS backend (source).\n\nExample installation with cuBLAS backend:\n\nCMAKE_ARGS=\"-DLLAMA_CUBLAS=on\" FORCE_CMAKE=1 pip install llama-cpp-python\n\n\nIMPORTANT: If you have already installed the CPU only version of the package, you need to reinstall it from scratch. Consider the following command:\n\nCMAKE_ARGS=\"-DLLAMA_CUBLAS=on\" FORCE_CMAKE=1 pip install --upgrade --force-reinstall llama-cpp-python --no-cache-dir\n\nInstallation with Metal‚Äã\n\nllama.cpp supports Apple silicon first-class citizen - optimized via ARM NEON, Accelerate and Metal frameworks. Use the FORCE_CMAKE=1 environment variable to force the use of cmake and install the pip package for the Metal support (source).\n\nExample installation with Metal Support:\n\nCMAKE_ARGS=\"-DLLAMA_METAL=on\" FORCE_CMAKE=1 pip install llama-cpp-python\n\n\nIMPORTANT: If you have already installed a cpu only version of the package, you need to reinstall it from scratch: consider the following command:\n\nCMAKE_ARGS=\"-DLLAMA_METAL=on\" FORCE_CMAKE=1 pip install --upgrade --force-reinstall llama-cpp-python --no-cache-dir\n\nInstallation with Windows‚Äã\n\nIt is stable to install the llama-cpp-python library by compiling from the source. You can follow most of the instructions in the repository itself but there are some windows specific instructions which might be useful.\n\nRequirements to install the llama-cpp-python,\n\ngit\npython\ncmake\nVisual Studio Community (make sure you install this with the following settings)\nDesktop development with C++\nPython development\nLinux embedded development with C++\nClone git repository recursively to get llama.cpp submodule as well\ngit clone --recursive -j8 https://github.com/abetlen/llama-cpp-python.git\n\nOpen up command Prompt (or anaconda prompt if you have it installed), set up environment variables to install. Follow this if you do not have a GPU, you must set both of the following variables.\nset FORCE_CMAKE=1\nset CMAKE_ARGS=-DLLAMA_CUBLAS=OFF\n\n\nYou can ignore the second environment variable if you have an NVIDIA GPU.\n\nCompiling and installing‚Äã\n\nIn the same command prompt (anaconda prompt) you set the variables, you can cd into llama-cpp-python directory and run the following commands.\n\npython setup.py clean\npython setup.py install\n\nUsage‚Äã\n\nMake sure you are following all instructions to install all necessary model files.\n\nYou don't need an API_TOKEN as you will run the LLM locally.\n\nIt is worth understanding which models are suitable to be used on the desired machine.\n\nTheBloke's Hugging Face models have a Provided files section that exposes the RAM required to run models of different quantisation sizes and methods (eg: Llama2-7B-Chat-GGUF).\n\nThis github issue is also relevant to find the right model for your machine.\n\nfrom langchain.callbacks.manager import CallbackManager\nfrom langchain.callbacks.streaming_stdout import StreamingStdOutCallbackHandler\nfrom langchain.chains import LLMChain\nfrom langchain.llms import LlamaCpp\nfrom langchain.prompts import PromptTemplate\n\n\nConsider using a template that suits your model! Check the models page on Hugging Face etc. to get a correct prompting template.\n\ntemplate = \"\"\"Question: {question}\n\nAnswer: Let's work this out in a step by step way to be sure we have the right answer.\"\"\"\n\nprompt = PromptTemplate(template=template, input_variables=[\"question\"])\n\n# Callbacks support token-wise streaming\ncallback_manager = CallbackManager([StreamingStdOutCallbackHandler()])\n\nCPU‚Äã\n\nExample using a LLaMA 2 7B model\n\n# Make sure the model path is correct for your system!\nllm = LlamaCpp(\n    model_path=\"/Users/rlm/Desktop/Code/llama.cpp/models/openorca-platypus2-13b.gguf.q4_0.bin\",\n    temperature=0.75,\n    max_tokens=2000,\n    top_p=1,\n    callback_manager=callback_manager,\n    verbose=True,  # Verbose is required to pass to the callback manager\n)\n\nprompt = \"\"\"\nQuestion: A rap battle between Stephen Colbert and John Oliver\n\"\"\"\nllm(prompt)\n\n    \n    Stephen Colbert:\n    Yo, John, I heard you've been talkin' smack about me on your show.\n    Let me tell you somethin', pal, I'm the king of late-night TV\n    My satire is sharp as a razor, it cuts deeper than a knife\n    While you're just a british bloke tryin' to be funny with your accent and your wit.\n    John Oliver:\n    Oh Stephen, don't be ridiculous, you may have the ratings but I got the real talk.\n    My show is the one that people actually watch and listen to, not just for the laughs but for the facts.\n    While you're busy talkin' trash, I'm out here bringing the truth to light.\n    Stephen Colbert:\n    Truth? Ha! You think your show is about truth? Please, it's all just a joke to you.\n    You're just a fancy-pants british guy tryin' to be funny with your news and your jokes.\n    While I'm the one who's really makin' a difference, with my sat\n\n    \n    llama_print_timings:        load time =   358.60 ms\n    llama_print_timings:      sample time =   172.55 ms /   256 runs   (    0.67 ms per token,  1483.59 tokens per second)\n    llama_print_timings: prompt eval time =   613.36 ms /    16 tokens (   38.33 ms per token,    26.09 tokens per second)\n    llama_print_timings:        eval time = 10151.17 ms /   255 runs   (   39.81 ms per token,    25.12 tokens per second)\n    llama_print_timings:       total time = 11332.41 ms\n\n\n\n\n\n    \"\\nStephen Colbert:\\nYo, John, I heard you've been talkin' smack about me on your show.\\nLet me tell you somethin', pal, I'm the king of late-night TV\\nMy satire is sharp as a razor, it cuts deeper than a knife\\nWhile you're just a british bloke tryin' to be funny with your accent and your wit.\\nJohn Oliver:\\nOh Stephen, don't be ridiculous, you may have the ratings but I got the real talk.\\nMy show is the one that people actually watch and listen to, not just for the laughs but for the facts.\\nWhile you're busy talkin' trash, I'm out here bringing the truth to light.\\nStephen Colbert:\\nTruth? Ha! You think your show is about truth? Please, it's all just a joke to you.\\nYou're just a fancy-pants british guy tryin' to be funny with your news and your jokes.\\nWhile I'm the one who's really makin' a difference, with my sat\"\n\n\nExample using a LLaMA v1 model\n\n# Make sure the model path is correct for your system!\nllm = LlamaCpp(\n    model_path=\"./ggml-model-q4_0.bin\", callback_manager=callback_manager, verbose=True\n)\n\nllm_chain = LLMChain(prompt=prompt, llm=llm)\n\nquestion = \"What NFL team won the Super Bowl in the year Justin Bieber was born?\"\nllm_chain.run(question)\n\n    \n    \n    1. First, find out when Justin Bieber was born.\n    2. We know that Justin Bieber was born on March 1, 1994.\n    3. Next, we need to look up when the Super Bowl was played in that year.\n    4. The Super Bowl was played on January 28, 1995.\n    5. Finally, we can use this information to answer the question. The NFL team that won the Super Bowl in the year Justin Bieber was born is the San Francisco 49ers.\n\n    \n    llama_print_timings:        load time =   434.15 ms\n    llama_print_timings:      sample time =    41.81 ms /   121 runs   (    0.35 ms per token)\n    llama_print_timings: prompt eval time =  2523.78 ms /    48 tokens (   52.58 ms per token)\n    llama_print_timings:        eval time = 23971.57 ms /   121 runs   (  198.11 ms per token)\n    llama_print_timings:       total time = 28945.95 ms\n\n\n\n\n\n    '\\n\\n1. First, find out when Justin Bieber was born.\\n2. We know that Justin Bieber was born on March 1, 1994.\\n3. Next, we need to look up when the Super Bowl was played in that year.\\n4. The Super Bowl was played on January 28, 1995.\\n5. Finally, we can use this information to answer the question. The NFL team that won the Super Bowl in the year Justin Bieber was born is the San Francisco 49ers.'\n\nGPU‚Äã\n\nIf the installation with BLAS backend was correct, you will see a BLAS = 1 indicator in model properties.\n\nTwo of the most important parameters for use with GPU are:\n\nn_gpu_layers - determines how many layers of the model are offloaded to your GPU.\nn_batch - how many tokens are processed in parallel.\n\nSetting these parameters correctly will dramatically improve the evaluation speed (see wrapper code for more details).\n\nn_gpu_layers = 40  # Change this value based on your model and your GPU VRAM pool.\nn_batch = 512  # Should be between 1 and n_ctx, consider the amount of VRAM in your GPU.\n\n# Make sure the model path is correct for your system!\nllm = LlamaCpp(\n    model_path=\"/Users/rlm/Desktop/Code/llama.cpp/models/openorca-platypus2-13b.gguf.q4_0.bin\",\n    n_gpu_layers=n_gpu_layers,\n    n_batch=n_batch,\n    callback_manager=callback_manager,\n    verbose=True,  # Verbose is required to pass to the callback manager\n)\n\nllm_chain = LLMChain(prompt=prompt, llm=llm)\nquestion = \"What NFL team won the Super Bowl in the year Justin Bieber was born?\"\nllm_chain.run(question)\n\n    \n    \n    1. Identify Justin Bieber's birth date: Justin Bieber was born on March 1, 1994.\n    \n    2. Find the Super Bowl winner of that year: The NFL season of 1993 with the Super Bowl being played in January or of 1994.\n    \n    3. Determine which team won the game: The Dallas Cowboys faced the Buffalo Bills in Super Bowl XXVII on January 31, 1993 (as the year is mis-labelled due to a error). The Dallas Cowboys won this matchup.\n    \n    So, Justin Bieber was born when the Dallas Cowboys were the reigning NFL Super Bowl.\n\n    \n    llama_print_timings:        load time =   427.63 ms\n    llama_print_timings:      sample time =   115.85 ms /   164 runs   (    0.71 ms per token,  1415.67 tokens per second)\n    llama_print_timings: prompt eval time =   427.53 ms /    45 tokens (    9.50 ms per token,   105.26 tokens per second)\n    llama_print_timings:        eval time =  4526.53 ms /   163 runs   (   27.77 ms per token,    36.01 tokens per second)\n    llama_print_timings:       total time =  5293.77 ms\n\n\n\n\n\n    \"\\n\\n1. Identify Justin Bieber's birth date: Justin Bieber was born on March 1, 1994.\\n\\n2. Find the Super Bowl winner of that year: The NFL season of 1993 with the Super Bowl being played in January or of 1994.\\n\\n3. Determine which team won the game: The Dallas Cowboys faced the Buffalo Bills in Super Bowl XXVII on January 31, 1993 (as the year is mis-labelled due to a error). The Dallas Cowboys won this matchup.\\n\\nSo, Justin Bieber was born when the Dallas Cowboys were the reigning NFL Super Bowl.\"\n\nMetal‚Äã\n\nIf the installation with Metal was correct, you will see a NEON = 1 indicator in model properties.\n\nTwo of the most important GPU parameters are:\n\nn_gpu_layers - determines how many layers of the model are offloaded to your Metal GPU, in the most case, set it to 1 is enough for Metal\nn_batch - how many tokens are processed in parallel, default is 8, set to bigger number.\nf16_kv - for some reason, Metal only support True, otherwise you will get error such as Asserting on type 0 GGML_ASSERT: .../ggml-metal.m:706: false && \"not implemented\"\n\nSetting these parameters correctly will dramatically improve the evaluation speed (see wrapper code for more details).\n\nn_gpu_layers = 1  # Metal set to 1 is enough.\nn_batch = 512  # Should be between 1 and n_ctx, consider the amount of RAM of your Apple Silicon Chip.\n# Make sure the model path is correct for your system!\nllm = LlamaCpp(\n    model_path=\"/Users/rlm/Desktop/Code/llama.cpp/models/openorca-platypus2-13b.gguf.q4_0.bin\",\n    n_gpu_layers=n_gpu_layers,\n    n_batch=n_batch,\n    f16_kv=True,  # MUST set to True, otherwise you will run into problem after a couple of calls\n    callback_manager=callback_manager,\n    verbose=True,  # Verbose is required to pass to the callback manager\n)\n\n\nThe console log will show the following log to indicate Metal was enable properly.\n\nggml_metal_init: allocating\nggml_metal_init: using MPS\n...\n\n\nYou also could check Activity Monitor by watching the GPU usage of the process, the CPU usage will drop dramatically after turn on n_gpu_layers=1.\n\nFor the first call to the LLM, the performance may be slow due to the model compilation in Metal GPU.\n\nGrammars‚Äã\n\nWe can use grammars to constrain model outputs and sample tokens based on the rules defined in them.\n\nTo demonstrate this concept, we've included sample grammar files, that will be used in the examples below.\n\nCreating gbnf grammar files can be time-consuming, but if you have a use-case where output schemas are important, there are two tools that can help:\n\nOnline grammar generator app that converts TypeScript interface definitions to gbnf file.\nPython script for converting json schema to gbnf file. You can for example create pydantic object, generate its JSON schema using .schema_json() method, and then use this script to convert it to gbnf file.\n\nIn the first example, supply the path to the specifed json.gbnf file in order to produce JSON:\n\nn_gpu_layers = 1  # Metal set to 1 is enough.\nn_batch = 512  # Should be between 1 and n_ctx, consider the amount of RAM of your Apple Silicon Chip.\n# Make sure the model path is correct for your system!\nllm = LlamaCpp(\n    model_path=\"/Users/rlm/Desktop/Code/llama.cpp/models/openorca-platypus2-13b.gguf.q4_0.bin\",\n    n_gpu_layers=n_gpu_layers,\n    n_batch=n_batch,\n    f16_kv=True,  # MUST set to True, otherwise you will run into problem after a couple of calls\n    callback_manager=callback_manager,\n    verbose=True,  # Verbose is required to pass to the callback manager\n    grammar_path=\"/Users/rlm/Desktop/Code/langchain-main/langchain/libs/langchain/langchain/llms/grammars/json.gbnf\",\n)\n\nresult = llm(\"Describe a person in JSON format:\")\n\n    {\n      \"name\": \"John Doe\",\n      \"age\": 34,\n      \"\": {\n        \"title\": \"Software Developer\",\n        \"company\": \"Google\"\n      },\n      \"interests\": [\n        \"Sports\",\n        \"Music\",\n        \"Cooking\"\n      ],\n      \"address\": {\n        \"street_number\": 123,\n        \"street_name\": \"Oak Street\",\n        \"city\": \"Mountain View\",\n        \"state\": \"California\",\n        \"postal_code\": 94040\n      }}\n\n    \n    llama_print_timings:        load time =   357.51 ms\n    llama_print_timings:      sample time =  1213.30 ms /   144 runs   (    8.43 ms per token,   118.68 tokens per second)\n    llama_print_timings: prompt eval time =   356.78 ms /     9 tokens (   39.64 ms per token,    25.23 tokens per second)\n    llama_print_timings:        eval time =  3947.16 ms /   143 runs   (   27.60 ms per token,    36.23 tokens per second)\n    llama_print_timings:       total time =  5846.21 ms\n\n\nWe can also supply list.gbnf to return a list:\n\nn_gpu_layers = 1\nn_batch = 512\nllm = LlamaCpp(\n    model_path=\"/Users/rlm/Desktop/Code/llama.cpp/models/openorca-platypus2-13b.gguf.q4_0.bin\",\n    n_gpu_layers=n_gpu_layers,\n    n_batch=n_batch,\n    f16_kv=True,  # MUST set to True, otherwise you will run into problem after a couple of calls\n    callback_manager=callback_manager,\n    verbose=True,\n    grammar_path=\"/Users/rlm/Desktop/Code/langchain-main/langchain/libs/langchain/langchain/llms/grammars/list.gbnf\",\n)\n\nresult = llm(\"List of top-3 my favourite books:\")\n\n    [\"The Catcher in the Rye\", \"Wuthering Heights\", \"Anna Karenina\"]\n\n\n    \n    llama_print_timings:        load time =   322.34 ms\n    llama_print_timings:      sample time =   232.60 ms /    26 runs   (    8.95 ms per token,   111.78 tokens per second)\n    llama_print_timings: prompt eval time =   321.90 ms /    11 tokens (   29.26 ms per token,    34.17 tokens per second)\n    llama_print_timings:        eval time =   680.82 ms /    25 runs   (   27.23 ms per token,    36.72 tokens per second)\n    llama_print_timings:       total time =  1295.27 ms\n\nPrevious\nKoboldAI API\nNext\nLLM Caching integrations"
}