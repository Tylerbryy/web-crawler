{
	"title": "SageMaker Tracking | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/integrations/callbacks/sagemaker_tracking",
	"html": "ComponentsCallbacksSageMaker Tracking\nSageMaker Tracking\n\nThis notebook shows how LangChain Callback can be used to log and track prompts and other LLM hyperparameters into SageMaker Experiments. Here, we use different scenarios to showcase the capability:\n\nScenario 1: Single LLM - A case where a single LLM model is used to generate output based on a given prompt.\nScenario 2: Sequential Chain - A case where a sequential chain of two LLM models is used.\nScenario 3: Agent with Tools (Chain of Thought) - A case where multiple tools (search and math) are used in addition to an LLM.\n\nAmazon SageMaker is a fully managed service that is used to quickly and easily build, train and deploy machine learning (ML) models.\n\nAmazon SageMaker Experiments is a capability of Amazon SageMaker that lets you organize, track, compare and evaluate ML experiments and model versions.\n\nIn this notebook, we will create a single experiment to log the prompts from each scenario.\n\nInstallation and Setup‚Äã\npip install sagemaker\npip install openai\npip install google-search-results\n\n\nFirst, setup the required API keys\n\nOpenAI: https://platform.openai.com/account/api-keys (For OpenAI LLM model)\nGoogle SERP API: https://serpapi.com/manage-api-key (For Google Search Tool)\nimport os\n\n## Add your API keys below\nos.environ[\"OPENAI_API_KEY\"] = \"<ADD-KEY-HERE>\"\nos.environ[\"SERPAPI_API_KEY\"] = \"<ADD-KEY-HERE>\"\n\nfrom langchain.agents import initialize_agent, load_tools\nfrom langchain.callbacks import SageMakerCallbackHandler\nfrom langchain.chains import LLMChain, SimpleSequentialChain\nfrom langchain.llms import OpenAI\nfrom langchain.prompts import PromptTemplate\nfrom sagemaker.analytics import ExperimentAnalytics\nfrom sagemaker.experiments.run import Run\nfrom sagemaker.session import Session\n\nLLM Prompt Tracking‚Äã\n# LLM Hyperparameters\nHPARAMS = {\n    \"temperature\": 0.1,\n    \"model_name\": \"text-davinci-003\",\n}\n\n# Bucket used to save prompt logs (Use `None` is used to save the default bucket or otherwise change it)\nBUCKET_NAME = None\n\n# Experiment name\nEXPERIMENT_NAME = \"langchain-sagemaker-tracker\"\n\n# Create SageMaker Session with the given bucket\nsession = Session(default_bucket=BUCKET_NAME)\n\nScenario 1 - LLM‚Äã\nRUN_NAME = \"run-scenario-1\"\nPROMPT_TEMPLATE = \"tell me a joke about {topic}\"\nINPUT_VARIABLES = {\"topic\": \"fish\"}\n\nwith Run(\n    experiment_name=EXPERIMENT_NAME, run_name=RUN_NAME, sagemaker_session=session\n) as run:\n    # Create SageMaker Callback\n    sagemaker_callback = SageMakerCallbackHandler(run)\n\n    # Define LLM model with callback\n    llm = OpenAI(callbacks=[sagemaker_callback], **HPARAMS)\n\n    # Create prompt template\n    prompt = PromptTemplate.from_template(template=PROMPT_TEMPLATE)\n\n    # Create LLM Chain\n    chain = LLMChain(llm=llm, prompt=prompt, callbacks=[sagemaker_callback])\n\n    # Run chain\n    chain.run(**INPUT_VARIABLES)\n\n    # Reset the callback\n    sagemaker_callback.flush_tracker()\n\nScenario 2 - Sequential Chain‚Äã\nRUN_NAME = \"run-scenario-2\"\n\nPROMPT_TEMPLATE_1 = \"\"\"You are a playwright. Given the title of play, it is your job to write a synopsis for that title.\nTitle: {title}\nPlaywright: This is a synopsis for the above play:\"\"\"\nPROMPT_TEMPLATE_2 = \"\"\"You are a play critic from the New York Times. Given the synopsis of play, it is your job to write a review for that play.\nPlay Synopsis: {synopsis}\nReview from a New York Times play critic of the above play:\"\"\"\n\nINPUT_VARIABLES = {\n    \"input\": \"documentary about good video games that push the boundary of game design\"\n}\n\nwith Run(\n    experiment_name=EXPERIMENT_NAME, run_name=RUN_NAME, sagemaker_session=session\n) as run:\n    # Create SageMaker Callback\n    sagemaker_callback = SageMakerCallbackHandler(run)\n\n    # Create prompt templates for the chain\n    prompt_template1 = PromptTemplate.from_template(template=PROMPT_TEMPLATE_1)\n    prompt_template2 = PromptTemplate.from_template(template=PROMPT_TEMPLATE_2)\n\n    # Define LLM model with callback\n    llm = OpenAI(callbacks=[sagemaker_callback], **HPARAMS)\n\n    # Create chain1\n    chain1 = LLMChain(llm=llm, prompt=prompt_template1, callbacks=[sagemaker_callback])\n\n    # Create chain2\n    chain2 = LLMChain(llm=llm, prompt=prompt_template2, callbacks=[sagemaker_callback])\n\n    # Create Sequential chain\n    overall_chain = SimpleSequentialChain(\n        chains=[chain1, chain2], callbacks=[sagemaker_callback]\n    )\n\n    # Run overall sequential chain\n    overall_chain.run(**INPUT_VARIABLES)\n\n    # Reset the callback\n    sagemaker_callback.flush_tracker()\n\nScenario 3 - Agent with Tools‚Äã\nRUN_NAME = \"run-scenario-3\"\nPROMPT_TEMPLATE = \"Who is the oldest person alive? And what is their current age raised to the power of 1.51?\"\n\nwith Run(\n    experiment_name=EXPERIMENT_NAME, run_name=RUN_NAME, sagemaker_session=session\n) as run:\n    # Create SageMaker Callback\n    sagemaker_callback = SageMakerCallbackHandler(run)\n\n    # Define LLM model with callback\n    llm = OpenAI(callbacks=[sagemaker_callback], **HPARAMS)\n\n    # Define tools\n    tools = load_tools([\"serpapi\", \"llm-math\"], llm=llm, callbacks=[sagemaker_callback])\n\n    # Initialize agent with all the tools\n    agent = initialize_agent(\n        tools, llm, agent=\"zero-shot-react-description\", callbacks=[sagemaker_callback]\n    )\n\n    # Run agent\n    agent.run(input=PROMPT_TEMPLATE)\n\n    # Reset the callback\n    sagemaker_callback.flush_tracker()\n\nLoad Log Data‚Äã\n\nOnce the prompts are logged, we can easily load and convert them to Pandas DataFrame as follows.\n\n# Load\nlogs = ExperimentAnalytics(experiment_name=EXPERIMENT_NAME)\n\n# Convert as pandas dataframe\ndf = logs.dataframe(force_refresh=True)\n\nprint(df.shape)\ndf.head()\n\n\nAs can be seen above, there are three runs (rows) in the experiment corresponding to each scenario. Each run logs the prompts and related LLM settings/hyperparameters as json and are saved in s3 bucket. Feel free to load and explore the log data from each json path.\n\nPrevious\nPromptLayer\nNext\nStreamlit"
}