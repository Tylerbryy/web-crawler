{
	"title": "Enum parser | 🦜️🔗 Langchain",
	"url": "https://python.langchain.com/docs/modules/model_io/output_parsers/enum",
	"html": "ModulesModel I/OOutput parsersEnum parser\nEnum parser\n\nThis notebook shows how to use an Enum output parser.\n\nfrom langchain.output_parsers.enum import EnumOutputParser\n\nfrom enum import Enum\n\n\nclass Colors(Enum):\n    RED = \"red\"\n    GREEN = \"green\"\n    BLUE = \"blue\"\n\nparser = EnumOutputParser(enum=Colors)\n\nparser.parse(\"red\")\n\n    <Colors.RED: 'red'>\n\n# Can handle spaces\nparser.parse(\" green\")\n\n    <Colors.GREEN: 'green'>\n\n# And new lines\nparser.parse(\"blue\\n\")\n\n    <Colors.BLUE: 'blue'>\n\n# And raises errors when appropriate\nparser.parse(\"yellow\")\n\n    ---------------------------------------------------------------------------\n\n    ValueError                                Traceback (most recent call last)\n\n    File ~/workplace/langchain/langchain/output_parsers/enum.py:25, in EnumOutputParser.parse(self, response)\n         24 try:\n    ---> 25     return self.enum(response.strip())\n         26 except ValueError:\n\n\n    File ~/.pyenv/versions/3.9.1/lib/python3.9/enum.py:315, in EnumMeta.__call__(cls, value, names, module, qualname, type, start)\n        314 if names is None:  # simple value lookup\n    --> 315     return cls.__new__(cls, value)\n        316 # otherwise, functional API: we're creating a new Enum type\n\n\n    File ~/.pyenv/versions/3.9.1/lib/python3.9/enum.py:611, in Enum.__new__(cls, value)\n        610 if result is None and exc is None:\n    --> 611     raise ve_exc\n        612 elif exc is None:\n\n\n    ValueError: 'yellow' is not a valid Colors\n\n    \n    During handling of the above exception, another exception occurred:\n\n\n    OutputParserException                     Traceback (most recent call last)\n\n    Cell In[8], line 2\n          1 # And raises errors when appropriate\n    ----> 2 parser.parse(\"yellow\")\n\n\n    File ~/workplace/langchain/langchain/output_parsers/enum.py:27, in EnumOutputParser.parse(self, response)\n         25     return self.enum(response.strip())\n         26 except ValueError:\n    ---> 27     raise OutputParserException(\n         28         f\"Response '{response}' is not one of the \"\n         29         f\"expected values: {self._valid_values}\"\n         30     )\n\n\n    OutputParserException: Response 'yellow' is not one of the expected values: ['red', 'green', 'blue']\n\nPrevious\nDatetime parser\nNext\nAuto-fixing parser"
}