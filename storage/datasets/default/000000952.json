{
	"title": "Conversation Buffer Window | 🦜️🔗 Langchain",
	"url": "https://python.langchain.com/docs/modules/memory/types/buffer_window",
	"html": "ModulesMoreMemoryMemory typesConversation Buffer Window\nConversation Buffer Window\n\nConversationBufferWindowMemory keeps a list of the interactions of the conversation over time. It only uses the last K interactions. This can be useful for keeping a sliding window of the most recent interactions, so the buffer does not get too large.\n\nLet's first explore the basic functionality of this type of memory.\n\nfrom langchain.memory import ConversationBufferWindowMemory\n\nmemory = ConversationBufferWindowMemory( k=1)\nmemory.save_context({\"input\": \"hi\"}, {\"output\": \"whats up\"})\nmemory.save_context({\"input\": \"not much you\"}, {\"output\": \"not much\"})\n\nmemory.load_memory_variables({})\n\n    {'history': 'Human: not much you\\nAI: not much'}\n\n\nWe can also get the history as a list of messages (this is useful if you are using this with a chat model).\n\nmemory = ConversationBufferWindowMemory( k=1, return_messages=True)\nmemory.save_context({\"input\": \"hi\"}, {\"output\": \"whats up\"})\nmemory.save_context({\"input\": \"not much you\"}, {\"output\": \"not much\"})\n\nmemory.load_memory_variables({})\n\n    {'history': [HumanMessage(content='not much you', additional_kwargs={}),\n      AIMessage(content='not much', additional_kwargs={})]}\n\nUsing in a chain​\n\nLet's walk through an example, again setting verbose=True so we can see the prompt.\n\nfrom langchain.llms import OpenAI\nfrom langchain.chains import ConversationChain\nconversation_with_summary = ConversationChain(\n    llm=OpenAI(temperature=0),\n    # We set a low k=2, to only keep the last 2 interactions in memory\n    memory=ConversationBufferWindowMemory(k=2),\n    verbose=True\n)\nconversation_with_summary.predict(input=\"Hi, what's up?\")\n\n\n\n    > Entering new ConversationChain chain...\n    Prompt after formatting:\n    The following is a friendly conversation between a human and an AI. The AI is talkative and provides lots of specific details from its context. If the AI does not know the answer to a question, it truthfully says it does not know.\n\n    Current conversation:\n\n    Human: Hi, what's up?\n    AI:\n\n    > Finished chain.\n\n\n\n\n\n    \" Hi there! I'm doing great. I'm currently helping a customer with a technical issue. How about you?\"\n\nconversation_with_summary.predict(input=\"What's their issues?\")\n\n\n\n    > Entering new ConversationChain chain...\n    Prompt after formatting:\n    The following is a friendly conversation between a human and an AI. The AI is talkative and provides lots of specific details from its context. If the AI does not know the answer to a question, it truthfully says it does not know.\n\n    Current conversation:\n    Human: Hi, what's up?\n    AI:  Hi there! I'm doing great. I'm currently helping a customer with a technical issue. How about you?\n    Human: What's their issues?\n    AI:\n\n    > Finished chain.\n\n\n\n\n\n    \" The customer is having trouble connecting to their Wi-Fi network. I'm helping them troubleshoot the issue and get them connected.\"\n\nconversation_with_summary.predict(input=\"Is it going well?\")\n\n\n\n    > Entering new ConversationChain chain...\n    Prompt after formatting:\n    The following is a friendly conversation between a human and an AI. The AI is talkative and provides lots of specific details from its context. If the AI does not know the answer to a question, it truthfully says it does not know.\n\n    Current conversation:\n    Human: Hi, what's up?\n    AI:  Hi there! I'm doing great. I'm currently helping a customer with a technical issue. How about you?\n    Human: What's their issues?\n    AI:  The customer is having trouble connecting to their Wi-Fi network. I'm helping them troubleshoot the issue and get them connected.\n    Human: Is it going well?\n    AI:\n\n    > Finished chain.\n\n\n\n\n\n    \" Yes, it's going well so far. We've already identified the problem and are now working on a solution.\"\n\n# Notice here that the first interaction does not appear.\nconversation_with_summary.predict(input=\"What's the solution?\")\n\n\n\n    > Entering new ConversationChain chain...\n    Prompt after formatting:\n    The following is a friendly conversation between a human and an AI. The AI is talkative and provides lots of specific details from its context. If the AI does not know the answer to a question, it truthfully says it does not know.\n\n    Current conversation:\n    Human: What's their issues?\n    AI:  The customer is having trouble connecting to their Wi-Fi network. I'm helping them troubleshoot the issue and get them connected.\n    Human: Is it going well?\n    AI:  Yes, it's going well so far. We've already identified the problem and are now working on a solution.\n    Human: What's the solution?\n    AI:\n\n    > Finished chain.\n\n\n\n\n\n    \" The solution is to reset the router and reconfigure the settings. We're currently in the process of doing that.\"\n\nPrevious\nConversation Buffer\nNext\nEntity"
}