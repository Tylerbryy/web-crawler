{
	"title": "XML parser | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/modules/model_io/output_parsers/xml",
	"html": "ModulesModel I/OOutput parsersXML parser\nXML parser\n\nThis output parser allows users to obtain results from LLM in the popular XML format.\n\nKeep in mind that large language models are leaky abstractions! You'll have to use an LLM with sufficient capacity to generate well-formed XML.\n\nIn the following example we use Claude model (https://docs.anthropic.com/claude/docs) which works really well with XML tags.\n\nfrom langchain.llms import Anthropic\nfrom langchain.output_parsers import XMLOutputParser\nfrom langchain.prompts import PromptTemplate\n\nmodel = Anthropic(model=\"claude-2\", max_tokens_to_sample=512, temperature=0.1)\n\n    /Users/harrisonchase/workplace/langchain/libs/langchain/langchain/llms/anthropic.py:171: UserWarning: This Anthropic LLM is deprecated. Please use `from langchain.chat_models import ChatAnthropic` instead\n      warnings.warn(\n\n\nLet's start with the simple request to the model.\n\nactor_query = \"Generate the shortened filmography for Tom Hanks.\"\noutput = model(\n    f\"\"\"\n\nHuman:\n{actor_query}\nPlease enclose the movies in <movie></movie> tags\nAssistant:\n\"\"\"\n)\nprint(output)\n\n     Here is the shortened filmography for Tom Hanks enclosed in <movie> tags:\n    \n    <movie>Splash (1984)</movie>\n    <movie>Big (1988)</movie> \n    <movie>A League of Their Own (1992)</movie>\n    <movie>Sleepless in Seattle (1993)</movie>  \n    <movie>Forrest Gump (1994)</movie>\n    <movie>Apollo 13 (1995)</movie>\n    <movie>Toy Story (1995)</movie>\n    <movie>Saving Private Ryan (1998)</movie>\n    <movie>Cast Away (2000)</movie>\n    <movie>The Da Vinci Code (2006)</movie>\n    <movie>Toy Story 3 (2010)</movie>\n    <movie>Captain Phillips (2013)</movie>\n    <movie>Bridge of Spies (2015)</movie>\n    <movie>Toy Story 4 (2019)</movie>\n\n\nNow we will use the XMLOutputParser in order to get the structured output.\n\nparser = XMLOutputParser()\n\nprompt = PromptTemplate(\n    template=\"\"\"\n    \n    Human:\n    {query}\n    {format_instructions}\n    Assistant:\"\"\",\n    input_variables=[\"query\"],\n    partial_variables={\"format_instructions\": parser.get_format_instructions()},\n)\n\nchain = prompt | model | parser\n\noutput = chain.invoke({\"query\": actor_query})\nprint(output)\n\n    {'filmography': [{'movie': [{'title': 'Splash'}, {'year': '1984'}]}, {'movie': [{'title': 'Big'}, {'year': '1988'}]}, {'movie': [{'title': 'A League of Their Own'}, {'year': '1992'}]}, {'movie': [{'title': 'Sleepless in Seattle'}, {'year': '1993'}]}, {'movie': [{'title': 'Forrest Gump'}, {'year': '1994'}]}, {'movie': [{'title': 'Toy Story'}, {'year': '1995'}]}, {'movie': [{'title': 'Apollo 13'}, {'year': '1995'}]}, {'movie': [{'title': 'Saving Private Ryan'}, {'year': '1998'}]}, {'movie': [{'title': 'Cast Away'}, {'year': '2000'}]}, {'movie': [{'title': 'Catch Me If You Can'}, {'year': '2002'}]}, {'movie': [{'title': 'The Polar Express'}, {'year': '2004'}]}, {'movie': [{'title': 'Bridge of Spies'}, {'year': '2015'}]}]}\n\n\nFinally, let's add some tags to tailor the output to our needs.\n\nparser = XMLOutputParser(tags=[\"movies\", \"actor\", \"film\", \"name\", \"genre\"])\nprompt = PromptTemplate(\n    template=\"\"\"\n    \n    Human:\n    {query}\n    {format_instructions}\n    Assistant:\"\"\",\n    input_variables=[\"query\"],\n    partial_variables={\"format_instructions\": parser.get_format_instructions()},\n)\n\n\nchain = prompt | model | parser\n\noutput = chain.invoke({\"query\": actor_query})\n\nprint(output)\n\n    {'movies': [{'actor': [{'name': 'Tom Hanks'}, {'film': [{'name': 'Splash'}, {'genre': 'Comedy'}]}, {'film': [{'name': 'Big'}, {'genre': 'Comedy'}]}, {'film': [{'name': 'A League of Their Own'}, {'genre': 'Comedy'}]}, {'film': [{'name': 'Sleepless in Seattle'}, {'genre': 'Romance'}]}, {'film': [{'name': 'Forrest Gump'}, {'genre': 'Drama'}]}, {'film': [{'name': 'Toy Story'}, {'genre': 'Animation'}]}, {'film': [{'name': 'Apollo 13'}, {'genre': 'Drama'}]}, {'film': [{'name': 'Saving Private Ryan'}, {'genre': 'War'}]}, {'film': [{'name': 'Cast Away'}, {'genre': 'Adventure'}]}, {'film': [{'name': 'The Green Mile'}, {'genre': 'Drama'}]}]}]}\n\nPrevious\nStructured output parser\nNext\nRetrieval"
}