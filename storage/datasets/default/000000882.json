{
	"title": "DashVector | ü¶úÔ∏èüîó Langchain",
	"url": "https://python.langchain.com/docs/integrations/vectorstores/dashvector",
	"html": "ComponentsVector storesDashVector\nDashVector\n\nDashVector is a fully-managed vectorDB service that supports high-dimension dense and sparse vectors, real-time insertion and filtered search. It is built to scale automatically and can adapt to different application requirements.\n\nThis notebook shows how to use functionality related to the DashVector vector database.\n\nTo use DashVector, you must have an API key. Here are the installation instructions.\n\nInstall‚Äã\npip install dashvector dashscope\n\n\nWe want to use DashScopeEmbeddings so we also have to get the Dashscope API Key.\n\nimport getpass\nimport os\n\nos.environ[\"DASHVECTOR_API_KEY\"] = getpass.getpass(\"DashVector API Key:\")\nos.environ[\"DASHSCOPE_API_KEY\"] = getpass.getpass(\"DashScope API Key:\")\n\nExample‚Äã\nfrom langchain.embeddings.dashscope import DashScopeEmbeddings\nfrom langchain.text_splitter import CharacterTextSplitter\nfrom langchain.vectorstores import DashVector\n\nfrom langchain.document_loaders import TextLoader\n\nloader = TextLoader(\"../../modules/state_of_the_union.txt\")\ndocuments = loader.load()\ntext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)\ndocs = text_splitter.split_documents(documents)\n\nembeddings = DashScopeEmbeddings()\n\n\nWe can create DashVector from documents.\n\ndashvector = DashVector.from_documents(docs, embeddings)\n\nquery = \"What did the president say about Ketanji Brown Jackson\"\ndocs = dashvector.similarity_search(query)\nprint(docs)\n\n\nWe can add texts with meta datas and ids, and search with meta filter.\n\ntexts = [\"foo\", \"bar\", \"baz\"]\nmetadatas = [{\"key\": i} for i in range(len(texts))]\nids = [\"0\", \"1\", \"2\"]\n\ndashvector.add_texts(texts, metadatas=metadatas, ids=ids)\n\ndocs = dashvector.similarity_search(\"foo\", filter=\"key = 2\")\nprint(docs)\n\n    [Document(page_content='baz', metadata={'key': 2})]\n\nPrevious\nClickHouse\nNext\nDingoDB"
}