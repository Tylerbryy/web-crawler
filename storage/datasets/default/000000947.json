{
	"title": "Custom prompt template | 🦜️🔗 Langchain",
	"url": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/custom_prompt_template.html",
	"html": "ModulesModel I/OPromptsPrompt templatesCustom prompt template\nCustom prompt template\n\nLet's suppose we want the LLM to generate English language explanations of a function given its name. To achieve this task, we will create a custom prompt template that takes in the function name as input, and formats the prompt template to provide the source code of the function.\n\nWhy are custom prompt templates needed?​\n\nLangChain provides a set of default prompt templates that can be used to generate prompts for a variety of tasks. However, there may be cases where the default prompt templates do not meet your needs. For example, you may want to create a prompt template with specific dynamic instructions for your language model. In such cases, you can create a custom prompt template.\n\nCreating a custom prompt template​\n\nThere are essentially two distinct prompt templates available - string prompt templates and chat prompt templates. String prompt templates provides a simple prompt in string format, while chat prompt templates produces a more structured prompt to be used with a chat API.\n\nIn this guide, we will create a custom prompt using a string prompt template.\n\nTo create a custom string prompt template, there are two requirements:\n\nIt has an input_variables attribute that exposes what input variables the prompt template expects.\nIt defines a format method that takes in keyword arguments corresponding to the expected input_variables and returns the formatted prompt.\n\nWe will create a custom prompt template that takes in the function name as input and formats the prompt to provide the source code of the function. To achieve this, let's first create a function that will return the source code of a function given its name.\n\nimport inspect\n\n\ndef get_source_code(function_name):\n    # Get the source code of the function\n    return inspect.getsource(function_name)\n\n\nNext, we'll create a custom prompt template that takes in the function name as input, and formats the prompt template to provide the source code of the function.\n\nfrom langchain.prompts import StringPromptTemplate\nfrom pydantic import BaseModel, validator\n\nPROMPT = \"\"\"\\\nGiven the function name and source code, generate an English language explanation of the function.\nFunction Name: {function_name}\nSource Code:\n{source_code}\nExplanation:\n\"\"\"\n\n\nclass FunctionExplainerPromptTemplate(StringPromptTemplate, BaseModel):\n    \"\"\"A custom prompt template that takes in the function name as input, and formats the prompt template to provide the source code of the function.\"\"\"\n\n    @validator(\"input_variables\")\n    def validate_input_variables(cls, v):\n        \"\"\"Validate that the input variables are correct.\"\"\"\n        if len(v) != 1 or \"function_name\" not in v:\n            raise ValueError(\"function_name must be the only input_variable.\")\n        return v\n\n    def format(self, **kwargs) -> str:\n        # Get the source code of the function\n        source_code = get_source_code(kwargs[\"function_name\"])\n\n        # Generate the prompt to be sent to the language model\n        prompt = PROMPT.format(\n            function_name=kwargs[\"function_name\"].__name__, source_code=source_code\n        )\n        return prompt\n\n    def _prompt_type(self):\n        return \"function-explainer\"\n\nUse the custom prompt template​\n\nNow that we have created a custom prompt template, we can use it to generate prompts for our task.\n\nfn_explainer = FunctionExplainerPromptTemplate(input_variables=[\"function_name\"])\n\n# Generate a prompt for the function \"get_source_code\"\nprompt = fn_explainer.format(function_name=get_source_code)\nprint(prompt)\n\n    Given the function name and source code, generate an English language explanation of the function.\n    Function Name: get_source_code\n    Source Code:\n    def get_source_code(function_name):\n        # Get the source code of the function\n        return inspect.getsource(function_name)\n    \n    Explanation:\n    \n\nPrevious\nConnecting to a Feature Store\nNext\nFew-shot prompt templates"
}